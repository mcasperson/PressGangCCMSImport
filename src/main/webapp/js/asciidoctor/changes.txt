The requires in Asciidoctor include the files required for DocBook conversion as dynamic. This is not supported by Opal.
To support DocBook conversion in AsciiDoctor.js the following lines need to be added to
~/.gem/ruby/gems/asciidoctor-1.5.0.preview.7/lib/asciidoctor/asciidoctor.rb

require 'asciidoctor/converter/docbook5' if RUBY_ENGINE_OPAL
require 'asciidoctor/converter/docbook45' if RUBY_ENGINE_OPAL

Opal does not play well with Angular.js. See https://github.com/opal/opal/issues/259 and  https://github.com/opal/opal/issues/400 for details.

This can be fixed by doing a global find and replace on the $ character with opal$ in opal.js and asciidoctor.js. Some manual clean up then needs to be
done to pick up cases where the $ sign was used as part of a regex.

In opal.js you have 3 lines like:
if ((opal$a = name['opal$=~'](/^[A-Z]\w*$/)) === false || opal$a === nil) {

In asciidoctor.js you have lines line:
opal$opal.cdecl(opal$scope, 'PassInlineMacroRx', /\\?(?:(\+{3}|opal\${2})(.*?)\1|pass:([a-z,]*)\[(.*?[^\\])\])/i);
opal$opal.cdecl(opal$scope, 'BoundaryRxs', opal$hash2(["\"", "'", ","], {"\"": /.*?[^\\](?=")/, "'": /.*?[^\\](?=')/, ",": /.*?(?=[ \t]*(,|opal$))/}));
opal$opal.cdecl(opal$scope, 'SkipRxs', opal$hash2(["blank", ","], {"blank": opal$scope.BlankRx, ",": /[ \t]*(,|opal$)/}));

and regexes at the bottom of the file starting with AuthorInfoLineRx

Also need to change calls to opal$round() to just Math.round()