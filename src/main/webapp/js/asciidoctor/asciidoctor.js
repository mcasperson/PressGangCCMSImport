/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass, opal$module = opal$opal.module;
  (function(opal$base, opal$super) {
    function opal$Set(){};
    var self = opal$Set = opal$klass(opal$base, opal$super, 'Set', opal$Set);

    var def = opal$Set._proto, opal$scope = opal$Set._scope, TMP_1, TMP_4, TMP_6;
    def.hash = nil;
    self.opal$include(opal$scope.Enumerable);

    opal$opal.defs(self, 'opal$[]', function(ary) {
      var self = this;
      ary = opal$slice.call(arguments, 0);
      return self.opal$new(ary);
    });

    def.opal$initialize = TMP_1 = function(enumopal$) {
      var opal$a, opal$b, TMP_2, self = this, opal$iter = TMP_1._p, block = opal$iter || nil;
      if (enumopal$ == null) {
        enumopal$ = nil
      }
      TMP_1._p = null;
      self.hash = opal$scope.Hash.opal$new();
      if ((opal$a = enumopal$['opal$nil?']()) !== false && opal$a !== nil) {
        return nil};
      if (block !== false && block !== nil) {
        return (opal$a = (opal$b = self).opal$do_with_enum, opal$a._p = (TMP_2 = function(o){var self = TMP_2._s || this;if (o == null) o = nil;
        return self.opal$add(block['opal$[]'](o))}, TMP_2._s = self, TMP_2), opal$a).call(opal$b, enumopal$)
        } else {
        return self.opal$merge(enumopal$)
      };
    };

    def['opal$=='] = function(other) {
      var opal$a, opal$b, TMP_3, self = this;
      if ((opal$a = self['opal$equal?'](other)) !== false && opal$a !== nil) {
        return true
      } else if ((opal$a = other['opal$instance_of?'](self.opal$class())) !== false && opal$a !== nil) {
        return self.hash['opal$=='](other.opal$instance_variable_get("@hash"))
      } else if ((opal$a = (opal$b = other['opal$is_a?'](opal$scope.Set), opal$b !== false && opal$b !== nil ?self.opal$size()['opal$=='](other.opal$size()) : opal$b)) !== false && opal$a !== nil) {
        return (opal$a = (opal$b = other)['opal$all?'], opal$a._p = (TMP_3 = function(o){var self = TMP_3._s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['opal$include?'](o)}, TMP_3._s = self, TMP_3), opal$a).call(opal$b)
        } else {
        return false
      };
    };

    def.opal$add = function(o) {
      var self = this;
      self.hash['opal$[]='](o, true);
      return self;
    };

    opal$opal.defn(self, 'opal$<<', def.opal$add);

    def['opal$add?'] = function(o) {
      var opal$a, self = this;
      if ((opal$a = self['opal$include?'](o)) !== false && opal$a !== nil) {
        return nil
        } else {
        return self.opal$add(o)
      };
    };

    def.opal$each = TMP_4 = function() {
      var opal$a, opal$b, self = this, opal$iter = TMP_4._p, block = opal$iter || nil;
      TMP_4._p = null;
      if (block === nil) {
        return self.opal$enum_for("each")};
      (opal$a = (opal$b = self.hash).opal$each_key, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b);
      return self;
    };

    def['opal$empty?'] = function() {
      var self = this;
      return self.hash['opal$empty?']();
    };

    def.opal$clear = function() {
      var self = this;
      self.hash.opal$clear();
      return self;
    };

    def['opal$include?'] = function(o) {
      var self = this;
      return self.hash['opal$include?'](o);
    };

    opal$opal.defn(self, 'opal$member?', def['opal$include?']);

    def.opal$merge = function(enumopal$) {
      var opal$a, opal$b, TMP_5, self = this;
      (opal$a = (opal$b = self).opal$do_with_enum, opal$a._p = (TMP_5 = function(o){var self = TMP_5._s || this;if (o == null) o = nil;
      return self.opal$add(o)}, TMP_5._s = self, TMP_5), opal$a).call(opal$b, enumopal$);
      return self;
    };

    def.opal$do_with_enum = TMP_6 = function(enumopal$) {
      var opal$a, opal$b, self = this, opal$iter = TMP_6._p, block = opal$iter || nil;
      TMP_6._p = null;
      return (opal$a = (opal$b = enumopal$).opal$each, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b);
    };

    def.opal$size = function() {
      var self = this;
      return self.hash.opal$size();
    };

    opal$opal.defn(self, 'opal$length', def.opal$size);

    return (def.opal$to_a = function() {
      var self = this;
      return self.hash.opal$keys();
    }, nil);
  })(self, null);
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Enumerable');

    var def = self._proto, opal$scope = self._scope, TMP_7;
    def.opal$to_set = TMP_7 = function(klass, args) {
      var opal$a, opal$b, self = this, opal$iter = TMP_7._p, block = opal$iter || nil;
      args = opal$slice.call(arguments, 1);
      if (klass == null) {
        klass = opal$scope.Set
      }
      TMP_7._p = null;
      return (opal$a = (opal$b = klass).opal$new, opal$a._p = block.opal$to_proc(), opal$a).apply(opal$b, [self].concat(args));
    }
        ;opal$opal.donate(self, ["opal$to_set"]);
  })(self);
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass;
  return (function(opal$base, opal$super) {
    function opal$StringScanner(){};
    var self = opal$StringScanner = opal$klass(opal$base, opal$super, 'StringScanner', opal$StringScanner);

    var def = opal$StringScanner._proto, opal$scope = opal$StringScanner._scope;
    def.pos = def.string = def.working = def.prev_pos = def.matched = def.match = nil;
    self.opal$attr_reader("pos");

    self.opal$attr_reader("matched");

    def.opal$initialize = function(string) {
      var self = this;
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    };

    def['opal$bol?'] = function() {
      var self = this;
      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    };

    def.opal$scan = function(regex) {
      var self = this;
      
      var regex  = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regex.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos      += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    };

    def['opal$[]'] = function(idx) {
      var self = this;
      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      return match[idx];
    ;
    };

    def.opal$check = function(regex) {
      var self = this;
      
      var regexp = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regexp.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    };

    def.opal$peek = function(length) {
      var self = this;
      return self.working.substring(0, length);
    };

    def['opal$eos?'] = function() {
      var self = this;
      return self.working.length === 0;
    };

    def.opal$skip = function(re) {
      var self = this;
      
      re = new RegExp('^' + re.source)
      var result = re.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;
        self.matched = match_str;
        self.prev_pos = self.pos;
        self.pos += match_len;
        self.working = self.working.substring(match_len);
        return match_len;
      }
    ;
    };

    def.opal$get_byte = function() {
      var self = this;
      
      var result = nil;
      if (self.pos < self.string.length) {
        self.prev_pos = self.pos;
        self.pos += 1;
        result = self.matched = self.working.substring(0, 1);
        self.working = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    ;
    };

    opal$opal.defn(self, 'opal$getch', def.opal$get_byte);

    def['opal$pos='] = function(pos) {
      var self = this;
      
      if (pos < 0) {
        pos += self.string.opal$length();
      }
    ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    };

    def.opal$rest = function() {
      var self = this;
      return self.working;
    };

    def.opal$terminate = function() {
      var self = this;
      self.match = nil;
      return self['opal$pos='](self.string.opal$length());
    };

    return (def.opal$unscan = function() {
      var self = this;
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, nil);
  })(self, null)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass;
  return (function(opal$base, opal$super) {
    function opal$Dir(){};
    var self = opal$Dir = opal$klass(opal$base, opal$super, 'Dir', opal$Dir);

    var def = opal$Dir._proto, opal$scope = opal$Dir._scope;
    opal$opal.defs(self, 'opal$pwd', function() {
      var self = this;
      return ".";
    });

    return (opal$opal.defs(self, 'opal$home', function() {
      var self = this;
      return opal$scope.ENV['opal$[]']("HOME");
    }), nil);
  })(self, null)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass;
  return (function(opal$base, opal$super) {
    function opal$SecurityError(){};
    var self = opal$SecurityError = opal$klass(opal$base, opal$super, 'SecurityError', opal$SecurityError);

    var def = opal$SecurityError._proto, opal$scope = opal$SecurityError._scope;
    return nil;
  })(self, opal$scope.Exception)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass, opal$gvars = opal$opal.gvars, opal$range = opal$opal.range;
  (function(opal$base, opal$super) {
    function opal$Kernel(){};
    var self = opal$Kernel = opal$klass(opal$base, opal$super, 'Kernel', opal$Kernel);

    var def = opal$Kernel._proto, opal$scope = opal$Kernel._scope, TMP_1;
    return (def.opal$open = TMP_1 = function(path, rest) {
      var opal$a, opal$b, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil, file = nil;
      rest = opal$slice.call(arguments, 1);
      TMP_1._p = null;
      file = (opal$a = opal$scope.File).opal$new.apply(opal$a, [path].concat(rest));
      if ((opal$yield !== nil)) {
        return opal$b = opal$opal.opal$yield1(opal$yield, file), opal$b === opal$breaker ? opal$b : opal$b
        } else {
        return file
      };
    }, nil)
  })(self, null);
  return (function(opal$base, opal$super) {
    function opal$File(){};
    var self = opal$File = opal$klass(opal$base, opal$super, 'File', opal$File);

    var def = opal$File._proto, opal$scope = opal$File._scope, TMP_2;
    def.eof = def.path = nil;
    opal$opal.cdecl(opal$scope, 'SEPARATOR', "/");

    opal$opal.cdecl(opal$scope, 'ALT_SEPARATOR', nil);

    self.opal$attr_reader("eof");

    self.opal$attr_reader("lineno");

    self.opal$attr_reader("path");

    def.opal$initialize = function(path, mode) {
      var self = this;
      if (mode == null) {
        mode = "r"
      }
      self.path = path;
      self.contents = nil;
      self.eof = false;
      return self.lineno = 0;
    };

    def.opal$read = function() {
      var opal$a, self = this, res = nil;
      if ((opal$a = self.eof) !== false && opal$a !== nil) {
        return ""
        } else {
        res = opal$scope.File.opal$read(self.path);
        self.eof = true;
        self.lineno = res.opal$size();
        return res;
      };
    };

    def.opal$each_line = TMP_2 = function(separator) {
      var opal$a, self = this, opal$iter = TMP_2._p, block = opal$iter || nil, lines = nil;
      if (separator == null) {
        separator = opal$gvars["/"]
      }
      TMP_2._p = null;
      if ((opal$a = self.eof) !== false && opal$a !== nil) {
        return (function() {if ((block !== nil)) {
          return self
          } else {
          return [].opal$to_enum()
        }; return nil; })()};
      if ((block !== nil)) {
        lines = opal$scope.File.opal$read(self.path);
        
        self.eof = false;
        self.lineno = 0; 
        var chomped  = lines.opal$chomp(),
            trailing = lines.length != chomped.length,
            splitted = chomped.split(separator);

        for (var i = 0, length = splitted.length; i < length; i++) {
          self.lineno += 1;
          if (i < length - 1 || trailing) {
            (((opal$a = opal$opal.opal$yield1(block, splitted[i] + separator)) === opal$breaker) ? opal$breaker.opal$v : opal$a);
          }
          else {
            (((opal$a = opal$opal.opal$yield1(block, splitted[i])) === opal$breaker) ? opal$breaker.opal$v : opal$a);
          }
        }
        self.eof = true;
      
        return self;
        } else {
        return self.opal$read().opal$each_line()
      };
    };

    opal$opal.defs(self, 'opal$expand_path', function(path) {
      var self = this;
      return path;
    });

    opal$opal.defs(self, 'opal$join', function(paths) {
      var self = this;
      paths = opal$slice.call(arguments, 0);
      return paths['opal$*'](opal$scope.SEPARATOR);
    });

    opal$opal.defs(self, 'opal$basename', function(path) {
      var opal$a, self = this, offset = nil;
      if ((opal$a = (offset = path.opal$rindex(opal$scope.SEPARATOR))) !== false && opal$a !== nil) {
        return path['opal$[]'](opal$range((offset['opal$+'](1)), -1, false))
        } else {
        return path
      };
    });

    opal$opal.defs(self, 'opal$dirname', function(path) {
      var opal$a, self = this, offset = nil;
      if ((opal$a = (offset = path.opal$rindex(opal$scope.SEPARATOR))) !== false && opal$a !== nil) {
        return path['opal$[]'](opal$range(0, (offset['opal$-'](1)), false))
        } else {
        return "."
      };
    });

    opal$opal.defs(self, 'opal$extname', function(path) {
      var opal$a, self = this, last_dot_idx = nil;
      if ((opal$a = path['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
        return ""};
      last_dot_idx = path['opal$[]'](opal$range(1, -1, false)).opal$rindex(".");
      if ((opal$a = last_dot_idx['opal$nil?']()) !== false && opal$a !== nil) {
        return ""
        } else {
        return path['opal$[]'](opal$range((last_dot_idx['opal$+'](1)), -1, false))
      };
    });

    opal$opal.defs(self, 'opal$file?', function(path) {
      var self = this;
      return true;
    });

    return (opal$opal.defs(self, 'opal$read', function(path) {
      var self = this;
      
      var data = ''
      var status = -1;
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', path, false);
        xhr.addEventListener('load', function() {
          status = this.status;
          // status is 0 for local file mode (i.e., file://)
          if (status == 0 || status == 200) {
            data = this.responseText;
          }
        });
        xhr.overrideMimeType('text/plain');
        xhr.send();
      }
      catch (e) {
        status = 0;
      }
      // assume that no data in local file mode means it doesn't exist
      if (status == 404 || (status == 0 && data == '')) {
        throw opal$scope.IOError.opal$new('No such file or directory: ' + path);
      }
    
      return data;
    }), nil);
  })(self, null);
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base) {
      var self = opal$module(opal$base, 'Debug');

      var def = self._proto, opal$scope = self._scope, TMP_1;
      self.show_debug = nil;

      opal$opal.defs(self, 'opal$debug', TMP_1 = function() {
        var opal$a, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil;
        TMP_1._p = null;
        if ((opal$a = self['opal$show_debug_output?']()) !== false && opal$a !== nil) {
          return self.opal$warn((((opal$a = opal$opal.opal$yieldX(opal$yield, [])) === opal$breaker) ? opal$breaker.opal$v : opal$a))
          } else {
          return nil
        };
      });

      opal$opal.defs(self, 'opal$set_debug', function(value) {
        var self = this;
        return self.show_debug = value;
      });

      opal$opal.defs(self, 'opal$show_debug_output?', function() {
        var opal$a, opal$b, opal$c, self = this;
        if (self.show_debug == null) self.show_debug = nil;

        return (((opal$a = self.show_debug) !== false && opal$a !== nil) ? opal$a : (((opal$b = opal$scope.ENV['opal$[]']("DEBUG")['opal$==']("true")) ? (opal$c = opal$scope.ENV['opal$[]']("SUPPRESS_DEBUG")['opal$==']("true"), (opal$c === nil || opal$c === false)) : opal$b)));
      });

      opal$opal.defs(self, 'opal$puts_indented', function(level, args) {
        var opal$a, opal$b, TMP_2, self = this, indentation = nil;
        args = opal$slice.call(arguments, 1);
        indentation = " "['opal$*'](level)['opal$*'](2);
        return (opal$a = (opal$b = args).opal$each, opal$a._p = (TMP_2 = function(arg){var self = TMP_2._s || this, opal$a, opal$b, TMP_3;if (arg == null) arg = nil;
        return (opal$a = (opal$b = self).opal$debug, opal$a._p = (TMP_3 = function(){var self = TMP_3._s || this;
          return "" + (indentation) + (arg)}, TMP_3._s = self, TMP_3), opal$a).call(opal$b)}, TMP_2._s = self, TMP_2), opal$a).call(opal$b);
      });
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    opal$opal.cdecl(opal$scope, 'VERSION', "1.5.0.preview4")
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$gvars = opal$opal.gvars;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Timings(){};
      var self = opal$Timings = opal$klass(opal$base, opal$super, 'Timings', opal$Timings);

      var def = opal$Timings._proto, opal$scope = opal$Timings._scope;
      def.timers = def.log = nil;
      def.opal$initialize = function() {
        var self = this;
        self.log = opal$hash2([], {});
        return self.timers = opal$hash2([], {});
      };

      def.opal$start = function(key) {
        var opal$a, self = this;
        return self.timers['opal$[]='](key, ((opal$a = opal$opal.Object._scope.Time) == null ? opal$opal.cm('Time') : opal$a).opal$now());
      };

      def.opal$record = function(key) {
        var opal$a, self = this;
        return self.log['opal$[]='](key, (((opal$a = opal$opal.Object._scope.Time) == null ? opal$opal.cm('Time') : opal$a).opal$now()['opal$-']((self.timers.opal$delete(key)))));
      };

      def.opal$read_parse = function() {
        var opal$a, self = this, time = nil;
        if (((time = ((((opal$a = self.log['opal$[]']("read")) !== false && opal$a !== nil) ? opal$a : 0))['opal$+'](((((opal$a = self.log['opal$[]']("parse")) !== false && opal$a !== nil) ? opal$a : 0)))))['opal$>'](0)) {
          return time
          } else {
          return nil
        };
      };

      def.opal$convert = function() {
        var self = this;
        return self.log['opal$[]']("convert");
      };

      def.opal$read_parse_convert = function() {
        var opal$a, self = this, time = nil;
        if (((time = ((((opal$a = self.log['opal$[]']("read")) !== false && opal$a !== nil) ? opal$a : 0))['opal$+'](((((opal$a = self.log['opal$[]']("parse")) !== false && opal$a !== nil) ? opal$a : 0)))['opal$+'](((((opal$a = self.log['opal$[]']("convert")) !== false && opal$a !== nil) ? opal$a : 0)))))['opal$>'](0)) {
          return time
          } else {
          return nil
        };
      };

      def.opal$total = function() {
        var opal$a, self = this, time = nil;
        if (((time = ((((opal$a = self.log['opal$[]']("read")) !== false && opal$a !== nil) ? opal$a : 0))['opal$+'](((((opal$a = self.log['opal$[]']("parse")) !== false && opal$a !== nil) ? opal$a : 0)))['opal$+'](((((opal$a = self.log['opal$[]']("convert")) !== false && opal$a !== nil) ? opal$a : 0)))['opal$+'](((((opal$a = self.log['opal$[]']("write")) !== false && opal$a !== nil) ? opal$a : 0)))))['opal$>'](0)) {
          return time
          } else {
          return nil
        };
      };

      return (def.opal$print_report = function(to, subject) {
        var self = this;
        if (to == null) {
          to = opal$gvars["stdout"]
        }
        if (subject == null) {
          subject = nil
        }
        if (subject !== false && subject !== nil) {
          to.opal$puts("Input file: " + (subject))};
        to.opal$puts("  Time to read and parse source: " + ("%05.5f"['opal$%'](self.opal$read_parse())));
        to.opal$puts("  Time to convert document: " + ("%05.5f"['opal$%'](self.opal$convert())));
        return to.opal$puts("  Total time (read, parse and convert): " + ("%05.5f"['opal$%'](self.opal$read_parse_convert())));
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass;
  (function(opal$base, opal$super) {
    function opal$NilClass(){};
    var self = opal$NilClass = opal$klass(opal$base, opal$super, 'NilClass', opal$NilClass);

    var def = opal$NilClass._proto, opal$scope = opal$NilClass._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("nil_or_empty?")) !== false && opal$a !== nil) {
      return nil
      } else {
      return opal$opal.defn(self, 'opal$nil_or_empty?', def['opal$nil?'])
    }
  })(self, null);
  (function(opal$base, opal$super) {
    function opal$String(){};
    var self = opal$String = opal$klass(opal$base, opal$super, 'String', opal$String);

    var def = opal$String._proto, opal$scope = opal$String._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("nil_or_empty?")) !== false && opal$a !== nil) {
      return nil
      } else {
      return opal$opal.defn(self, 'opal$nil_or_empty?', def['opal$empty?'])
    }
  })(self, null);
  (function(opal$base, opal$super) {
    function opal$Array(){};
    var self = opal$Array = opal$klass(opal$base, opal$super, 'Array', opal$Array);

    var def = opal$Array._proto, opal$scope = opal$Array._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("nil_or_empty?")) !== false && opal$a !== nil) {
      return nil
      } else {
      return opal$opal.defn(self, 'opal$nil_or_empty?', def['opal$empty?'])
    }
  })(self, null);
  (function(opal$base, opal$super) {
    function opal$Hash(){};
    var self = opal$Hash = opal$klass(opal$base, opal$super, 'Hash', opal$Hash);

    var def = opal$Hash._proto, opal$scope = opal$Hash._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("nil_or_empty?")) !== false && opal$a !== nil) {
      return nil
      } else {
      return opal$opal.defn(self, 'opal$nil_or_empty?', def['opal$empty?'])
    }
  })(self, null);
  return (function(opal$base, opal$super) {
    function opal$Numeric(){};
    var self = opal$Numeric = opal$klass(opal$base, opal$super, 'Numeric', opal$Numeric);

    var def = opal$Numeric._proto, opal$scope = opal$Numeric._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("nil_or_empty?")) !== false && opal$a !== nil) {
      return nil
      } else {
      return opal$opal.defn(self, 'opal$nil_or_empty?', def['opal$nil?'])
    }
  })(self, null);
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$klass = opal$opal.klass, opal$range = opal$opal.range;
  return (function(opal$base, opal$super) {
    function opal$String(){};
    var self = opal$String = opal$klass(opal$base, opal$super, 'String', opal$String);

    var def = opal$String._proto, opal$scope = opal$String._scope, opal$a;
    if ((opal$a = self['opal$respond_to?']("chr")) !== false && opal$a !== nil) {
      return nil
      } else {
      return (def.opal$chr = function() {
        var self = this;
        return self['opal$[]'](opal$range(0, 0, false));
      }, nil)
    }
  })(self, null)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var opal$a, self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice;
  ;
  if (((opal$a = opal$opal.Object._scope.RUBY_VERSION) == null ? opal$opal.cm('RUBY_VERSION') : opal$a)['opal$>=']("1.9")) {
    return nil
    } else {
    ;
    return true;
  };
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$range = opal$opal.range, opal$gvars = opal$opal.gvars;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base) {
      var self = opal$module(opal$base, 'Helpers');

      var def = self._proto, opal$scope = self._scope;
      opal$opal.defs(self, 'opal$require_library', function(name, gem) {
        var opal$a, self = this, e = nil;
        if (gem == null) {
          gem = true
        }
        try {
        return true
        } catch (opal$err) {if (((opal$a = opal$opal.Object._scope.LoadError) == null ? opal$opal.cm('LoadError') : opal$a)['opal$==='](opal$err)) {e = opal$err;
          if (gem !== false && gem !== nil) {
            return self.opal$fail("asciidoctor: FAILED: required gem '" + ((function() {if (gem['opal$=='](true)) {
              return name
              } else {
              return gem
            }; return nil; })()) + "' is not installed. Processing aborted.")
            } else {
            return self.opal$fail("asciidoctor: FAILED: " + (e.opal$message().opal$chomp(".")) + ". Processing aborted.")
          }
          }else { throw opal$err; }
        };
      });

      opal$opal.defs(self, 'opal$normalize_lines', function(data) {
        var opal$a, self = this;
        if (data.opal$class()['opal$=='](((opal$a = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$a))) {
          return (self.opal$normalize_lines_from_string(data))
          } else {
          return (self.opal$normalize_lines_array(data))
        };
      });

      opal$opal.defs(self, 'opal$normalize_lines_array', function(data) {
        var opal$a, opal$b, TMP_1, opal$c, TMP_2, opal$d, TMP_3, opal$e, TMP_4, self = this, leading_bytes = nil, first_line = nil, utf8 = nil, leading_2_bytes = nil;
        if ((opal$a = data['opal$empty?']()) !== false && opal$a !== nil) {
          return []};
        leading_bytes = ((first_line = data['opal$[]'](0)))['opal$[]'](opal$range(0, 2, false)).opal$bytes().opal$to_a();
        if ((opal$a = opal$scope.COERCE_ENCODING) !== false && opal$a !== nil) {
          utf8 = (((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_8;
          if (((leading_2_bytes = leading_bytes['opal$[]'](opal$range(0, 1, false))))['opal$=='](opal$scope.BOM_BYTES_UTF_16LE)) {
            return (opal$a = (opal$b = ((data.opal$join().opal$force_encoding((((opal$c = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$c))._scope.UTF_16LE))['opal$[]'](opal$range(1, -1, false)).opal$encode(utf8)).opal$lines()).opal$map, opal$a._p = (TMP_1 = function(line){var self = TMP_1._s || this;if (line == null) line = nil;
            return line.opal$rstrip()}, TMP_1._s = self, TMP_1), opal$a).call(opal$b)
          } else if (leading_2_bytes['opal$=='](opal$scope.BOM_BYTES_UTF_16BE)) {
            data['opal$[]='](0, (first_line.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_16BE))['opal$[]'](opal$range(1, -1, false)));
            return (opal$a = (opal$c = data).opal$map, opal$a._p = (TMP_2 = function(line){var self = TMP_2._s || this, opal$a;if (line == null) line = nil;
            return "" + (((line.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_16BE)).opal$encode(utf8)).opal$rstrip())}, TMP_2._s = self, TMP_2), opal$a).call(opal$c);
          } else if (leading_bytes['opal$[]'](opal$range(0, 2, false))['opal$=='](opal$scope.BOM_BYTES_UTF_8)) {
            data['opal$[]='](0, (first_line.opal$force_encoding(utf8))['opal$[]'](opal$range(1, -1, false)))};
          return (opal$a = (opal$d = data).opal$map, opal$a._p = (TMP_3 = function(line){var self = TMP_3._s || this;if (line == null) line = nil;
          if (line.opal$encoding()['opal$=='](utf8)) {
              return line.opal$rstrip()
              } else {
              return (line.opal$force_encoding(utf8)).opal$rstrip()
            }}, TMP_3._s = self, TMP_3), opal$a).call(opal$d);
          } else {
          if (leading_bytes['opal$=='](opal$scope.BOM_BYTES_UTF_8)) {
            data['opal$[]='](0, first_line['opal$[]'](opal$range(3, -1, false)))};
          return (opal$a = (opal$e = data).opal$map, opal$a._p = (TMP_4 = function(line){var self = TMP_4._s || this;if (line == null) line = nil;
          return line.opal$rstrip()}, TMP_4._s = self, TMP_4), opal$a).call(opal$e);
        };
      });

      opal$opal.defs(self, 'opal$normalize_lines_from_string', function(data) {
        var opal$a, opal$b, TMP_5, self = this, utf8 = nil, leading_bytes = nil, leading_2_bytes = nil;
        if ((opal$a = data['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return []};
        if ((opal$a = opal$scope.COERCE_ENCODING) !== false && opal$a !== nil) {
          utf8 = (((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_8;
          leading_bytes = data['opal$[]'](opal$range(0, 2, false)).opal$bytes().opal$to_a();
          if (((leading_2_bytes = leading_bytes['opal$[]'](opal$range(0, 1, false))))['opal$=='](opal$scope.BOM_BYTES_UTF_16LE)) {
            data = (data.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_16LE))['opal$[]'](opal$range(1, -1, false)).opal$encode(utf8)
          } else if (leading_2_bytes['opal$=='](opal$scope.BOM_BYTES_UTF_16BE)) {
            data = (data.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_16BE))['opal$[]'](opal$range(1, -1, false)).opal$encode(utf8)
          } else if (leading_bytes['opal$[]'](opal$range(0, 2, false))['opal$=='](opal$scope.BOM_BYTES_UTF_8)) {
            data = (function() {if (data.opal$encoding()['opal$=='](utf8)) {
              return data['opal$[]'](opal$range(1, -1, false))
              } else {
              return (data.opal$force_encoding(utf8))['opal$[]'](opal$range(1, -1, false))
            }; return nil; })()
          } else if ((opal$a = data.opal$encoding()['opal$=='](utf8)) === false || opal$a === nil) {
            data = data.opal$force_encoding(utf8)};
        } else if (data['opal$[]'](opal$range(0, 2, false)).opal$bytes().opal$to_a()['opal$=='](opal$scope.BOM_BYTES_UTF_8)) {
          data = data['opal$[]'](opal$range(3, -1, false))};
        return (opal$a = (opal$b = data.opal$each_line()).opal$map, opal$a._p = (TMP_5 = function(line){var self = TMP_5._s || this;if (line == null) line = nil;
        return line.opal$rstrip()}, TMP_5._s = self, TMP_5), opal$a).call(opal$b);
      });

      opal$opal.cdecl(opal$scope, 'REGEXP_ENCODE_URI_CHARS', /[^\w\-.!~*';:@=+opal$,()\[\]]/);

      opal$opal.defs(self, 'opal$encode_uri', function(str) {
        var opal$a, opal$b, TMP_6, self = this;
        return (opal$a = (opal$b = str).opal$gsub, opal$a._p = (TMP_6 = function(){var self = TMP_6._s || this, opal$a, opal$b, TMP_7;
        return (opal$a = (opal$b = opal$gvars["&"].opal$each_byte()).opal$map, opal$a._p = (TMP_7 = function(c){var self = TMP_7._s || this;if (c == null) c = nil;
          return self.opal$sprintf("%%%02X", c)}, TMP_7._s = self, TMP_7), opal$a).call(opal$b).opal$join()}, TMP_6._s = self, TMP_6), opal$a).call(opal$b, opal$scope.REGEXP_ENCODE_URI_CHARS);
      });

      opal$opal.defs(self, 'opal$rootname', function(file_name) {
        var opal$a, opal$b, self = this, ext = nil;
        if ((opal$a = ((ext = ((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b).opal$extname(file_name)))['opal$empty?']()) !== false && opal$a !== nil) {
          return file_name
          } else {
          return file_name['opal$[]'](opal$range(0, ext.opal$length()['opal$-@'](), true))
        };
      });

      opal$opal.defs(self, 'opal$mkdir_p', function(dir) {
        var opal$a, opal$b, opal$c, opal$d, self = this, parent_dir = nil;
        if ((opal$a = ((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b)['opal$directory?'](dir)) !== false && opal$a !== nil) {
          return nil
          } else {
          parent_dir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(dir);
          if ((opal$a = (opal$b = (opal$c = ((opal$d = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$d)['opal$directory?'](parent_dir = ((opal$d = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$d).opal$dirname(dir)), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$c = parent_dir['opal$==']("."), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
            self.opal$mkdir_p(parent_dir)};
          return ((opal$a = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$a).opal$mkdir(dir);
        };
      });
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$hash2 = opal$opal.hash2, opal$gvars = opal$opal.gvars, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base) {
      var self = opal$module(opal$base, 'Substitutors');

      var def = self._proto, opal$scope = self._scope, opal$a;
      opal$opal.cdecl(opal$scope, 'SPECIAL_CHARS', opal$hash2(["&", "<", ">"], {"&": "&amp;", "<": "&lt;", ">": "&gt;"}));

      opal$opal.cdecl(opal$scope, 'SPECIAL_CHARS_PATTERN', (new RegExp("[" + opal$scope.SPECIAL_CHARS.opal$keys().opal$join() + "]")));

      opal$opal.cdecl(opal$scope, 'SUBS', opal$hash2(["basic", "normal", "verbatim", "title", "header", "pass"], {"basic": ["specialcharacters"], "normal": ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"], "verbatim": ["specialcharacters", "callouts"], "title": ["specialcharacters", "quotes", "replacements", "macros", "attributes", "post_replacements"], "header": ["specialcharacters", "attributes"], "pass": []}));

      opal$opal.cdecl(opal$scope, 'COMPOSITE_SUBS', opal$hash2(["none", "normal", "verbatim", "specialchars"], {"none": [], "normal": opal$scope.SUBS['opal$[]']("normal"), "verbatim": opal$scope.SUBS['opal$[]']("verbatim"), "specialchars": ["specialcharacters"]}));

      opal$opal.cdecl(opal$scope, 'SUB_SYMBOLS', opal$hash2(["a", "m", "n", "p", "q", "r", "c", "v"], {"a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim"}));

      opal$opal.cdecl(opal$scope, 'SUB_OPTIONS', opal$hash2(["block", "inline"], {"block": opal$scope.COMPOSITE_SUBS.opal$keys()['opal$+'](opal$scope.SUBS['opal$[]']("normal"))['opal$+'](["callouts"]), "inline": opal$scope.COMPOSITE_SUBS.opal$keys()['opal$+'](opal$scope.SUBS['opal$[]']("normal"))}));

      opal$opal.cdecl(opal$scope, 'PASS_START', (function() {if (((opal$a = opal$opal.Object._scope.RUBY_ENGINE) == null ? opal$opal.cm('RUBY_ENGINE') : opal$a)['opal$==']("opal")) {
        return (150).opal$chr()
        } else {
        return "u0096"
      }; return nil; })());

      opal$opal.cdecl(opal$scope, 'PASS_END', (function() {if (((opal$a = opal$opal.Object._scope.RUBY_ENGINE) == null ? opal$opal.cm('RUBY_ENGINE') : opal$a)['opal$==']("opal")) {
        return (151).opal$chr()
        } else {
        return "u0097"
      }; return nil; })());

      opal$opal.cdecl(opal$scope, 'PASS_MATCH', /\u0096(\d+)\u0097/);

      opal$opal.cdecl(opal$scope, 'PASS_MATCH_HI', /<span[^>]*>\u0096<\/span>[^\d]*(\d+)[^\d]*<span[^>]*>\u0097<\/span>/);

      self.opal$attr_reader("passthroughs");

      def.opal$apply_subs = function(source, subs, expand) {
        var opal$a, opal$b, TMP_1, opal$c, TMP_2, self = this, effective_subs = nil, text = nil, multiline = nil, has_passthroughs = nil;
        if (subs == null) {
          subs = "normal"
        }
        if (expand == null) {
          expand = false
        }
        if ((opal$a = (opal$b = subs, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return source
        } else if (subs['opal$==']("normal")) {
          subs = opal$scope.SUBS['opal$[]']("normal")
        } else if (expand !== false && expand !== nil) {
          if ((opal$a = subs['opal$is_a?'](((opal$b = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$b))) !== false && opal$a !== nil) {
            subs = (((opal$a = opal$scope.COMPOSITE_SUBS['opal$[]'](subs)) !== false && opal$a !== nil) ? opal$a : [subs])
            } else {
            effective_subs = [];
            (opal$a = (opal$b = subs).opal$each, opal$a._p = (TMP_1 = function(key){var self = TMP_1._s || this, opal$a;if (key == null) key = nil;
            if ((opal$a = opal$scope.COMPOSITE_SUBS['opal$has_key?'](key)) !== false && opal$a !== nil) {
                return effective_subs = effective_subs['opal$+'](opal$scope.COMPOSITE_SUBS['opal$[]'](key))
                } else {
                return effective_subs['opal$<<'](key)
              }}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
            subs = effective_subs;
          }};
        if ((opal$a = subs['opal$empty?']()) !== false && opal$a !== nil) {
          return source};
        text = (function() {if ((opal$a = (multiline = source['opal$is_a?'](((opal$c = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$c)))) !== false && opal$a !== nil) {
          return (source['opal$*'](opal$scope.EOL))
          } else {
          return source
        }; return nil; })();
        if ((opal$a = (has_passthroughs = subs['opal$include?']("macros"))) !== false && opal$a !== nil) {
          text = self.opal$extract_passthroughs(text)};
        (opal$a = (opal$c = subs).opal$each, opal$a._p = (TMP_2 = function(type){var self = TMP_2._s || this, opal$a, opal$case = nil;if (type == null) type = nil;
        return (function() {opal$case = type;if ("specialcharacters"['opal$==='](opal$case)) {return text = self.opal$sub_specialcharacters(text)}else if ("quotes"['opal$==='](opal$case)) {return text = self.opal$sub_quotes(text)}else if ("attributes"['opal$==='](opal$case)) {return text = self.opal$sub_attributes(text.opal$split(opal$scope.EOL))['opal$*'](opal$scope.EOL)}else if ("replacements"['opal$==='](opal$case)) {return text = self.opal$sub_replacements(text)}else if ("macros"['opal$==='](opal$case)) {return text = self.opal$sub_macros(text)}else if ("highlight"['opal$==='](opal$case)) {return text = self.opal$highlight_source(text, (subs['opal$include?']("callouts")))}else if ("callouts"['opal$==='](opal$case)) {if ((opal$a = subs['opal$include?']("highlight")) !== false && opal$a !== nil) {
            return nil
            } else {
            return text = self.opal$sub_callouts(text)
          }}else if ("post_replacements"['opal$==='](opal$case)) {return text = self.opal$sub_post_replacements(text)}else {return self.opal$warn("asciidoctor: WARNING: unknown substitution type " + (type))}})()}, TMP_2._s = self, TMP_2), opal$a).call(opal$c);
        if (has_passthroughs !== false && has_passthroughs !== nil) {
          text = self.opal$restore_passthroughs(text)};
        if (multiline !== false && multiline !== nil) {
          return (text.opal$split(opal$scope.EOL))
          } else {
          return text
        };
      };

      def.opal$apply_normal_subs = function(lines) {
        var opal$a, opal$b, self = this;
        return self.opal$apply_subs((function() {if ((opal$a = lines['opal$is_a?'](((opal$b = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$b))) !== false && opal$a !== nil) {
          return (lines['opal$*'](opal$scope.EOL))
          } else {
          return lines
        }; return nil; })());
      };

      def.opal$apply_title_subs = function(title) {
        var self = this;
        return self.opal$apply_subs(title, opal$scope.SUBS['opal$[]']("title"));
      };

      def.opal$apply_header_subs = function(text) {
        var self = this;
        return self.opal$apply_subs(text, opal$scope.SUBS['opal$[]']("header"));
      };

      def.opal$extract_passthroughs = function(text) {
        var opal$a, opal$b, opal$c, TMP_3, TMP_4, opal$d, TMP_5, self = this;
        if ((opal$a = (((opal$b = (((opal$c = (text['opal$include?']("++"))) !== false && opal$c !== nil) ? opal$c : (text['opal$include?']("opal$opal$")))) !== false && opal$b !== nil) ? opal$b : (text['opal$include?']("ss:")))) !== false && opal$a !== nil) {
          text = (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_3 = function(){var self = TMP_3._s || this, opal$a, m = nil, subs = nil, index = nil;
            if (self.passthroughs == null) self.passthroughs = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            if ((opal$a = m['opal$[]'](4)) !== false && opal$a !== nil) {
              text = self.opal$unescape_brackets(m['opal$[]'](4));
              if ((opal$a = m['opal$[]'](3)['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
                subs = []
                } else {
                subs = self.opal$resolve_pass_subs(m['opal$[]'](3))
              };
              } else {
              text = m['opal$[]'](2);
              subs = ((function() {if (m['opal$[]'](1)['opal$==']("opal$opal$")) {
                return ["specialcharacters"]
                } else {
                return []
              }; return nil; })());
            };
            self.passthroughs['opal$<<'](opal$hash2(["text", "subs"], {"text": text, "subs": subs}));
            index = self.passthroughs.opal$size()['opal$-'](1);
            return "" + (opal$scope.PASS_START) + (index) + (opal$scope.PASS_END);}, TMP_3._s = self, TMP_3), opal$a).call(opal$b, opal$scope.PassInlineMacroRx)};
        if ((opal$a = (text['opal$include?']("`"))) !== false && opal$a !== nil) {
          text = (opal$a = (opal$c = text).opal$gsub, opal$a._p = (TMP_4 = function(){var self = TMP_4._s || this, opal$a, opal$b, opal$c, m = nil, unescaped_attrs = nil, attributes = nil, index = nil;
            if (self.passthroughs == null) self.passthroughs = nil;

          m = opal$gvars["~"];
            unescaped_attrs = nil;
            if ((opal$a = m['opal$[]'](3)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return (function() {if ((opal$a = m['opal$[]'](2)) !== false && opal$a !== nil) {
                return "" + (m['opal$[]'](1)) + "[" + (m['opal$[]'](2)) + "]" + (m['opal$[]'](3)['opal$[]'](opal$range(1, -1, false)))
                } else {
                return "" + (m['opal$[]'](1)) + (m['opal$[]'](3)['opal$[]'](opal$range(1, -1, false)))
              }; return nil; })();
            } else if ((opal$a = ((opal$b = m['opal$[]'](1)['opal$==']("\\")) ? m['opal$[]'](2) : opal$b)) !== false && opal$a !== nil) {
              unescaped_attrs = "[" + (m['opal$[]'](2)) + "]"};
            if ((opal$a = (opal$b = (opal$c = unescaped_attrs, (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?m['opal$[]'](2) : opal$b)) !== false && opal$a !== nil) {
              attributes = self.opal$parse_attributes(m['opal$[]'](2))
              } else {
              attributes = nil
            };
            self.passthroughs['opal$<<'](opal$hash2(["text", "subs", "attributes", "type"], {"text": m['opal$[]'](4), "subs": ["specialcharacters"], "attributes": attributes, "type": "monospaced"}));
            index = self.passthroughs.opal$size()['opal$-'](1);
            return "" + ((((opal$a = unescaped_attrs) !== false && opal$a !== nil) ? opal$a : m['opal$[]'](1))) + (opal$scope.PASS_START) + (index) + (opal$scope.PASS_END);}, TMP_4._s = self, TMP_4), opal$a).call(opal$c, opal$scope.PassInlineLiteralRx)};
        if ((opal$a = (text['opal$include?']("math:"))) !== false && opal$a !== nil) {
          text = (opal$a = (opal$d = text).opal$gsub, opal$a._p = (TMP_5 = function(){var self = TMP_5._s || this, opal$a, m = nil, type = nil, default_type = nil, subs = nil, index = nil;
            if (self.document == null) self.document = nil;
            if (self.passthroughs == null) self.passthroughs = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            type = m['opal$[]'](1).opal$to_sym();
            if (type['opal$==']("math")) {
              type = ((function() {if ((opal$a = ((default_type = self.opal$document().opal$attributes()['opal$[]']("math")))['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
                return "asciimath"
                } else {
                return default_type
              }; return nil; })()).opal$to_sym()};
            text = self.opal$unescape_brackets(m['opal$[]'](3));
            if ((opal$a = m['opal$[]'](2)['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
              subs = (function() {if ((opal$a = (self.document['opal$basebackend?']("html"))) !== false && opal$a !== nil) {
                return ["specialcharacters"]
                } else {
                return []
              }; return nil; })()
              } else {
              subs = self.opal$resolve_pass_subs(m['opal$[]'](2))
            };
            self.passthroughs['opal$<<'](opal$hash2(["text", "subs", "type"], {"text": text, "subs": subs, "type": type}));
            index = self.passthroughs.opal$size()['opal$-'](1);
            return "" + (opal$scope.PASS_START) + (index) + (opal$scope.PASS_END);}, TMP_5._s = self, TMP_5), opal$a).call(opal$d, opal$scope.MathInlineMacroRx)};
        return text;
      };

      def.opal$restore_passthroughs = function(text) {
        var opal$a, opal$b, opal$c, TMP_6, self = this;
        if (self.passthroughs == null) self.passthroughs = nil;

        if ((opal$a = (((opal$b = self.passthroughs['opal$nil_or_empty?']()) !== false && opal$b !== nil) ? opal$b : (opal$c = text['opal$include?'](opal$scope.PASS_START), (opal$c === nil || opal$c === false)))) !== false && opal$a !== nil) {
          return text};
        return (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_6 = function(){var self = TMP_6._s || this, opal$a, pass = nil, subbed_text = nil, subs = nil, type = nil;
          if (self.passthroughs == null) self.passthroughs = nil;

        pass = self.passthroughs['opal$[]'](opal$gvars["~"]['opal$[]'](1).opal$to_i());
          subbed_text = (function() {if ((opal$a = (subs = pass['opal$[]']("subs"))) !== false && opal$a !== nil) {
            return (self.opal$apply_subs(pass['opal$[]']("text"), subs))
            } else {
            return pass['opal$[]']("text")
          }; return nil; })();
          if ((opal$a = (type = pass['opal$[]']("type"))) !== false && opal$a !== nil) {
            return opal$scope.Inline.opal$new(self, "quoted", subbed_text, opal$hash2(["type", "attributes"], {"type": type, "attributes": pass['opal$[]']("attributes")})).opal$convert()
            } else {
            return subbed_text
          };}, TMP_6._s = self, TMP_6), opal$a).call(opal$b, opal$scope.PASS_MATCH);
      };

      def.opal$sub_specialcharacters = function(text) {
        var opal$a, opal$b, TMP_7, self = this;
        if ((opal$a = opal$scope.SUPPORTS_GSUB_RESULT_HASH) !== false && opal$a !== nil) {
          return text.opal$gsub(opal$scope.SPECIAL_CHARS_PATTERN, opal$scope.SPECIAL_CHARS)
          } else {
          return (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_7 = function(){var self = TMP_7._s || this;
          return opal$scope.SPECIAL_CHARS['opal$[]'](opal$gvars["&"])}, TMP_7._s = self, TMP_7), opal$a).call(opal$b, opal$scope.SPECIAL_CHARS_PATTERN)
        };
      };

      opal$opal.defn(self, 'opal$sub_specialchars', def.opal$sub_specialcharacters);

      def.opal$sub_quotes = function(text) {
        var opal$a, opal$b, TMP_8, opal$c, TMP_10, self = this, result = nil;
        if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
          result = text;
          (opal$a = (opal$b = opal$scope.QUOTE_SUBS).opal$each, opal$a._p = (TMP_8 = function(type, scope, pattern){var self = TMP_8._s || this, opal$a, opal$b, TMP_9;if (type == null) type = nil;if (scope == null) scope = nil;if (pattern == null) pattern = nil;
          return result = (opal$a = (opal$b = result).opal$gsub, opal$a._p = (TMP_9 = function(){var self = TMP_9._s || this;
            return self.opal$convert_quoted_text(opal$gvars["~"], type, scope)}, TMP_9._s = self, TMP_9), opal$a).call(opal$b, pattern)}, TMP_8._s = self, TMP_8), opal$a).call(opal$b);
          } else {
          result = "" + (text);
          (opal$a = (opal$c = opal$scope.QUOTE_SUBS).opal$each, opal$a._p = (TMP_10 = function(type, scope, pattern){var self = TMP_10._s || this, opal$a, opal$b, TMP_11;if (type == null) type = nil;if (scope == null) scope = nil;if (pattern == null) pattern = nil;
          return (opal$a = (opal$b = result)['opal$gsub!'], opal$a._p = (TMP_11 = function(){var self = TMP_11._s || this;
            return self.opal$convert_quoted_text(opal$gvars["~"], type, scope)}, TMP_11._s = self, TMP_11), opal$a).call(opal$b, pattern)}, TMP_10._s = self, TMP_10), opal$a).call(opal$c);
        };
        return result;
      };

      def.opal$sub_replacements = function(text) {
        var opal$a, opal$b, TMP_12, opal$c, TMP_14, self = this, result = nil;
        if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
          result = text;
          (opal$a = (opal$b = opal$scope.REPLACEMENTS).opal$each, opal$a._p = (TMP_12 = function(pattern, replacement, restore){var self = TMP_12._s || this, opal$a, opal$b, TMP_13;if (pattern == null) pattern = nil;if (replacement == null) replacement = nil;if (restore == null) restore = nil;
          return result = (opal$a = (opal$b = result).opal$gsub, opal$a._p = (TMP_13 = function(){var self = TMP_13._s || this;
            return self.opal$do_replacement(opal$gvars["~"], replacement, restore)}, TMP_13._s = self, TMP_13), opal$a).call(opal$b, pattern)}, TMP_12._s = self, TMP_12), opal$a).call(opal$b);
          } else {
          result = "" + (text);
          (opal$a = (opal$c = opal$scope.REPLACEMENTS).opal$each, opal$a._p = (TMP_14 = function(pattern, replacement, restore){var self = TMP_14._s || this, opal$a, opal$b, TMP_15;if (pattern == null) pattern = nil;if (replacement == null) replacement = nil;if (restore == null) restore = nil;
          return (opal$a = (opal$b = result)['opal$gsub!'], opal$a._p = (TMP_15 = function(){var self = TMP_15._s || this;
            return self.opal$do_replacement(opal$gvars["~"], replacement, restore)}, TMP_15._s = self, TMP_15), opal$a).call(opal$b, pattern)}, TMP_14._s = self, TMP_14), opal$a).call(opal$c);
        };
        return result;
      };

      def.opal$do_replacement = function(m, replacement, restore) {
        var opal$a, self = this, matched = nil, opal$case = nil;
        if ((opal$a = ((matched = m['opal$[]'](0)))['opal$include?']("\\")) !== false && opal$a !== nil) {
          return matched.opal$tr("\\", "")
          } else {
          return (function() {opal$case = restore;if ("none"['opal$==='](opal$case)) {return replacement}else if ("leading"['opal$==='](opal$case)) {return "" + (m['opal$[]'](1)) + (replacement)}else if ("bounding"['opal$==='](opal$case)) {return "" + (m['opal$[]'](1)) + (replacement) + (m['opal$[]'](2))}else { return nil }})()
        };
      };

      def.opal$sub_attributes = function(data, opts) {
        var opal$a, opal$b, TMP_16, self = this, string_data = nil, lines = nil, result = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = data['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return data};
        string_data = data['opal$is_a?'](((opal$a = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$a));
        lines = (function() {if (string_data !== false && string_data !== nil) {
          return [data]
          } else {
          return data
        }; return nil; })();
        result = [];
        (opal$a = (opal$b = lines).opal$each, opal$a._p = (TMP_16 = function(line){var self = TMP_16._s || this, opal$a, opal$b, TMP_17, opal$c, opal$d, reject = nil, reject_if_empty = nil;if (line == null) line = nil;
        reject = false;
          reject_if_empty = false;
          if ((opal$a = line['opal$include?']("{")) !== false && opal$a !== nil) {
            line = (opal$a = (opal$b = line).opal$gsub, opal$a._p = (TMP_17 = function(){var self = TMP_17._s || this, opal$a, opal$b, TMP_18, opal$c, TMP_19, m = nil, offset = nil, directive = nil, expr = nil, opal$case = nil, args = nil, _ = nil, value = nil, val = nil, key = nil;
              if (self.document == null) self.document = nil;

            m = opal$gvars["~"];
              if ((opal$a = (((opal$b = m['opal$[]'](1)['opal$==']("\\")) !== false && opal$b !== nil) ? opal$b : m['opal$[]'](4)['opal$==']("\\"))) !== false && opal$a !== nil) {
                return "{" + (m['opal$[]'](2)) + "}"
              } else if ((opal$a = (opal$b = m['opal$[]'](3)['opal$nil_or_empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                offset = ((directive = m['opal$[]'](3))).opal$length()['opal$+'](1);
                expr = m['opal$[]'](2)['opal$[]'](opal$range(offset, -1, false));
                return (function() {opal$case = directive;if ("set"['opal$==='](opal$case)) {args = expr.opal$split(":");
                opal$a = opal$opal.to_ary(opal$scope.Parser.opal$store_attribute(args['opal$[]'](0), (((opal$b = args['opal$[]'](1)) !== false && opal$b !== nil) ? opal$b : ""), self.document)), _ = (opal$a[0] == null ? nil : opal$a[0]), value = (opal$a[1] == null ? nil : opal$a[1]);
                if ((opal$a = value) === false || opal$a === nil) {
                  if (self.document.opal$attributes().opal$fetch("attribute-undefined", opal$scope.Compliance.opal$attribute_undefined())['opal$==']("drop-line")) {
                    (opal$a = (opal$b = opal$scope.Debug).opal$debug, opal$a._p = (TMP_18 = function(){var self = TMP_18._s || this;
                    return "Undefining attribute: " + (self.opal$key()) + ", line marked for removal"}, TMP_18._s = self, TMP_18), opal$a).call(opal$b);
                    reject = true;
                    return (opal$breaker.opal$v = "", opal$breaker);}};
                reject_if_empty = true;
                return "";}else if ("counter"['opal$==='](opal$case) || "counter2"['opal$==='](opal$case)) {args = expr.opal$split(":");
                val = self.document.opal$counter(args['opal$[]'](0), args['opal$[]'](1));
                if (directive['opal$==']("counter2")) {
                  reject_if_empty = true;
                  return "";
                  } else {
                  return val
                };}else {self.opal$warn("asciidoctor: WARNING: illegal attribute directive: " + (m['opal$[]'](3)));
                return m['opal$[]'](0);}})();
              } else if ((opal$a = (opal$c = (key = m['opal$[]'](2).opal$downcase()), opal$c !== false && opal$c !== nil ?(self.document.opal$attributes()['opal$has_key?'](key)) : opal$c)) !== false && opal$a !== nil) {
                return self.document.opal$attributes()['opal$[]'](key)
              } else if ((opal$a = opal$scope.INTRINSIC_ATTRIBUTES['opal$has_key?'](key)) !== false && opal$a !== nil) {
                return opal$scope.INTRINSIC_ATTRIBUTES['opal$[]'](key)
                } else {
                return (function() {opal$case = ((((opal$a = opts['opal$[]']("attribute_missing")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes().opal$fetch("attribute-missing", opal$scope.Compliance.opal$attribute_missing())));if ("skip"['opal$==='](opal$case)) {return m['opal$[]'](0)}else if ("drop-line"['opal$==='](opal$case)) {(opal$a = (opal$c = opal$scope.Debug).opal$debug, opal$a._p = (TMP_19 = function(){var self = TMP_19._s || this;
                return "Missing attribute: " + (key) + ", line marked for removal"}, TMP_19._s = self, TMP_19), opal$a).call(opal$c);
                reject = true;
                return (opal$breaker.opal$v = "", opal$breaker);}else {reject_if_empty = true;
                return "";}})()
              };}, TMP_17._s = self, TMP_17), opal$a).call(opal$b, opal$scope.AttributeReferenceRx)};
          if ((opal$a = (((opal$c = reject) !== false && opal$c !== nil) ? opal$c : (((opal$d = reject_if_empty !== false && reject_if_empty !== nil) ? line['opal$empty?']() : opal$d)))) !== false && opal$a !== nil) {
            return nil
            } else {
            return result['opal$<<'](line)
          };}, TMP_16._s = self, TMP_16), opal$a).call(opal$b);
        if (string_data !== false && string_data !== nil) {
          return (result['opal$*'](opal$scope.EOL))
          } else {
          return result
        };
      };

      def.opal$sub_macros = function(source) {
        var opal$a, opal$b, opal$c, TMP_20, TMP_22, opal$d, TMP_24, opal$e, TMP_26, opal$f, opal$g, TMP_28, TMP_29, opal$h, TMP_30, opal$i, opal$j, TMP_31, TMP_32, opal$k, TMP_33, self = this, found = nil, found_colon = nil, use_link_attrs = nil, experimental = nil, result = nil, extensions = nil;
        if (self.document == null) self.document = nil;

        if ((opal$a = source['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return source};
        found = opal$hash2([], {});
        found['opal$[]=']("square_bracket", source['opal$include?']("["));
        found['opal$[]=']("round_bracket", source['opal$include?']("("));
        found['opal$[]=']("colon", found_colon = source['opal$include?'](":"));
        found['opal$[]=']("macroish", ((opal$a = found['opal$[]']("square_bracket"), opal$a !== false && opal$a !== nil ?found_colon : opal$a)));
        found['opal$[]=']("macroish_short_form", ((opal$a = (opal$b = found['opal$[]']("square_bracket"), opal$b !== false && opal$b !== nil ?found_colon : opal$b), opal$a !== false && opal$a !== nil ?source['opal$include?'](":[") : opal$a)));
        use_link_attrs = self.document.opal$attributes()['opal$has_key?']("linkattrs");
        experimental = self.document.opal$attributes()['opal$has_key?']("experimental");
        result = "" + (source);
        if (experimental !== false && experimental !== nil) {
          if ((opal$a = (opal$b = found['opal$[]']("macroish_short_form"), opal$b !== false && opal$b !== nil ?((((opal$c = result['opal$include?']("kbd:")) !== false && opal$c !== nil) ? opal$c : result['opal$include?']("btn:"))) : opal$b)) !== false && opal$a !== nil) {
            result = (opal$a = (opal$b = result).opal$gsub, opal$a._p = (TMP_20 = function(){var self = TMP_20._s || this, opal$a, opal$b, TMP_21, m = nil, captured = nil, keys = nil, label = nil;
            m = opal$gvars["~"];
              if ((opal$a = ((captured = m['opal$[]'](0)))['opal$start_with?']("\\")) !== false && opal$a !== nil) {
                return captured['opal$[]'](opal$range(1, -1, false));};
              if ((opal$a = captured['opal$start_with?']("kbd")) !== false && opal$a !== nil) {
                keys = self.opal$unescape_bracketed_text(m['opal$[]'](1));
                if (keys['opal$==']("+")) {
                  keys = ["+"]
                  } else {
                  keys = (opal$a = (opal$b = keys.opal$split(opal$scope.KbdDelimiterRx)).opal$inject, opal$a._p = (TMP_21 = function(c, key){var self = TMP_21._s || this, opal$a;if (c == null) c = nil;if (key == null) key = nil;
                  if ((opal$a = key['opal$end_with?']("++")) !== false && opal$a !== nil) {
                      c['opal$<<'](key['opal$[]'](opal$range(0, -3, false)).opal$strip());
                      c['opal$<<']("+");
                      } else {
                      c['opal$<<'](key.opal$strip())
                    };
                    return c;}, TMP_21._s = self, TMP_21), opal$a).call(opal$b, [])
                };
                return opal$scope.Inline.opal$new(self, "kbd", nil, opal$hash2(["attributes"], {"attributes": opal$hash2(["keys"], {"keys": keys})})).opal$convert();
              } else if ((opal$a = captured['opal$start_with?']("btn")) !== false && opal$a !== nil) {
                label = self.opal$unescape_bracketed_text(m['opal$[]'](1));
                return opal$scope.Inline.opal$new(self, "button", label).opal$convert();
                } else {
                return nil
              };}, TMP_20._s = self, TMP_20), opal$a).call(opal$b, opal$scope.KbdBtnInlineMacroRx)};
          if ((opal$a = (opal$c = found['opal$[]']("macroish"), opal$c !== false && opal$c !== nil ?result['opal$include?']("menu:") : opal$c)) !== false && opal$a !== nil) {
            result = (opal$a = (opal$c = result).opal$gsub, opal$a._p = (TMP_22 = function(){var self = TMP_22._s || this, opal$a, opal$b, TMP_23, m = nil, captured = nil, menu = nil, items = nil, submenus = nil, menuitem = nil, delim = nil;
            m = opal$gvars["~"];
              if ((opal$a = ((captured = m['opal$[]'](0)))['opal$start_with?']("\\")) !== false && opal$a !== nil) {
                return captured['opal$[]'](opal$range(1, -1, false));};
              menu = m['opal$[]'](1);
              items = m['opal$[]'](2);
              if ((opal$a = (opal$b = items, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                submenus = [];
                menuitem = nil;
              } else if ((opal$a = (delim = (function() {if ((opal$b = items['opal$include?']("&gt;")) !== false && opal$b !== nil) {
                return "&gt;"
                } else {
                return ((function() {if ((opal$b = items['opal$include?'](",")) !== false && opal$b !== nil) {
                  return ","
                  } else {
                  return nil
                }; return nil; })())
              }; return nil; })())) !== false && opal$a !== nil) {
                submenus = (opal$a = (opal$b = items.opal$split(delim)).opal$map, opal$a._p = (TMP_23 = function(it){var self = TMP_23._s || this;if (it == null) it = nil;
                return it.opal$strip()}, TMP_23._s = self, TMP_23), opal$a).call(opal$b);
                menuitem = submenus.opal$pop();
                } else {
                submenus = [];
                menuitem = items.opal$rstrip();
              };
              return opal$scope.Inline.opal$new(self, "menu", nil, opal$hash2(["attributes"], {"attributes": opal$hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).opal$convert();}, TMP_22._s = self, TMP_22), opal$a).call(opal$c, opal$scope.MenuInlineMacroRx)};
          if ((opal$a = (opal$d = result['opal$include?']("\""), opal$d !== false && opal$d !== nil ?result['opal$include?']("&gt;") : opal$d)) !== false && opal$a !== nil) {
            result = (opal$a = (opal$d = result).opal$gsub, opal$a._p = (TMP_24 = function(){var self = TMP_24._s || this, opal$a, opal$b, opal$c, TMP_25, m = nil, captured = nil, input = nil, menu = nil, submenus = nil, menuitem = nil;
            m = opal$gvars["~"];
              if ((opal$a = ((captured = m['opal$[]'](0)))['opal$start_with?']("\\")) !== false && opal$a !== nil) {
                return captured['opal$[]'](opal$range(1, -1, false));};
              input = m['opal$[]'](1);
              opal$a = opal$opal.to_ary((opal$b = (opal$c = input.opal$split("&gt;")).opal$map, opal$b._p = (TMP_25 = function(it){var self = TMP_25._s || this;if (it == null) it = nil;
              return it.opal$strip()}, TMP_25._s = self, TMP_25), opal$b).call(opal$c)), menu = (opal$a[0] == null ? nil : opal$a[0]), submenus = opal$slice.call(opal$a, 1);
              menuitem = submenus.opal$pop();
              return opal$scope.Inline.opal$new(self, "menu", nil, opal$hash2(["attributes"], {"attributes": opal$hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).opal$convert();}, TMP_24._s = self, TMP_24), opal$a).call(opal$d, opal$scope.MenuInlineRx)};};
        if ((opal$a = (opal$e = (extensions = self.document.opal$extensions()), opal$e !== false && opal$e !== nil ?extensions['opal$inline_macros?']() : opal$e)) !== false && opal$a !== nil) {
          (opal$a = (opal$e = extensions.opal$inline_macros()).opal$each, opal$a._p = (TMP_26 = function(extension){var self = TMP_26._s || this, opal$a, opal$b, TMP_27;if (extension == null) extension = nil;
          return result = (opal$a = (opal$b = result).opal$gsub, opal$a._p = (TMP_27 = function(){var self = TMP_27._s || this, opal$a, m = nil, target = nil, attributes = nil;
            m = opal$gvars["~"];
              if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
                return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
              target = m['opal$[]'](1);
              attributes = (function() {if (extension.opal$config()['opal$[]']("format")['opal$==']("short")) {
                return opal$hash2([], {})
              } else if (extension.opal$config()['opal$[]']("content_model")['opal$==']("attributes")) {
                return self.opal$parse_attributes(m['opal$[]'](2), ((((opal$a = extension.opal$config()['opal$[]']("pos_attrs")) !== false && opal$a !== nil) ? opal$a : [])), opal$hash2(["sub_input", "unescape_input"], {"sub_input": true, "unescape_input": true}))
                } else {
                return opal$hash2(["text"], {"text": (self.opal$unescape_bracketed_text(m['opal$[]'](2)))})
              }; return nil; })();
              return extension.opal$process_method()['opal$[]'](self, target, attributes);}, TMP_27._s = self, TMP_27), opal$a).call(opal$b, extension.opal$config()['opal$[]']("regexp"))}, TMP_26._s = self, TMP_26), opal$a).call(opal$e)};
        if ((opal$a = (opal$f = found['opal$[]']("macroish"), opal$f !== false && opal$f !== nil ?((((opal$g = result['opal$include?']("image:")) !== false && opal$g !== nil) ? opal$g : result['opal$include?']("icon:"))) : opal$f)) !== false && opal$a !== nil) {
          result = (opal$a = (opal$f = result).opal$gsub, opal$a._p = (TMP_28 = function(){var self = TMP_28._s || this, opal$a, opal$b, opal$c, m = nil, raw_attrs = nil, type = nil, posattrs = nil, target = nil, attrs = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            raw_attrs = self.opal$unescape_bracketed_text(m['opal$[]'](2));
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("icon:")) !== false && opal$a !== nil) {
              type = "icon";
              posattrs = ["size"];
              } else {
              type = "image";
              posattrs = ["alt", "width", "height"];
            };
            target = self.opal$sub_attributes(m['opal$[]'](1));
            if ((opal$a = type['opal$==']("icon")) === false || opal$a === nil) {
              self.document.opal$register("images", target)};
            attrs = self.opal$parse_attributes(raw_attrs, posattrs);
            (opal$a = "alt", opal$b = attrs, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, opal$scope.File.opal$basename(target, opal$scope.File.opal$extname(target)))));
            return opal$scope.Inline.opal$new(self, "image", nil, opal$hash2(["type", "target", "attributes"], {"type": type, "target": target, "attributes": attrs})).opal$convert();}, TMP_28._s = self, TMP_28), opal$a).call(opal$f, opal$scope.ImageInlineMacroRx)};
        if ((opal$a = (((opal$g = found['opal$[]']("macroish_short_form")) !== false && opal$g !== nil) ? opal$g : found['opal$[]']("round_bracket"))) !== false && opal$a !== nil) {
          result = (opal$a = (opal$g = result).opal$gsub, opal$a._p = (TMP_29 = function(){var self = TMP_29._s || this, opal$a, opal$b, m = nil, num_brackets = nil, text_in_brackets = nil, macro_name = nil, terms = nil, text = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            num_brackets = 0;
            text_in_brackets = nil;
            if ((opal$a = (macro_name = m['opal$[]'](1))) === false || opal$a === nil) {
              text_in_brackets = m['opal$[]'](3);
              if ((opal$a = (opal$b = (text_in_brackets['opal$start_with?']("(")), opal$b !== false && opal$b !== nil ?(text_in_brackets['opal$end_with?'](")")) : opal$b)) !== false && opal$a !== nil) {
                text_in_brackets = text_in_brackets['opal$[]'](opal$range(1, -1, true));
                num_brackets = 3;
                } else {
                num_brackets = 2
              };};
            if ((opal$a = (((opal$b = macro_name['opal$==']("indexterm")) !== false && opal$b !== nil) ? opal$b : num_brackets['opal$=='](3))) !== false && opal$a !== nil) {
              if ((opal$a = (opal$b = macro_name, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                terms = self.opal$split_simple_csv(self.opal$normalize_string(text_in_brackets))
                } else {
                terms = self.opal$split_simple_csv(self.opal$normalize_string(m['opal$[]'](2), true))
              };
              self.document.opal$register("indexterms", [].concat(terms));
              return opal$scope.Inline.opal$new(self, "indexterm", nil, opal$hash2(["attributes"], {"attributes": opal$hash2(["terms"], {"terms": terms})})).opal$convert();
              } else {
              if ((opal$a = (opal$b = macro_name, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                text = self.opal$normalize_string(text_in_brackets)
                } else {
                text = self.opal$normalize_string(m['opal$[]'](2), true)
              };
              self.document.opal$register("indexterms", [text]);
              return opal$scope.Inline.opal$new(self, "indexterm", text, opal$hash2(["type"], {"type": "visible"})).opal$convert();
            };}, TMP_29._s = self, TMP_29), opal$a).call(opal$g, opal$scope.IndextermInlineMacroRx)};
        if ((opal$a = ((opal$h = found_colon !== false && found_colon !== nil) ? (result['opal$include?']("://")) : opal$h)) !== false && opal$a !== nil) {
          result = (opal$a = (opal$h = result).opal$gsub, opal$a._p = (TMP_30 = function(){var self = TMP_30._s || this, opal$a, opal$b, opal$c, m = nil, prefix = nil, target = nil, suffix = nil, opal$case = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](2)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return "" + (m['opal$[]'](1)) + (m['opal$[]'](2)['opal$[]'](opal$range(1, -1, false))) + (m['opal$[]'](3));
            } else if ((opal$a = ((opal$b = m['opal$[]'](1)['opal$==']("link:")) ? (opal$c = m['opal$[]'](3), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
              return m['opal$[]'](0);};
            prefix = ((function() {if ((opal$a = (opal$b = m['opal$[]'](1)['opal$==']("link:"), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              return m['opal$[]'](1)
              } else {
              return ""
            }; return nil; })());
            target = m['opal$[]'](2);
            suffix = "";
            if ((opal$a = (((opal$b = m['opal$[]'](3)) !== false && opal$b !== nil) ? opal$b : (opal$c = target['opal$=~'](opal$scope.UriTerminator), (opal$c === nil || opal$c === false)))) === false || opal$a === nil) {
              opal$case = opal$gvars["~"]['opal$[]'](0);if (")"['opal$==='](opal$case)) {target = target['opal$[]'](opal$range(0, -2, false));
              suffix = ")";}else if (";"['opal$==='](opal$case)) {if ((opal$a = (opal$b = prefix['opal$start_with?']("&lt;"), opal$b !== false && opal$b !== nil ?target['opal$end_with?']("&gt;") : opal$b)) !== false && opal$a !== nil) {
                prefix = prefix['opal$[]'](opal$range(4, -1, false));
                target = target['opal$[]'](opal$range(0, -5, false));
              } else if ((opal$a = target['opal$end_with?'](");")) !== false && opal$a !== nil) {
                target = target['opal$[]'](opal$range(0, -3, false));
                suffix = ");";
                } else {
                target = target['opal$[]'](opal$range(0, -2, false));
                suffix = ";";
              }}else if (":"['opal$==='](opal$case)) {if ((opal$a = target['opal$end_with?']("):")) !== false && opal$a !== nil) {
                target = target['opal$[]'](opal$range(0, -3, false));
                suffix = "):";
                } else {
                target = target['opal$[]'](opal$range(0, -2, false));
                suffix = ":";
              }}};
            self.document.opal$register("links", target);
            attrs = nil;
            if ((opal$a = (opal$b = m['opal$[]'](3)['opal$nil_or_empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              if ((opal$a = ((opal$b = use_link_attrs !== false && use_link_attrs !== nil) ? ((((opal$c = m['opal$[]'](3)['opal$start_with?']("\"")) !== false && opal$c !== nil) ? opal$c : m['opal$[]'](3)['opal$include?'](","))) : opal$b)) !== false && opal$a !== nil) {
                attrs = self.opal$parse_attributes(self.opal$sub_attributes(m['opal$[]'](3).opal$gsub("]", "]")), []);
                text = attrs['opal$[]'](1);
                } else {
                text = self.opal$sub_attributes(m['opal$[]'](3).opal$gsub("]", "]"))
              };
              if ((opal$a = text['opal$end_with?']("^")) !== false && opal$a !== nil) {
                text = text.opal$chop();
                (((opal$a = attrs) !== false && opal$a !== nil) ? opal$a : attrs = opal$hash2([], {}));
                if ((opal$a = attrs['opal$has_key?']("window")) === false || opal$a === nil) {
                  attrs['opal$[]=']("window", "_blank")};};
              } else {
              text = ""
            };
            if ((opal$a = text['opal$empty?']()) !== false && opal$a !== nil) {
              if ((opal$a = self.document['opal$attr?']("hide-uri-scheme")) !== false && opal$a !== nil) {
                text = target.opal$sub(opal$scope.UriSniffRx, "")
                } else {
                text = target
              }};
            return "" + (prefix) + (opal$scope.Inline.opal$new(self, "anchor", text, opal$hash2(["type", "target", "attributes"], {"type": "link", "target": target, "attributes": attrs})).opal$convert()) + (suffix);}, TMP_30._s = self, TMP_30), opal$a).call(opal$h, opal$scope.LinkInlineRx)};
        if ((opal$a = (((opal$i = (opal$j = found['opal$[]']("macroish"), opal$j !== false && opal$j !== nil ?(result['opal$include?']("link:")) : opal$j)) !== false && opal$i !== nil) ? opal$i : (result['opal$include?']("mailto:")))) !== false && opal$a !== nil) {
          result = (opal$a = (opal$i = result).opal$gsub, opal$a._p = (TMP_31 = function(){var self = TMP_31._s || this, opal$a, opal$b, opal$c, m = nil, raw_target = nil, mailto = nil, target = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            raw_target = m['opal$[]'](1);
            mailto = m['opal$[]'](0)['opal$start_with?']("mailto:");
            target = (function() {if (mailto !== false && mailto !== nil) {
              return "mailto:" + (raw_target)
              } else {
              return raw_target
            }; return nil; })();
            attrs = nil;
            if ((opal$a = ((opal$b = use_link_attrs !== false && use_link_attrs !== nil) ? ((((opal$c = m['opal$[]'](2)['opal$start_with?']("\"")) !== false && opal$c !== nil) ? opal$c : m['opal$[]'](2)['opal$include?'](","))) : opal$b)) !== false && opal$a !== nil) {
              attrs = self.opal$parse_attributes(self.opal$sub_attributes(m['opal$[]'](2).opal$gsub("]", "]")), []);
              text = attrs['opal$[]'](1);
              if (mailto !== false && mailto !== nil) {
                if ((opal$a = attrs['opal$has_key?'](2)) !== false && opal$a !== nil) {
                  target = "" + (target) + "?subject=" + (opal$scope.Helpers.opal$encode_uri(attrs['opal$[]'](2)));
                  if ((opal$a = attrs['opal$has_key?'](3)) !== false && opal$a !== nil) {
                    target = "" + (target) + "&amp;body=" + (opal$scope.Helpers.opal$encode_uri(attrs['opal$[]'](3)))};}};
              } else {
              text = self.opal$sub_attributes(m['opal$[]'](2).opal$gsub("]", "]"))
            };
            if ((opal$a = text['opal$end_with?']("^")) !== false && opal$a !== nil) {
              text = text.opal$chop();
              (((opal$a = attrs) !== false && opal$a !== nil) ? opal$a : attrs = opal$hash2([], {}));
              if ((opal$a = attrs['opal$has_key?']("window")) === false || opal$a === nil) {
                attrs['opal$[]=']("window", "_blank")};};
            self.document.opal$register("links", target);
            if ((opal$a = text['opal$empty?']()) !== false && opal$a !== nil) {
              if ((opal$a = self.document['opal$attr?']("hide-uri-scheme")) !== false && opal$a !== nil) {
                text = raw_target.opal$sub(opal$scope.UriSniffRx, "")
                } else {
                text = raw_target
              }};
            return opal$scope.Inline.opal$new(self, "anchor", text, opal$hash2(["type", "target", "attributes"], {"type": "link", "target": target, "attributes": attrs})).opal$convert();}, TMP_31._s = self, TMP_31), opal$a).call(opal$i, opal$scope.LinkInlineMacroRx)};
        if ((opal$a = result['opal$include?']("@")) !== false && opal$a !== nil) {
          result = (opal$a = (opal$j = result).opal$gsub, opal$a._p = (TMP_32 = function(){var self = TMP_32._s || this, opal$a, m = nil, address = nil, lead = nil, opal$case = nil, target = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            address = m['opal$[]'](0);
            if ((opal$a = (lead = m['opal$[]'](1))) !== false && opal$a !== nil) {
              opal$case = lead;if ("\\"['opal$==='](opal$case)) {return address['opal$[]'](opal$range(1, -1, false));}else {return address;}};
            target = "mailto:" + (address);
            self.document.opal$register("links", target);
            return opal$scope.Inline.opal$new(self, "anchor", address, opal$hash2(["type", "target"], {"type": "link", "target": target})).opal$convert();}, TMP_32._s = self, TMP_32), opal$a).call(opal$j, opal$scope.EmailInlineMacroRx)};
        if ((opal$a = (opal$k = found['opal$[]']("macroish_short_form"), opal$k !== false && opal$k !== nil ?result['opal$include?']("footnote") : opal$k)) !== false && opal$a !== nil) {
          result = (opal$a = (opal$k = result).opal$gsub, opal$a._p = (TMP_33 = function(){var self = TMP_33._s || this, opal$a, opal$b, opal$c, TMP_34, m = nil, id = nil, text = nil, index = nil, type = nil, target = nil, footnote = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            if (m['opal$[]'](1)['opal$==']("footnote")) {
              id = nil;
              text = self.opal$restore_passthroughs(self.opal$sub_inline_xrefs(self.opal$sub_inline_anchors(self.opal$normalize_string(m['opal$[]'](2), true))));
              index = self.document.opal$counter("footnote-number");
              self.document.opal$register("footnotes", (opal$scope.Document)._scope.Footnote.opal$new(index, id, text));
              type = nil;
              target = nil;
              } else {
              opal$a = opal$opal.to_ary(m['opal$[]'](2).opal$split(",", 2)), id = (opal$a[0] == null ? nil : opal$a[0]), text = (opal$a[1] == null ? nil : opal$a[1]);
              id = id.opal$strip();
              if (text !== false && text !== nil) {
                text = self.opal$restore_passthroughs(self.opal$sub_inline_xrefs(self.opal$sub_inline_anchors(self.opal$normalize_string(text, true))));
                index = self.document.opal$counter("footnote-number");
                self.document.opal$register("footnotes", (opal$scope.Document)._scope.Footnote.opal$new(index, id, text));
                type = "ref";
                target = nil;
                } else {
                if ((opal$a = (footnote = (opal$b = (opal$c = self.document.opal$references()['opal$[]']("footnotes")).opal$find, opal$b._p = (TMP_34 = function(fn){var self = TMP_34._s || this;if (fn == null) fn = nil;
                return fn.opal$id()['opal$=='](id)}, TMP_34._s = self, TMP_34), opal$b).call(opal$c))) !== false && opal$a !== nil) {
                  index = footnote.opal$index();
                  text = footnote.opal$text();
                  } else {
                  index = nil;
                  text = id;
                };
                target = id;
                id = nil;
                type = "xref";
              };
            };
            return opal$scope.Inline.opal$new(self, "footnote", text, opal$hash2(["attributes", "id", "target", "type"], {"attributes": opal$hash2(["index"], {"index": index}), "id": id, "target": target, "type": type})).opal$convert();}, TMP_33._s = self, TMP_33), opal$a).call(opal$k, opal$scope.FootnoteInlineMacroRx)};
        return self.opal$sub_inline_xrefs(self.opal$sub_inline_anchors(result, found), found);
      };

      def.opal$sub_inline_anchors = function(text, found) {
        var opal$a, opal$b, opal$c, opal$d, TMP_35, opal$e, opal$f, TMP_36, self = this;
        if (found == null) {
          found = nil
        }
        if ((opal$a = (opal$b = ((((opal$c = (opal$d = found, (opal$d === nil || opal$d === false))) !== false && opal$c !== nil) ? opal$c : found['opal$[]']("square_bracket"))), opal$b !== false && opal$b !== nil ?text['opal$include?']("[[[") : opal$b)) !== false && opal$a !== nil) {
          text = (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_35 = function(){var self = TMP_35._s || this, opal$a, m = nil, id = nil, reftext = nil;
          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            id = reftext = m['opal$[]'](1);
            return opal$scope.Inline.opal$new(self, "anchor", reftext, opal$hash2(["type", "target"], {"type": "bibref", "target": id})).opal$convert();}, TMP_35._s = self, TMP_35), opal$a).call(opal$b, opal$scope.InlineBiblioAnchorRx)};
        if ((opal$a = (((opal$c = ((opal$d = ((((opal$e = (opal$f = found, (opal$f === nil || opal$f === false))) !== false && opal$e !== nil) ? opal$e : found['opal$[]']("square_bracket"))), opal$d !== false && opal$d !== nil ?text['opal$include?']("[[") : opal$d))) !== false && opal$c !== nil) ? opal$c : ((opal$d = ((((opal$e = (opal$f = found, (opal$f === nil || opal$f === false))) !== false && opal$e !== nil) ? opal$e : found['opal$[]']("macroish"))), opal$d !== false && opal$d !== nil ?text['opal$include?']("anchor:") : opal$d)))) !== false && opal$a !== nil) {
          text = (opal$a = (opal$c = text).opal$gsub, opal$a._p = (TMP_36 = function(){var self = TMP_36._s || this, opal$a, opal$b, TMP_37, m = nil, id = nil, reftext = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            id = (((opal$a = m['opal$[]'](1)) !== false && opal$a !== nil) ? opal$a : m['opal$[]'](3));
            reftext = (((opal$a = m['opal$[]'](2)) !== false && opal$a !== nil) ? opal$a : m['opal$[]'](4));
            if ((opal$a = (opal$b = reftext, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              reftext = "[" + (id) + "]"};
            if ((opal$a = self.document.opal$references()['opal$[]']("ids")['opal$has_key?'](id)) === false || opal$a === nil) {
              (opal$a = (opal$b = opal$scope.Debug).opal$debug, opal$a._p = (TMP_37 = function(){var self = TMP_37._s || this;
              return "Missing reference for anchor " + (id)}, TMP_37._s = self, TMP_37), opal$a).call(opal$b)};
            return opal$scope.Inline.opal$new(self, "anchor", reftext, opal$hash2(["type", "target"], {"type": "ref", "target": id})).opal$convert();}, TMP_36._s = self, TMP_36), opal$a).call(opal$c, opal$scope.InlineAnchorRx)};
        return text;
      };

      def.opal$sub_inline_xrefs = function(text, found) {
        var opal$a, opal$b, opal$c, opal$d, TMP_38, self = this;
        if (found == null) {
          found = nil
        }
        if ((opal$a = (((opal$b = ((((opal$c = (opal$d = found, (opal$d === nil || opal$d === false))) !== false && opal$c !== nil) ? opal$c : found['opal$[]']("macroish")))) !== false && opal$b !== nil) ? opal$b : text['opal$include?']("&lt;&lt;"))) !== false && opal$a !== nil) {
          text = (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_38 = function(){var self = TMP_38._s || this, opal$a, opal$b, opal$c, opal$d, TMP_39, m = nil, id = nil, reftext = nil, path = nil, fragment = nil, refid = nil, target = nil;
            if (self.document == null) self.document = nil;

          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return m['opal$[]'](0)['opal$[]'](opal$range(1, -1, false));};
            if ((opal$a = (((opal$b = (opal$c = m['opal$[]'](1), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : ((opal$c = ((opal$d = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$d), opal$c !== false && opal$c !== nil ?m['opal$[]'](1).opal$to_s()['opal$==']("") : opal$c)))) !== false && opal$a !== nil) {
              id = m['opal$[]'](2);
              reftext = (function() {if ((opal$a = (opal$b = m['opal$[]'](3)['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                return m['opal$[]'](3)
                } else {
                return nil
              }; return nil; })();
              } else {
              opal$a = opal$opal.to_ary((opal$b = (opal$c = m['opal$[]'](1).opal$split(",", 2)).opal$map, opal$b._p = (TMP_39 = function(it){var self = TMP_39._s || this;if (it == null) it = nil;
              return it.opal$strip()}, TMP_39._s = self, TMP_39), opal$b).call(opal$c)), id = (opal$a[0] == null ? nil : opal$a[0]), reftext = (opal$a[1] == null ? nil : opal$a[1]);
              id = id.opal$sub(opal$scope.DoubleQuotedRx, (function() {if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
                return "opal$2"
                } else {
                return "2"
              }; return nil; })());
              if (reftext !== false && reftext !== nil) {
                reftext = reftext.opal$sub(opal$scope.DoubleQuotedMultiRx, (function() {if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
                  return "opal$2"
                  } else {
                  return "2"
                }; return nil; })())};
            };
            if ((opal$a = id['opal$include?']("#")) !== false && opal$a !== nil) {
              opal$a = opal$opal.to_ary(id.opal$split("#")), path = (opal$a[0] == null ? nil : opal$a[0]), fragment = (opal$a[1] == null ? nil : opal$a[1])
              } else {
              path = nil;
              fragment = id;
            };
            if ((opal$a = (opal$b = path, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              refid = fragment;
              target = "#" + (fragment);
              } else {
              path = opal$scope.Helpers.opal$rootname(path);
              if ((opal$a = (((opal$b = self.document.opal$attributes()['opal$[]']("docname")['opal$=='](path)) !== false && opal$b !== nil) ? opal$b : self.document.opal$references()['opal$[]']("includes")['opal$include?'](path))) !== false && opal$a !== nil) {
                refid = fragment;
                path = nil;
                target = "#" + (fragment);
                } else {
                refid = (function() {if (fragment !== false && fragment !== nil) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
                path = "" + (self.document.opal$attributes()['opal$[]']("relfileprefix")) + (path) + (self.document.opal$attributes().opal$fetch("outfilesuffix", ".html"));
                target = (function() {if (fragment !== false && fragment !== nil) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
              };
            };
            return opal$scope.Inline.opal$new(self, "anchor", reftext, opal$hash2(["type", "target", "attributes"], {"type": "xref", "target": target, "attributes": opal$hash2(["path", "fragment", "refid"], {"path": path, "fragment": fragment, "refid": refid})})).opal$convert();}, TMP_38._s = self, TMP_38), opal$a).call(opal$b, opal$scope.XrefInlineMacroRx)};
        return text;
      };

      def.opal$sub_callouts = function(text) {
        var opal$a, opal$b, TMP_40, self = this;
        return (opal$a = (opal$b = text).opal$gsub, opal$a._p = (TMP_40 = function(){var self = TMP_40._s || this, m = nil;
          if (self.document == null) self.document = nil;

        m = opal$gvars["~"];
          if (m['opal$[]'](1)['opal$==']("\\")) {
            return m['opal$[]'](0).opal$sub("\\", "");};
          return opal$scope.Inline.opal$new(self, "callout", m['opal$[]'](3), opal$hash2(["id"], {"id": self.document.opal$callouts().opal$read_next_id()})).opal$convert();}, TMP_40._s = self, TMP_40), opal$a).call(opal$b, opal$scope.CalloutConvertRx);
      };

      def.opal$sub_post_replacements = function(text) {
        var opal$a, opal$b, TMP_41, opal$c, TMP_42, self = this, lines = nil, last = nil;
        if (self.document == null) self.document = nil;
        if (self.attributes == null) self.attributes = nil;

        if ((opal$a = (((opal$b = (self.document.opal$attributes()['opal$has_key?']("hardbreaks"))) !== false && opal$b !== nil) ? opal$b : (self.attributes['opal$has_key?']("hardbreaks-option")))) !== false && opal$a !== nil) {
          lines = (text.opal$split(opal$scope.EOL));
          if (lines.opal$size()['opal$=='](1)) {
            return text};
          last = lines.opal$pop();
          return (opal$a = (opal$b = lines).opal$map, opal$a._p = (TMP_41 = function(line){var self = TMP_41._s || this;if (line == null) line = nil;
          return opal$scope.Inline.opal$new(self, "break", line.opal$rstrip().opal$chomp(opal$scope.LINE_BREAK), opal$hash2(["type"], {"type": "line"})).opal$convert()}, TMP_41._s = self, TMP_41), opal$a).call(opal$b).opal$push(last)['opal$*'](opal$scope.EOL);
        } else if ((opal$a = text['opal$include?']("+")) !== false && opal$a !== nil) {
          return (opal$a = (opal$c = text).opal$gsub, opal$a._p = (TMP_42 = function(){var self = TMP_42._s || this;
          return opal$scope.Inline.opal$new(self, "break", opal$gvars["~"]['opal$[]'](1), opal$hash2(["type"], {"type": "line"})).opal$convert()}, TMP_42._s = self, TMP_42), opal$a).call(opal$c, opal$scope.LineBreakRx)
          } else {
          return text
        };
      };

      def.opal$convert_quoted_text = function(match, type, scope) {
        var opal$a, opal$b, self = this, unescaped_attrs = nil, attrs = nil, attributes = nil, id = nil;
        unescaped_attrs = nil;
        if ((opal$a = match['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
          if ((opal$a = ((opal$b = scope['opal$==']("constrained")) ? (attrs = match['opal$[]'](2)) : opal$b)) !== false && opal$a !== nil) {
            unescaped_attrs = "[" + (attrs) + "]"
            } else {
            return match['opal$[]'](0)['opal$[]'](opal$range(1, -1, false))
          }};
        if (scope['opal$==']("constrained")) {
          if (unescaped_attrs !== false && unescaped_attrs !== nil) {
            return "" + (unescaped_attrs) + (opal$scope.Inline.opal$new(self, "quoted", match['opal$[]'](3), opal$hash2(["type"], {"type": type})).opal$convert())
            } else {
            attributes = self.opal$parse_quoted_text_attributes(match['opal$[]'](2));
            id = (function() {if (attributes !== false && attributes !== nil) {
              return attributes.opal$delete("id")
              } else {
              return nil
            }; return nil; })();
            return "" + (match['opal$[]'](1)) + (opal$scope.Inline.opal$new(self, "quoted", match['opal$[]'](3), opal$hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).opal$convert());
          }
          } else {
          attributes = self.opal$parse_quoted_text_attributes(match['opal$[]'](1));
          id = (function() {if (attributes !== false && attributes !== nil) {
            return attributes.opal$delete("id")
            } else {
            return nil
          }; return nil; })();
          return opal$scope.Inline.opal$new(self, "quoted", match['opal$[]'](2), opal$hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).opal$convert();
        };
      };

      def.opal$parse_quoted_text_attributes = function(str) {
        var opal$a, opal$b, self = this, _ = nil, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil;
        if ((opal$a = str) === false || opal$a === nil) {
          return nil};
        if ((opal$a = str['opal$empty?']()) !== false && opal$a !== nil) {
          return opal$hash2([], {})};
        if ((opal$a = str['opal$include?']("{")) !== false && opal$a !== nil) {
          str = self.opal$sub_attributes(str)};
        str = str.opal$strip();
        if ((opal$a = str['opal$include?'](",")) !== false && opal$a !== nil) {
          opal$a = opal$opal.to_ary(str.opal$split(",", 2)), str = (opal$a[0] == null ? nil : opal$a[0]), _ = (opal$a[1] == null ? nil : opal$a[1])};
        if ((opal$a = str['opal$empty?']()) !== false && opal$a !== nil) {
          return opal$hash2([], {})
        } else if ((opal$a = (((opal$b = str['opal$start_with?'](".")) !== false && opal$b !== nil) ? opal$b : str['opal$start_with?']("#"))) !== false && opal$a !== nil) {
          segments = str.opal$split("#", 2);
          if (segments.opal$length()['opal$>'](1)) {
            opal$a = opal$opal.to_ary(segments['opal$[]'](1).opal$split(".")), id = (opal$a[0] == null ? nil : opal$a[0]), more_roles = opal$slice.call(opal$a, 1)
            } else {
            id = nil;
            more_roles = [];
          };
          roles = (function() {if ((opal$a = segments['opal$[]'](0)['opal$empty?']()) !== false && opal$a !== nil) {
            return []
            } else {
            return segments['opal$[]'](0).opal$split(".")
          }; return nil; })();
          if (roles.opal$length()['opal$>'](1)) {
            roles.opal$shift()};
          if (more_roles.opal$length()['opal$>'](0)) {
            roles.opal$concat(more_roles)};
          attrs = opal$hash2([], {});
          if (id !== false && id !== nil) {
            attrs['opal$[]=']("id", id)};
          if ((opal$a = roles['opal$empty?']()) === false || opal$a === nil) {
            attrs['opal$[]=']("role", roles['opal$*'](" "))};
          return attrs;
          } else {
          return opal$hash2(["role"], {"role": str})
        };
      };

      def.opal$parse_attributes = function(attrline, posattrs, opts) {
        var opal$a, self = this, block = nil, into = nil;
        if (self.document == null) self.document = nil;

        if (posattrs == null) {
          posattrs = ["role"]
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = attrline) === false || opal$a === nil) {
          return nil};
        if ((opal$a = attrline['opal$empty?']()) !== false && opal$a !== nil) {
          return opal$hash2([], {})};
        if ((opal$a = opts['opal$[]']("sub_input")) !== false && opal$a !== nil) {
          attrline = self.document.opal$sub_attributes(attrline)};
        if ((opal$a = opts['opal$[]']("unescape_input")) !== false && opal$a !== nil) {
          attrline = self.opal$unescape_bracketed_text(attrline)};
        block = nil;
        if ((opal$a = opts.opal$fetch("sub_result", true)) !== false && opal$a !== nil) {
          block = self};
        if ((opal$a = (into = opts['opal$[]']("into"))) !== false && opal$a !== nil) {
          return opal$scope.AttributeList.opal$new(attrline, block).opal$parse_into(into, posattrs)
          } else {
          return opal$scope.AttributeList.opal$new(attrline, block).opal$parse(posattrs)
        };
      };

      def.opal$unescape_bracketed_text = function(text) {
        var opal$a, self = this;
        if ((opal$a = text['opal$empty?']()) !== false && opal$a !== nil) {
          return ""};
        return text.opal$strip().opal$tr(opal$scope.EOL, " ").opal$gsub("]", "]");
      };

      def.opal$normalize_string = function(str, unescape_brackets) {
        var opal$a, self = this;
        if (unescape_brackets == null) {
          unescape_brackets = false
        }
        if ((opal$a = str['opal$empty?']()) !== false && opal$a !== nil) {
          return ""
        } else if (unescape_brackets !== false && unescape_brackets !== nil) {
          return self.opal$unescape_brackets(str.opal$strip().opal$tr(opal$scope.EOL, " "))
          } else {
          return str.opal$strip().opal$tr(opal$scope.EOL, " ")
        };
      };

      def.opal$unescape_brackets = function(str) {
        var opal$a, self = this;
        if ((opal$a = str['opal$empty?']()) !== false && opal$a !== nil) {
          return ""
          } else {
          return str.opal$gsub("]", "]")
        };
      };

      def.opal$split_simple_csv = function(str) {
        var opal$a, opal$b, TMP_43, opal$c, TMP_44, self = this, values = nil, current = nil, quote_open = nil;
        if ((opal$a = str['opal$empty?']()) !== false && opal$a !== nil) {
          values = []
        } else if ((opal$a = str['opal$include?']("\"")) !== false && opal$a !== nil) {
          values = [];
          current = [];
          quote_open = false;
          (opal$a = (opal$b = str).opal$each_char, opal$a._p = (TMP_43 = function(c){var self = TMP_43._s || this, opal$a, opal$case = nil;if (c == null) c = nil;
          return (function() {opal$case = c;if (","['opal$==='](opal$case)) {if (quote_open !== false && quote_open !== nil) {
              return current.opal$push(c)
              } else {
              values['opal$<<'](current.opal$join().opal$strip());
              return current = [];
            }}else if ("\""['opal$==='](opal$case)) {return quote_open = (opal$a = quote_open, (opal$a === nil || opal$a === false))}else {return current.opal$push(c)}})()}, TMP_43._s = self, TMP_43), opal$a).call(opal$b);
          values['opal$<<'](current.opal$join().opal$strip());
          } else {
          values = (opal$a = (opal$c = str.opal$split(",")).opal$map, opal$a._p = (TMP_44 = function(it){var self = TMP_44._s || this;if (it == null) it = nil;
          return it.opal$strip()}, TMP_44._s = self, TMP_44), opal$a).call(opal$c)
        };
        return values;
      };

      def.opal$resolve_subs = function(subs, type, defaults, subject) {
        var opal$a, opal$b, TMP_45, self = this, candidates = nil, modification_group = nil, resolved = nil, invalid = nil;
        if (type == null) {
          type = "block"
        }
        if (defaults == null) {
          defaults = nil
        }
        if (subject == null) {
          subject = nil
        }
        if ((opal$a = subs['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return []};
        candidates = [];
        modification_group = (function() {if (defaults !== false && defaults !== nil) {
          return nil
          } else {
          return false
        }; return nil; })();
        (opal$a = (opal$b = subs.opal$split(",")).opal$each, opal$a._p = (TMP_45 = function(val){var self = TMP_45._s || this, opal$a, opal$b, opal$c, key = nil, first = nil, operation = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, opal$case = nil;if (val == null) val = nil;
        key = val.opal$strip();
          if ((opal$a = (opal$b = modification_group['opal$=='](false), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            if (((first = key.opal$chr()))['opal$==']("+")) {
              operation = "append";
              key = key['opal$[]'](opal$range(1, -1, false));
            } else if (first['opal$==']("-")) {
              operation = "remove";
              key = key['opal$[]'](opal$range(1, -1, false));
            } else if ((opal$a = key['opal$end_with?']("+")) !== false && opal$a !== nil) {
              operation = "prepend";
              key = key.opal$chop();
            } else if (modification_group !== false && modification_group !== nil) {
              self.opal$warn("asciidoctor: WARNING: invalid entry in substitution modification group" + ((function() {if (subject !== false && subject !== nil) {
                return " for "
                } else {
                return nil
              }; return nil; })()) + (subject) + ": " + (key));
              return nil;;
              } else {
              operation = nil
            };
            if ((opal$a = modification_group['opal$nil?']()) !== false && opal$a !== nil) {
              if (operation !== false && operation !== nil) {
                candidates = defaults.opal$dup();
                modification_group = true;
                } else {
                modification_group = false
              }};};
          key = key.opal$to_sym();
          if ((opal$a = ((opal$b = type['opal$==']("inline")) ? ((((opal$c = key['opal$==']("verbatim")) !== false && opal$c !== nil) ? opal$c : key['opal$==']("v"))) : opal$b)) !== false && opal$a !== nil) {
            resolved_keys = ["specialcharacters"]
          } else if ((opal$a = opal$scope.COMPOSITE_SUBS['opal$has_key?'](key)) !== false && opal$a !== nil) {
            resolved_keys = opal$scope.COMPOSITE_SUBS['opal$[]'](key)
          } else if ((opal$a = (opal$b = ((opal$c = type['opal$==']("inline")) ? key.opal$length()['opal$=='](1) : opal$c), opal$b !== false && opal$b !== nil ?(opal$scope.SUB_SYMBOLS['opal$has_key?'](key)) : opal$b)) !== false && opal$a !== nil) {
            resolved_key = opal$scope.SUB_SYMBOLS['opal$[]'](key);
            if ((opal$a = (candidate = opal$scope.COMPOSITE_SUBS['opal$[]'](resolved_key))) !== false && opal$a !== nil) {
              resolved_keys = candidate
              } else {
              resolved_keys = [resolved_key]
            };
            } else {
            resolved_keys = [key]
          };
          if (modification_group !== false && modification_group !== nil) {
            return (function() {opal$case = operation;if ("append"['opal$==='](opal$case)) {return candidates = candidates['opal$+'](resolved_keys)}else if ("prepend"['opal$==='](opal$case)) {return candidates = resolved_keys['opal$+'](candidates)}else if ("remove"['opal$==='](opal$case)) {return candidates = candidates['opal$-'](resolved_keys)}else { return nil }})()
            } else {
            return candidates = candidates['opal$+'](resolved_keys)
          };}, TMP_45._s = self, TMP_45), opal$a).call(opal$b);
        resolved = candidates['opal$&'](opal$scope.SUB_OPTIONS['opal$[]'](type));
        if ((opal$a = (candidates['opal$-'](resolved))['opal$empty?']()) === false || opal$a === nil) {
          invalid = candidates['opal$-'](resolved);
          self.opal$warn("asciidoctor: WARNING: invalid substitution type" + ((function() {if (invalid.opal$size()['opal$>'](1)) {
            return "s"
            } else {
            return ""
          }; return nil; })()) + ((function() {if (subject !== false && subject !== nil) {
            return " for "
            } else {
            return nil
          }; return nil; })()) + (subject) + ": " + (invalid['opal$*'](", ")));};
        return resolved;
      };

      def.opal$resolve_block_subs = function(subs, defaults, subject) {
        var self = this;
        return self.opal$resolve_subs(subs, "block", defaults, subject);
      };

      def.opal$resolve_pass_subs = function(subs) {
        var self = this;
        return self.opal$resolve_subs(subs, "inline", nil, "passthrough macro");
      };

      def.opal$highlight_source = function(source, sub_callouts, highlighter) {
        var opal$a, opal$b, TMP_46, opal$c, opal$d, TMP_48, self = this, callout_marks = nil, lineno = nil, callout_on_last = nil, last = nil, linenums_mode = nil, opal$case = nil, result = nil, lexer = nil, opts = nil, reached_code = nil;
        if (self.document == null) self.document = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (highlighter == null) {
          highlighter = nil
        }
        (((opal$a = highlighter) !== false && opal$a !== nil) ? opal$a : highlighter = self.document.opal$attributes()['opal$[]']("source-highlighter"));
        opal$scope.Helpers.opal$require_library(highlighter, ((function() {if (highlighter['opal$==']("pygments")) {
          return "pygments.rb"
          } else {
          return highlighter
        }; return nil; })()));
        callout_marks = opal$hash2([], {});
        lineno = 0;
        callout_on_last = false;
        if (sub_callouts !== false && sub_callouts !== nil) {
          last = -1;
          source = (opal$a = (opal$b = source.opal$split(opal$scope.EOL)).opal$map, opal$a._p = (TMP_46 = function(line){var self = TMP_46._s || this, opal$a, opal$b, TMP_47;if (line == null) line = nil;
          lineno = lineno['opal$+'](1);
            return (opal$a = (opal$b = line).opal$gsub, opal$a._p = (TMP_47 = function(){var self = TMP_47._s || this, opal$a, opal$b, opal$c, m = nil;
            m = opal$gvars["~"];
              if (m['opal$[]'](1)['opal$==']("\\")) {
                return m['opal$[]'](0).opal$sub("\\", "")
                } else {
                ((opal$a = lineno, opal$b = callout_marks, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, []))))['opal$<<'](m['opal$[]'](3));
                last = lineno;
                return nil;
              };}, TMP_47._s = self, TMP_47), opal$a).call(opal$b, opal$scope.CalloutScanRx);}, TMP_46._s = self, TMP_46), opal$a).call(opal$b)['opal$*'](opal$scope.EOL);
          callout_on_last = (last['opal$=='](lineno));};
        linenums_mode = nil;
        opal$case = highlighter;if ("coderay"['opal$==='](opal$case)) {result = (((opal$a = opal$opal.Object._scope.CodeRay) == null ? opal$opal.cm('CodeRay') : opal$a))._scope.Duo['opal$[]'](self.opal$attr("language", "text").opal$to_sym(), "html", opal$hash2(["css", "line_numbers", "line_number_anchors"], {"css": ((((opal$a = self.document.opal$attributes()['opal$[]']("coderay-css")) !== false && opal$a !== nil) ? opal$a : "class")).opal$to_sym(), "line_numbers": (linenums_mode = ((function() {if ((opal$a = (self['opal$attr?']("linenums"))) !== false && opal$a !== nil) {
          return ((((opal$a = self.document.opal$attributes()['opal$[]']("coderay-linenums-mode")) !== false && opal$a !== nil) ? opal$a : "table")).opal$to_sym()
          } else {
          return nil
        }; return nil; })())), "line_number_anchors": false})).opal$highlight(source)}else if ("pygments"['opal$==='](opal$case)) {if ((opal$a = (lexer = (((opal$c = opal$opal.Object._scope.Pygments) == null ? opal$opal.cm('Pygments') : opal$c))._scope.Lexer['opal$[]'](self.opal$attr("language")))) !== false && opal$a !== nil) {
          opts = opal$hash2(["cssclass", "classprefix", "nobackground"], {"cssclass": "pyhl", "classprefix": "tok-", "nobackground": true});
          if ((opal$a = ((((opal$c = self.document.opal$attributes()['opal$[]']("pygments-css")) !== false && opal$c !== nil) ? opal$c : "class"))['opal$==']("class")) === false || opal$a === nil) {
            opts['opal$[]=']("noclasses", true);
            opts['opal$[]=']("style", ((((opal$a = self.document.opal$attributes()['opal$[]']("pygments-style")) !== false && opal$a !== nil) ? opal$a : (opal$scope.Stylesheets)._scope.DEFAULT_PYGMENTS_STYLE)));};
          if ((opal$a = self['opal$attr?']("linenums")) !== false && opal$a !== nil) {
            if ((opts['opal$[]=']("linenos", (((opal$a = self.document.opal$attributes()['opal$[]']("pygments-linenums-mode")) !== false && opal$a !== nil) ? opal$a : "table")))['opal$==']("table")) {
              result = lexer.opal$highlight(source, opal$hash2(["options"], {"options": opts})).opal$sub(/<div class="pyhl">(.*)<\/div>/i, "1").opal$gsub(/<pre[^>]*>(.*?)<\/pre>\s*/i, "1")
              } else {
              result = lexer.opal$highlight(source, opal$hash2(["options"], {"options": opts})).opal$sub(/<div class="pyhl"><pre[^>]*>(.*?)<\/pre><\/div>/i, "1")
            }
            } else {
            opts['opal$[]=']("nowrap", true);
            result = lexer.opal$highlight(source, opal$hash2(["options"], {"options": opts}));
          };
          } else {
          result = source
        }};
        if ((opal$a = self.passthroughs['opal$empty?']()) === false || opal$a === nil) {
          result = result.opal$gsub(opal$scope.PASS_MATCH_HI, "" + (opal$scope.PASS_START) + "\\1" + (opal$scope.PASS_END))};
        if ((opal$a = (((opal$c = (opal$d = sub_callouts, (opal$d === nil || opal$d === false))) !== false && opal$c !== nil) ? opal$c : callout_marks['opal$empty?']())) !== false && opal$a !== nil) {
          return result
          } else {
          lineno = 0;
          reached_code = (opal$a = linenums_mode['opal$==']("table"), (opal$a === nil || opal$a === false));
          return (opal$a = (opal$c = result.opal$split(opal$scope.EOL)).opal$map, opal$a._p = (TMP_48 = function(line){var self = TMP_48._s || this, opal$a, opal$b, opal$c, TMP_49, conums = nil, tail = nil, pos = nil, conums_markup = nil;
            if (self.document == null) self.document = nil;
if (line == null) line = nil;
          if ((opal$a = reached_code) === false || opal$a === nil) {
              if ((opal$a = line['opal$include?']("<td class=\"code\">")) === false || opal$a === nil) {
                return line;};
              reached_code = true;};
            lineno = lineno['opal$+'](1);
            if ((opal$a = (conums = callout_marks.opal$delete(lineno))) !== false && opal$a !== nil) {
              tail = nil;
              if ((opal$a = (opal$b = ((opal$c = callout_on_last !== false && callout_on_last !== nil) ? callout_marks['opal$empty?']() : opal$c), opal$b !== false && opal$b !== nil ?(pos = line.opal$index("</pre>")) : opal$b)) !== false && opal$a !== nil) {
                tail = line['opal$[]'](opal$range(pos, -1, false));
                line = line['opal$[]'](opal$range(0, pos, true));};
              if (conums.opal$size()['opal$=='](1)) {
                return "" + (line) + (opal$scope.Inline.opal$new(self, "callout", conums['opal$[]'](0), opal$hash2(["id"], {"id": self.document.opal$callouts().opal$read_next_id()})).opal$convert()) + (tail)
                } else {
                conums_markup = (opal$a = (opal$b = conums).opal$map, opal$a._p = (TMP_49 = function(conum){var self = TMP_49._s || this;
                  if (self.document == null) self.document = nil;
if (conum == null) conum = nil;
                return opal$scope.Inline.opal$new(self, "callout", conum, opal$hash2(["id"], {"id": self.document.opal$callouts().opal$read_next_id()})).opal$convert()}, TMP_49._s = self, TMP_49), opal$a).call(opal$b)['opal$*'](" ");
                return "" + (line) + (conums_markup) + (tail);
              };
              } else {
              return line
            };}, TMP_48._s = self, TMP_48), opal$a).call(opal$c)['opal$*'](opal$scope.EOL);
        };
      };

      def.opal$lock_in_subs = function() {
        var opal$a, opal$b, opal$c, opal$d, opal$e, TMP_50, self = this, default_subs = nil, opal$case = nil, custom_subs = nil, highlighter = nil;
        if (self.default_subs == null) self.default_subs = nil;
        if (self.content_model == null) self.content_model = nil;
        if (self.context == null) self.context = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.style == null) self.style = nil;
        if (self.document == null) self.document = nil;
        if (self.subs == null) self.subs = nil;

        if ((opal$a = self.default_subs) !== false && opal$a !== nil) {
          default_subs = self.default_subs
          } else {
          opal$case = self.content_model;if ("simple"['opal$==='](opal$case)) {default_subs = opal$scope.SUBS['opal$[]']("normal")}else if ("verbatim"['opal$==='](opal$case)) {default_subs = (function() {if ((opal$a = (((opal$b = self.context['opal$==']("listing")) !== false && opal$b !== nil) ? opal$b : (((opal$c = self.context['opal$==']("literal")) ? (opal$d = (self['opal$option?']("listparagraph")), (opal$d === nil || opal$d === false)) : opal$c)))) !== false && opal$a !== nil) {
            return opal$scope.SUBS['opal$[]']("verbatim")
          } else if (self.context['opal$==']("verse")) {
            return opal$scope.SUBS['opal$[]']("normal")
            } else {
            return opal$scope.SUBS['opal$[]']("basic")
          }; return nil; })()}else if ("raw"['opal$==='](opal$case)) {default_subs = opal$scope.SUBS['opal$[]']("pass")}else {return nil}
        };
        if ((opal$a = (custom_subs = self.attributes['opal$[]']("subs"))) !== false && opal$a !== nil) {
          self.subs = self.opal$resolve_block_subs(custom_subs, default_subs, self.context)
          } else {
          self.subs = default_subs.opal$dup()
        };
        if ((opal$a = (opal$b = (opal$c = (opal$d = ((opal$e = self.context['opal$==']("listing")) ? self.style['opal$==']("source") : opal$e), opal$d !== false && opal$d !== nil ?(self.document['opal$basebackend?']("html")) : opal$d), opal$c !== false && opal$c !== nil ?((((opal$d = ((highlighter = self.document.opal$attributes()['opal$[]']("source-highlighter")))['opal$==']("coderay")) !== false && opal$d !== nil) ? opal$d : highlighter['opal$==']("pygments"))) : opal$c), opal$b !== false && opal$b !== nil ?(self['opal$attr?']("language")) : opal$b)) !== false && opal$a !== nil) {
          return self.subs = (opal$a = (opal$b = self.subs).opal$map, opal$a._p = (TMP_50 = function(sub){var self = TMP_50._s || this;if (sub == null) sub = nil;
          if (sub['opal$==']("specialcharacters")) {
              return "highlight"
              } else {
              return sub
            }}, TMP_50._s = self, TMP_50), opal$a).call(opal$b)
          } else {
          return nil
        };
      };
            ;opal$opal.donate(self, ["opal$apply_subs", "opal$apply_normal_subs", "opal$apply_title_subs", "opal$apply_header_subs", "opal$extract_passthroughs", "opal$restore_passthroughs", "opal$sub_specialcharacters", "opal$sub_specialchars", "opal$sub_quotes", "opal$sub_replacements", "opal$do_replacement", "opal$sub_attributes", "opal$sub_macros", "opal$sub_inline_anchors", "opal$sub_inline_xrefs", "opal$sub_callouts", "opal$sub_post_replacements", "opal$convert_quoted_text", "opal$parse_quoted_text_attributes", "opal$parse_attributes", "opal$unescape_bracketed_text", "opal$normalize_string", "opal$unescape_brackets", "opal$split_simple_csv", "opal$resolve_subs", "opal$resolve_block_subs", "opal$resolve_pass_subs", "opal$highlight_source", "opal$lock_in_subs"]);
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$AbstractNode(){};
      var self = opal$AbstractNode = opal$klass(opal$base, opal$super, 'AbstractNode', opal$AbstractNode);

      var def = opal$AbstractNode._proto, opal$scope = opal$AbstractNode._scope;
      def.document = def.attributes = def.path_resolver = def.style = nil;
      self.opal$include(opal$scope.Substitutors);

      self.opal$attr_reader("parent");

      self.opal$attr_reader("document");

      self.opal$attr_reader("context");

      self.opal$attr_reader("node_name");

      self.opal$attr_accessor("id");

      self.opal$attr_reader("attributes");

      def.opal$initialize = function(parent, context) {
        var opal$a, self = this;
        if (context['opal$==']("document")) {
          self.parent = nil;
          self.document = parent;
        } else if ((opal$a = (self.parent = parent)) !== false && opal$a !== nil) {
          self.document = parent.opal$document()
          } else {
          self.document = nil
        };
        self.context = context;
        self.node_name = context.opal$to_s();
        self.attributes = opal$hash2([], {});
        return self.passthroughs = [];
      };

      def['opal$parent='] = function(parent) {
        var self = this;
        self.parent = parent;
        self.document = parent.opal$document();
        return nil;
      };

      def['opal$inline?'] = function() {
        var opal$a, self = this;
        return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
      };

      def['opal$block?'] = function() {
        var opal$a, self = this;
        return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
      };

      def.opal$attr = function(name, default_value, inherit) {
        var opal$a, opal$b, self = this;
        if (default_value == null) {
          default_value = nil
        }
        if (inherit == null) {
          inherit = true
        }
        if ((opal$a = name['opal$is_a?'](((opal$b = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$b))) !== false && opal$a !== nil) {
          name = name.opal$to_s()};
        if (self['opal$=='](self.document)) {
          inherit = false};
        if (inherit !== false && inherit !== nil) {
          return (((opal$a = (((opal$b = self.attributes['opal$[]'](name)) !== false && opal$b !== nil) ? opal$b : self.document.opal$attributes()['opal$[]'](name))) !== false && opal$a !== nil) ? opal$a : default_value)
          } else {
          return (((opal$a = self.attributes['opal$[]'](name)) !== false && opal$a !== nil) ? opal$a : default_value)
        };
      };

      def['opal$attr?'] = function(name, expect, inherit) {
        var opal$a, opal$b, self = this;
        if (expect == null) {
          expect = nil
        }
        if (inherit == null) {
          inherit = true
        }
        if ((opal$a = name['opal$is_a?'](((opal$b = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$b))) !== false && opal$a !== nil) {
          name = name.opal$to_s()};
        if (self['opal$=='](self.document)) {
          inherit = false};
        if ((opal$a = expect['opal$nil?']()) !== false && opal$a !== nil) {
          return (((opal$a = self.attributes['opal$has_key?'](name)) !== false && opal$a !== nil) ? opal$a : (((opal$b = inherit !== false && inherit !== nil) ? self.document.opal$attributes()['opal$has_key?'](name) : opal$b)))
        } else if (inherit !== false && inherit !== nil) {
          return expect['opal$=='](((((opal$a = self.attributes['opal$[]'](name)) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$[]'](name))))
          } else {
          return expect['opal$=='](self.attributes['opal$[]'](name))
        };
      };

      def.opal$set_attr = function(name, value, overwrite) {
        var opal$a, opal$b, opal$c, self = this;
        if (overwrite == null) {
          overwrite = nil
        }
        if ((opal$a = overwrite['opal$nil?']()) !== false && opal$a !== nil) {
          self.attributes['opal$[]='](name, value);
          return true;
        } else if ((opal$a = (((opal$b = overwrite) !== false && opal$b !== nil) ? opal$b : (opal$c = (self.attributes['opal$key?'](name)), (opal$c === nil || opal$c === false)))) !== false && opal$a !== nil) {
          self.attributes['opal$[]='](name, value);
          return true;
          } else {
          return false
        };
      };

      def.opal$set_option = function(name) {
        var opal$a, self = this;
        if ((opal$a = self.attributes['opal$has_key?']("options")) !== false && opal$a !== nil) {
          self.attributes['opal$[]=']("options", "" + (self.attributes['opal$[]']("options")) + "," + (name))
          } else {
          self.attributes['opal$[]=']("options", name)
        };
        return self.attributes['opal$[]=']("" + (name) + "-option", "");
      };

      def['opal$option?'] = function(name) {
        var self = this;
        return self.attributes['opal$has_key?']("" + (name) + "-option");
      };

      def.opal$update_attributes = function(attributes) {
        var self = this;
        self.attributes.opal$update(attributes);
        return nil;
      };

      def.opal$converter = function() {
        var self = this;
        return self.document.opal$converter();
      };

      def['opal$role?'] = function(expect) {
        var opal$a, self = this;
        if (expect == null) {
          expect = nil
        }
        if ((opal$a = expect['opal$nil?']()) !== false && opal$a !== nil) {
          return (((opal$a = self.attributes['opal$has_key?']("role")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$has_key?']("role"))
          } else {
          return expect['opal$=='](((((opal$a = self.attributes['opal$[]']("role")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$[]']("role"))))
        };
      };

      def.opal$role = function() {
        var opal$a, self = this;
        return (((opal$a = self.attributes['opal$[]']("role")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$[]']("role"));
      };

      def['opal$has_role?'] = function(name) {
        var opal$a, opal$b, self = this, val = nil;
        if ((opal$a = (val = ((((opal$b = self.attributes['opal$[]']("role")) !== false && opal$b !== nil) ? opal$b : self.document.opal$attributes()['opal$[]']("role"))))) !== false && opal$a !== nil) {
          return val.opal$split(" ")['opal$include?'](name)
          } else {
          return false
        };
      };

      def.opal$roles = function() {
        var opal$a, opal$b, self = this, val = nil;
        if ((opal$a = (val = ((((opal$b = self.attributes['opal$[]']("role")) !== false && opal$b !== nil) ? opal$b : self.document.opal$attributes()['opal$[]']("role"))))) !== false && opal$a !== nil) {
          return val.opal$split(" ")
          } else {
          return []
        };
      };

      def['opal$reftext?'] = function() {
        var opal$a, self = this;
        return (((opal$a = self.attributes['opal$has_key?']("reftext")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$has_key?']("reftext"));
      };

      def.opal$reftext = function() {
        var opal$a, self = this;
        return (((opal$a = self.attributes['opal$[]']("reftext")) !== false && opal$a !== nil) ? opal$a : self.document.opal$attributes()['opal$[]']("reftext"));
      };

      def.opal$icon_uri = function(name) {
        var opal$a, self = this;
        if ((opal$a = self['opal$attr?']("icon")) !== false && opal$a !== nil) {
          return self.opal$image_uri(self.opal$attr("icon"), nil)
          } else {
          return self.opal$image_uri("" + (name) + "." + (self.document.opal$attr("icontype", "png")), "iconsdir")
        };
      };

      def.opal$media_uri = function(target, asset_dir_key) {
        var opal$a, opal$b, self = this;
        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir"
        }
        if ((opal$a = (opal$b = target['opal$include?'](":"), opal$b !== false && opal$b !== nil ?opal$scope.UriSniffRx['opal$=~'](target) : opal$b)) !== false && opal$a !== nil) {
          return target
        } else if ((opal$a = ((opal$b = asset_dir_key !== false && asset_dir_key !== nil) ? self['opal$attr?'](asset_dir_key) : opal$b)) !== false && opal$a !== nil) {
          return self.opal$normalize_web_path(target, self.document.opal$attr(asset_dir_key))
          } else {
          return self.opal$normalize_web_path(target)
        };
      };

      def.opal$image_uri = function(target_image, asset_dir_key) {
        var opal$a, opal$b, self = this;
        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir"
        }
        if ((opal$a = (opal$b = target_image['opal$include?'](":"), opal$b !== false && opal$b !== nil ?opal$scope.UriSniffRx['opal$=~'](target_image) : opal$b)) !== false && opal$a !== nil) {
          return target_image
        } else if ((opal$a = ((opal$b = self.document.opal$safe()['opal$<']((opal$scope.SafeMode)._scope.SECURE)) ? self.document['opal$attr?']("data-uri") : opal$b)) !== false && opal$a !== nil) {
          return self.opal$generate_data_uri(target_image, asset_dir_key)
        } else if ((opal$a = ((opal$b = asset_dir_key !== false && asset_dir_key !== nil) ? self['opal$attr?'](asset_dir_key) : opal$b)) !== false && opal$a !== nil) {
          return self.opal$normalize_web_path(target_image, self.document.opal$attr(asset_dir_key))
          } else {
          return self.opal$normalize_web_path(target_image)
        };
      };

      def.opal$generate_data_uri = function(target_image, asset_dir_key) {
        var opal$a, opal$b, TMP_1, self = this, ext = nil, mimetype = nil, image_path = nil, bindata = nil;
        if (asset_dir_key == null) {
          asset_dir_key = nil
        }
        ext = opal$scope.File.opal$extname(target_image)['opal$[]'](opal$range(1, -1, false));
        mimetype = "image/"['opal$+'](ext);
        if (ext['opal$==']("svg")) {
          mimetype = "" + (mimetype) + "+xml"};
        if (asset_dir_key !== false && asset_dir_key !== nil) {
          image_path = self.opal$normalize_system_path(target_image, self.document.opal$attr(asset_dir_key), nil, opal$hash2(["target_name"], {"target_name": "image"}))
          } else {
          image_path = self.opal$normalize_system_path(target_image)
        };
        if ((opal$a = (opal$b = opal$scope.File['opal$readable?'](image_path), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          self.opal$warn("asciidoctor: WARNING: image to embed not found or not readable: " + (image_path));
          return "data:" + (mimetype) + ":base64,";};
        bindata = nil;
        if ((opal$a = opal$scope.IO['opal$respond_to?']("binread")) !== false && opal$a !== nil) {
          bindata = opal$scope.IO.opal$binread(image_path)
          } else {
          bindata = (opal$a = (opal$b = opal$scope.File).opal$open, opal$a._p = (TMP_1 = function(file){var self = TMP_1._s || this;if (file == null) file = nil;
          return file.opal$read()}, TMP_1._s = self, TMP_1), opal$a).call(opal$b, image_path, "rb")
        };
        return "data:" + (mimetype) + ";base64," + (opal$scope.Base64.opal$encode64(bindata).opal$delete(opal$scope.EOL));
      };

      def.opal$read_asset = function(path, warn_on_failure) {
        var opal$a, self = this;
        if (warn_on_failure == null) {
          warn_on_failure = false
        }
        if ((opal$a = opal$scope.File['opal$readable?'](path)) !== false && opal$a !== nil) {
          return opal$scope.File.opal$read(path).opal$chomp()
          } else {
          if (warn_on_failure !== false && warn_on_failure !== nil) {
            self.opal$warn("asciidoctor: WARNING: file does not exist or cannot be read: " + (path))};
          return nil;
        };
      };

      def.opal$normalize_web_path = function(target, start) {
        var opal$a, self = this;
        if (start == null) {
          start = nil
        }
        return ((((opal$a = self.path_resolver) !== false && opal$a !== nil) ? opal$a : self.path_resolver = opal$scope.PathResolver.opal$new())).opal$web_path(target, start);
      };

      def.opal$normalize_system_path = function(target, start, jail, opts) {
        var opal$a, opal$b, self = this;
        if (start == null) {
          start = nil
        }
        if (jail == null) {
          jail = nil
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = start['opal$nil?']()) !== false && opal$a !== nil) {
          start = self.document.opal$base_dir()};
        if ((opal$a = (opal$b = jail['opal$nil?'](), opal$b !== false && opal$b !== nil ?self.document.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SAFE) : opal$b)) !== false && opal$a !== nil) {
          jail = self.document.opal$base_dir()};
        return ((((opal$a = self.path_resolver) !== false && opal$a !== nil) ? opal$a : self.path_resolver = opal$scope.PathResolver.opal$new())).opal$system_path(target, start, jail, opts);
      };

      def.opal$normalize_asset_path = function(asset_ref, asset_name, autocorrect) {
        var self = this;
        if (asset_name == null) {
          asset_name = "path"
        }
        if (autocorrect == null) {
          autocorrect = true
        }
        return self.opal$normalize_system_path(asset_ref, self.document.opal$base_dir(), nil, opal$hash2(["target_name", "recover"], {"target_name": asset_name, "recover": autocorrect}));
      };

      def.opal$relative_path = function(filename) {
        var opal$a, self = this;
        return ((((opal$a = self.path_resolver) !== false && opal$a !== nil) ? opal$a : self.path_resolver = opal$scope.PathResolver.opal$new())).opal$relative_path(filename, self.document.opal$base_dir());
      };

      return (def.opal$list_marker_keyword = function(list_type) {
        var opal$a, self = this;
        if (list_type == null) {
          list_type = nil
        }
        return opal$scope.ORDERED_LIST_KEYWORDS['opal$[]']((((opal$a = list_type) !== false && opal$a !== nil) ? opal$a : self.style));
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$AbstractBlock(){};
      var self = opal$AbstractBlock = opal$klass(opal$base, opal$super, 'AbstractBlock', opal$AbstractBlock);

      var def = opal$AbstractBlock._proto, opal$scope = opal$AbstractBlock._scope, TMP_1;
      def.document = def.attributes = def.blocks = def.subs = def.title = def.subbed_title = def.caption = def.context = def.next_section_index = def.next_section_number = nil;
      self.opal$attr_accessor("content_model");

      self.opal$attr_reader("subs");

      self.opal$attr_reader("blocks");

      self.opal$attr_accessor("level");

      self.opal$attr_writer("title");

      self.opal$attr_accessor("style");

      self.opal$attr_accessor("caption");

      def.opal$initialize = TMP_1 = function(parent, context) {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil;
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, opal$iter).apply(self, opal$zuper);
        self.content_model = "compound";
        self.subs = [];
        self.default_subs = nil;
        self.blocks = [];
        self.id = nil;
        self.title = nil;
        self.caption = nil;
        self.style = nil;
        self.level = (function() {if (context['opal$==']("document")) {
          return 0
        } else if ((opal$a = ((opal$b = parent !== false && parent !== nil) ? (opal$c = context['opal$==']("section"), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          return parent.opal$level()
          } else {
          return nil
        }; return nil; })();
        self.next_section_index = 0;
        return self.next_section_number = 1;
      };

      def['opal$block?'] = function() {
        var self = this;
        return true;
      };

      def['opal$inline?'] = function() {
        var self = this;
        return false;
      };

      def['opal$context='] = function(context) {
        var self = this;
        self.context = context;
        return self.node_name = context.opal$to_s();
      };

      def.opal$convert = function() {
        var self = this;
        self.document.opal$playback_attributes(self.attributes);
        return self.opal$converter().opal$convert(self);
      };

      opal$opal.defn(self, 'opal$render', def.opal$convert);

      def.opal$content = function() {
        var opal$a, opal$b, TMP_2, self = this;
        return (opal$a = (opal$b = self.blocks).opal$map, opal$a._p = (TMP_2 = function(b){var self = TMP_2._s || this;if (b == null) b = nil;
        return b.opal$convert()}, TMP_2._s = self, TMP_2), opal$a).call(opal$b)['opal$*'](opal$scope.EOL);
      };

      def['opal$sub?'] = function(name) {
        var self = this;
        return self.subs['opal$include?'](name);
      };

      def['opal$title?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.title['opal$nil_or_empty?'](), (opal$a === nil || opal$a === false));
      };

      def.opal$title = function() {
        var opal$a, opal$b, self = this;
        if ((opal$a = ((opal$b = self['subbed_title'], opal$b != null && opal$b !== nil) ? 'instance-variable' : nil)) !== false && opal$a !== nil) {
          return self.subbed_title
        } else if ((opal$a = self.title) !== false && opal$a !== nil) {
          return self.subbed_title = self.opal$apply_title_subs(self.title)
          } else {
          return self.title
        };
      };

      def.opal$captioned_title = function() {
        var self = this;
        return "" + (self.caption) + (self.opal$title());
      };

      def['opal$blocks?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.blocks['opal$empty?'](), (opal$a === nil || opal$a === false));
      };

      def['opal$<<'] = function(block) {
        var self = this;
        return self.blocks['opal$<<'](block);
      };

      def.opal$sections = function() {
        var opal$a, opal$b, TMP_3, self = this;
        return (opal$a = (opal$b = self.blocks).opal$select, opal$a._p = (TMP_3 = function(block){var self = TMP_3._s || this;if (block == null) block = nil;
        return block.opal$context()['opal$==']("section")}, TMP_3._s = self, TMP_3), opal$a).call(opal$b);
      };

      def.opal$remove_sub = function(sub) {
        var self = this;
        self.subs.opal$delete(sub);
        return nil;
      };

      def.opal$assign_caption = function(caption, key) {
        var opal$a, opal$b, opal$c, self = this, value = nil, caption_key = nil, caption_title = nil, caption_num = nil;
        if (caption == null) {
          caption = nil
        }
        if (key == null) {
          key = nil
        }
        if ((opal$a = (((opal$b = self['opal$title?']()) !== false && opal$b !== nil) ? opal$b : (opal$c = self.caption, (opal$c === nil || opal$c === false)))) === false || opal$a === nil) {
          return nil};
        if (caption !== false && caption !== nil) {
          self.caption = caption
        } else if ((opal$a = (value = self.document.opal$attributes()['opal$[]']("caption"))) !== false && opal$a !== nil) {
          self.caption = value
        } else if ((opal$a = self['opal$title?']()) !== false && opal$a !== nil) {
          (((opal$a = key) !== false && opal$a !== nil) ? opal$a : key = self.context.opal$to_s());
          caption_key = "" + (key) + "-caption";
          if ((opal$a = (caption_title = self.document.opal$attributes()['opal$[]'](caption_key))) !== false && opal$a !== nil) {
            caption_num = self.document.opal$counter_increment("" + (key) + "-number", self);
            self.caption = "" + (caption_title) + " " + (caption_num) + ". ";};};
        return nil;
      };

      def.opal$assign_index = function(section) {
        var opal$a, opal$b, opal$c, opal$d, self = this, appendix_number = nil, caption = nil;
        section['opal$index='](self.next_section_index);
        self.next_section_index = self.next_section_index['opal$+'](1);
        if (section.opal$sectname()['opal$==']("appendix")) {
          appendix_number = self.document.opal$counter("appendix-number", "A");
          if ((opal$a = section.opal$numbered()) !== false && opal$a !== nil) {
            section['opal$number='](appendix_number)};
          if ((opal$a = (opal$b = ((caption = self.document.opal$attr("appendix-caption", "")))['opal$=='](""), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            return section['opal$caption=']("" + (caption) + " " + (appendix_number) + ": ")
            } else {
            return section['opal$caption=']("" + (appendix_number) + ". ")
          };
        } else if ((opal$a = section.opal$numbered()) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = ((((opal$c = section.opal$level()['opal$=='](1)) !== false && opal$c !== nil) ? opal$c : (((opal$d = section.opal$level()['opal$=='](0)) ? section.opal$special() : opal$d)))), opal$b !== false && opal$b !== nil ?self.document.opal$doctype()['opal$==']("book") : opal$b)) !== false && opal$a !== nil) {
            return section['opal$number='](self.document.opal$counter("chapter-number", 1))
            } else {
            section['opal$number='](self.next_section_number);
            return self.next_section_number = self.next_section_number['opal$+'](1);
          }
          } else {
          return nil
        };
      };

      return (def.opal$reindex_sections = function() {
        var opal$a, opal$b, TMP_4, self = this;
        self.next_section_index = 0;
        self.next_section_number = 0;
        return (opal$a = (opal$b = self.blocks).opal$each, opal$a._p = (TMP_4 = function(block){var self = TMP_4._s || this;if (block == null) block = nil;
        if (block.opal$context()['opal$==']("section")) {
            self.opal$assign_index(block);
            return block.opal$reindex_sections();
            } else {
            return nil
          }}, TMP_4._s = self, TMP_4), opal$a).call(opal$b);
      }, nil);
    })(self, opal$scope.AbstractNode)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$AttributeList(){};
      var self = opal$AttributeList = opal$klass(opal$base, opal$super, 'AttributeList', opal$AttributeList);

      var def = opal$AttributeList._proto, opal$scope = opal$AttributeList._scope;
      def.attributes = def.scanner = def.delimiter = def.block = def.delimiter_skip_pattern = def.delimiter_boundary_pattern = nil;
      opal$opal.cdecl(opal$scope, 'BoundaryRxs', opal$hash2(["\"", "'", ","], {"\"": /.*?[^\\](?=")/, "'": /.*?[^\\](?=')/, ",": /.*?(?=[ \t]*(,|opal$))/}));

      opal$opal.cdecl(opal$scope, 'EscapedQuoteRxs', opal$hash2(["\"", "'"], {"\"": /\\"/, "'": /\\'/}));

      opal$opal.cdecl(opal$scope, 'NameRx', /[A-Za-z:_][A-Za-z:_\-.]*/);

      opal$opal.cdecl(opal$scope, 'BlankRx', /[ \t]+/);

      opal$opal.cdecl(opal$scope, 'SkipRxs', opal$hash2(["blank", ","], {"blank": opal$scope.BlankRx, ",": /[ \t]*(,|opal$)/}));

      def.opal$initialize = function(source, block, delimiter) {
        var opal$a, self = this;
        if (block == null) {
          block = nil
        }
        if (delimiter == null) {
          delimiter = ","
        }
        self.scanner = ((opal$a = opal$opal.Object._scope.StringScanner) == null ? opal$opal.cm('StringScanner') : opal$a).opal$new(source);
        self.block = block;
        self.delimiter = delimiter;
        self.delimiter_skip_pattern = opal$scope.SkipRxs['opal$[]'](delimiter);
        self.delimiter_boundary_pattern = opal$scope.BoundaryRxs['opal$[]'](delimiter);
        return self.attributes = nil;
      };

      def.opal$parse_into = function(attributes, posattrs) {
        var self = this;
        if (posattrs == null) {
          posattrs = []
        }
        return attributes.opal$update(self.opal$parse(posattrs));
      };

      def.opal$parse = function(posattrs) {
        var opal$a, opal$b, self = this, index = nil;
        if (posattrs == null) {
          posattrs = []
        }
        if ((opal$a = self.attributes) !== false && opal$a !== nil) {
          return self.attributes};
        self.attributes = opal$hash2([], {});
        index = 0;
        while ((opal$b = self.opal$parse_attribute(index, posattrs)) !== false && opal$b !== nil) {
        if ((opal$b = self.scanner['opal$eos?']()) !== false && opal$b !== nil) {
          break;};
        self.opal$skip_delimiter();
        index = index['opal$+'](1);};
        return self.attributes;
      };

      def.opal$rekey = function(posattrs) {
        var self = this;
        return opal$scope.AttributeList.opal$rekey(self.attributes, posattrs);
      };

      opal$opal.defs(self, 'opal$rekey', function(attributes, pos_attrs) {
        var opal$a, opal$b, TMP_1, self = this;
        (opal$a = (opal$b = pos_attrs).opal$each_with_index, opal$a._p = (TMP_1 = function(key, index){var self = TMP_1._s || this, opal$a, pos = nil, val = nil;if (key == null) key = nil;if (index == null) index = nil;
        if ((opal$a = key) === false || opal$a === nil) {
            return nil;};
          pos = index['opal$+'](1);
          if ((opal$a = (val = attributes['opal$[]'](pos))) !== false && opal$a !== nil) {
            return attributes['opal$[]='](key, val)
            } else {
            return nil
          };}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
        return attributes;
      });

      def.opal$parse_attribute = function(index, pos_attrs) {
        var opal$a, opal$b, opal$c, TMP_2, self = this, single_quoted_value = nil, first = nil, name = nil, value = nil, skipped = nil, c = nil, resolved_value = nil, opal$case = nil, resolved_name = nil, pos_name = nil;
        if (index == null) {
          index = 0
        }
        if (pos_attrs == null) {
          pos_attrs = []
        }
        single_quoted_value = false;
        self.opal$skip_blank();
        if (((first = self.scanner.opal$peek(1)))['opal$==']("\"")) {
          name = self.opal$parse_attribute_value(self.scanner.opal$get_byte());
          value = nil;
        } else if (first['opal$==']("'")) {
          name = self.opal$parse_attribute_value(self.scanner.opal$get_byte());
          value = nil;
          single_quoted_value = true;
          } else {
          name = self.opal$scan_name();
          skipped = 0;
          c = nil;
          if ((opal$a = self.scanner['opal$eos?']()) !== false && opal$a !== nil) {
            if ((opal$a = name) === false || opal$a === nil) {
              return false}
            } else {
            skipped = (((opal$a = self.opal$skip_blank()) !== false && opal$a !== nil) ? opal$a : 0);
            c = self.scanner.opal$get_byte();
          };
          if ((opal$a = (((opal$b = (opal$c = c, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : c['opal$=='](self.delimiter))) !== false && opal$a !== nil) {
            value = nil
          } else if ((opal$a = (((opal$b = (opal$c = c['opal$==']("="), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : (opal$c = name, (opal$c === nil || opal$c === false)))) !== false && opal$a !== nil) {
            name = "" + (name) + (" "['opal$*'](skipped)) + (c) + (self.opal$scan_to_delimiter());
            value = nil;
            } else {
            self.opal$skip_blank();
            if ((opal$a = self.scanner.opal$peek(1)) !== false && opal$a !== nil) {
              if (((c = self.scanner.opal$get_byte()))['opal$==']("\"")) {
                value = self.opal$parse_attribute_value(c)
              } else if (c['opal$==']("'")) {
                value = self.opal$parse_attribute_value(c);
                single_quoted_value = true;
              } else if (c['opal$=='](self.delimiter)) {
                value = nil
                } else {
                value = "" + (c) + (self.opal$scan_to_delimiter());
                if (value['opal$==']("None")) {
                  return true};
              }};
          };
        };
        if (value !== false && value !== nil) {
          resolved_value = (function() {opal$case = name;if ("options"['opal$==='](opal$case) || "opts"['opal$==='](opal$case)) {name = "options";
          (opal$a = (opal$b = value.opal$split(",")).opal$each, opal$a._p = (TMP_2 = function(o){var self = TMP_2._s || this;
            if (self.attributes == null) self.attributes = nil;
if (o == null) o = nil;
          return self.attributes['opal$[]=']("" + (o.opal$strip()) + "-option", "")}, TMP_2._s = self, TMP_2), opal$a).call(opal$b);
          return value;}else if ("title"['opal$==='](opal$case)) {return value}else {if ((opal$a = ((opal$c = single_quoted_value !== false && single_quoted_value !== nil) ? self.block : opal$c)) !== false && opal$a !== nil) {
            return (self.block.opal$apply_normal_subs(value))
            } else {
            return value
          }}})();
          self.attributes['opal$[]='](name, resolved_value);
          } else {
          resolved_name = (function() {if ((opal$a = ((opal$c = single_quoted_value !== false && single_quoted_value !== nil) ? self.block : opal$c)) !== false && opal$a !== nil) {
            return (self.block.opal$apply_normal_subs(name))
            } else {
            return name
          }; return nil; })();
          if ((opal$a = (pos_name = pos_attrs['opal$[]'](index))) !== false && opal$a !== nil) {
            self.attributes['opal$[]='](pos_name, resolved_name)};
          self.attributes['opal$[]='](index['opal$+'](1), resolved_name);
        };
        return true;
      };

      def.opal$parse_attribute_value = function(quote) {
        var opal$a, self = this, value = nil;
        if (self.scanner.opal$peek(1)['opal$=='](quote)) {
          self.scanner.opal$get_byte();
          return "";};
        if ((opal$a = (value = self.opal$scan_to_quote(quote))) !== false && opal$a !== nil) {
          self.scanner.opal$get_byte();
          return value.opal$gsub(opal$scope.EscapedQuoteRxs['opal$[]'](quote), quote);
          } else {
          return "" + (quote) + (self.opal$scan_to_delimiter())
        };
      };

      def.opal$skip_blank = function() {
        var self = this;
        return self.scanner.opal$skip(opal$scope.BlankRx);
      };

      def.opal$skip_delimiter = function() {
        var self = this;
        return self.scanner.opal$skip(self.delimiter_skip_pattern);
      };

      def.opal$scan_name = function() {
        var self = this;
        return self.scanner.opal$scan(opal$scope.NameRx);
      };

      def.opal$scan_to_delimiter = function() {
        var self = this;
        return self.scanner.opal$scan(self.delimiter_boundary_pattern);
      };

      return (def.opal$scan_to_quote = function(quote) {
        var self = this;
        return self.scanner.opal$scan(opal$scope.BoundaryRxs['opal$[]'](quote));
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Block(){};
      var self = opal$Block = opal$klass(opal$base, opal$super, 'Block', opal$Block);

      var def = opal$Block._proto, opal$scope = opal$Block._scope, opal$a, TMP_1, TMP_2;
      def.subs = def.attributes = def.content_model = def.lines = def.blocks = def.context = def.style = nil;
      opal$opal.cdecl(opal$scope, 'DEFAULT_CONTENT_MODEL', ((opal$a = opal$opal.Object._scope.Hash) == null ? opal$opal.cm('Hash') : opal$a).opal$new("simple").opal$merge(opal$hash2(["audio", "image", "listing", "literal", "math", "open", "page_break", "pass", "thematic_break", "video"], {"audio": "empty", "image": "empty", "listing": "verbatim", "literal": "verbatim", "math": "raw", "open": "compound", "page_break": "empty", "pass": "raw", "thematic_break": "empty", "video": "empty"})));

      opal$opal.defn(self, 'opal$blockname', def.opal$context);

      self.opal$attr_accessor("lines");

      def.opal$initialize = TMP_1 = function(parent, context, opts) {
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil, attrs = nil, subs = nil, raw_source = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [parent, context]);
        self.content_model = (((opal$a = opts['opal$[]']("content_model")) !== false && opal$a !== nil) ? opal$a : opal$scope.DEFAULT_CONTENT_MODEL['opal$[]'](context));
        if ((opal$a = ((attrs = opts['opal$[]']("attributes")))['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          self.attributes = opal$hash2([], {})
          } else {
          self.attributes = attrs.opal$dup()
        };
        if ((opal$a = opts['opal$has_key?']("subs")) !== false && opal$a !== nil) {
          if ((opal$a = (((opal$b = (opal$c = (subs = opts['opal$[]']("subs")), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : (subs['opal$is_a?'](((opal$c = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$c))))) !== false && opal$a !== nil) {
            self.subs = (((opal$a = subs) !== false && opal$a !== nil) ? opal$a : []);
            self.default_subs = self.subs.opal$dup();
            self.attributes.opal$delete("subs");
            } else {
            self.attributes['opal$[]=']("subs", "" + (subs))
          }};
        if ((opal$a = (opal$b = (raw_source = opts['opal$[]']("source")), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return self.lines = []
        } else if ((opal$a = raw_source['opal$is_a?'](((opal$b = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$b))) !== false && opal$a !== nil) {
          return self.lines = opal$scope.Helpers.opal$normalize_lines_from_string(raw_source)
          } else {
          return self.lines = raw_source.opal$dup()
        };
      };

      def.opal$content = TMP_2 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_2._p, opal$yield = opal$iter || nil, opal$case = nil, result = nil, first = nil, last = nil;
        TMP_2._p = null;
        return (function() {opal$case = self.content_model;if ("compound"['opal$==='](opal$case)) {return opal$opal.find_super_dispatcher(self, 'content', TMP_2, opal$iter).apply(self, opal$zuper)}else if ("simple"['opal$==='](opal$case)) {return self.opal$apply_subs(self.lines['opal$*'](opal$scope.EOL), self.subs)}else if ("verbatim"['opal$==='](opal$case) || "raw"['opal$==='](opal$case)) {result = self.opal$apply_subs(self.lines, self.subs);
        if (result.opal$size()['opal$<'](2)) {
          return result['opal$[]'](0)
          } else {
          while ((opal$b = (opal$c = (first = result['opal$[]'](0)), opal$c !== false && opal$c !== nil ?first.opal$rstrip()['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          result.opal$shift()};
          while ((opal$b = (opal$c = (last = result['opal$[]'](-1)), opal$c !== false && opal$c !== nil ?last.opal$rstrip()['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          result.opal$pop()};
          return result['opal$*'](opal$scope.EOL);
        };}else {if ((opal$a = self.content_model['opal$==']("empty")) === false || opal$a === nil) {
          self.opal$warn("Unknown content model '" + (self.content_model) + "' for block: " + (self.opal$to_s()))};
        return nil;}})();
      };

      def.opal$source = function() {
        var self = this;
        return self.lines['opal$*'](opal$scope.EOL);
      };

      return (def.opal$to_s = function() {
        var self = this, content_summary = nil;
        content_summary = (function() {if (self.content_model['opal$==']("compound")) {
          return "blocks: " + (self.blocks.opal$size())
          } else {
          return "lines: " + (self.lines.opal$size())
        }; return nil; })();
        return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {context: " + (self.context.opal$inspect()) + ", content_model: " + (self.content_model.opal$inspect()) + ", style: " + (self.style.opal$inspect()) + ", " + (content_summary) + "}>";
      }, nil);
    })(self, opal$scope.AbstractBlock)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Callouts(){};
      var self = opal$Callouts = opal$klass(opal$base, opal$super, 'Callouts', opal$Callouts);

      var def = opal$Callouts._proto, opal$scope = opal$Callouts._scope;
      def.co_index = def.lists = def.list_index = nil;
      def.opal$initialize = function() {
        var self = this;
        self.lists = [];
        self.list_index = 0;
        return self.opal$next_list();
      };

      def.opal$register = function(li_ordinal) {
        var self = this, id = nil;
        self.opal$current_list()['opal$<<'](opal$hash2(["ordinal", "id"], {"ordinal": li_ordinal.opal$to_i(), "id": (id = self.opal$generate_next_callout_id())}));
        self.co_index = self.co_index['opal$+'](1);
        return id;
      };

      def.opal$read_next_id = function() {
        var self = this, id = nil, list = nil;
        id = nil;
        list = self.opal$current_list();
        if (self.co_index['opal$<='](list.opal$size())) {
          id = list['opal$[]'](self.co_index['opal$-'](1))['opal$[]']("id")};
        self.co_index = self.co_index['opal$+'](1);
        return id;
      };

      def.opal$callout_ids = function(li_ordinal) {
        var opal$a, opal$b, TMP_1, self = this;
        return (opal$a = (opal$b = self.opal$current_list()).opal$map, opal$a._p = (TMP_1 = function(element){var self = TMP_1._s || this;if (element == null) element = nil;
        if (element['opal$[]']("ordinal")['opal$=='](li_ordinal)) {
            return "" + (element['opal$[]']("id")) + " "
            } else {
            return nil
          }}, TMP_1._s = self, TMP_1), opal$a).call(opal$b).opal$join().opal$chop();
      };

      def.opal$current_list = function() {
        var self = this;
        return self.lists['opal$[]'](self.list_index['opal$-'](1));
      };

      def.opal$next_list = function() {
        var self = this;
        self.list_index = self.list_index['opal$+'](1);
        if (self.lists.opal$size()['opal$<'](self.list_index)) {
          self.lists['opal$<<']([])};
        self.co_index = 1;
        return nil;
      };

      def.opal$rewind = function() {
        var self = this;
        self.list_index = 1;
        self.co_index = 1;
        return nil;
      };

      def.opal$generate_next_callout_id = function() {
        var self = this;
        return self.opal$generate_callout_id(self.list_index, self.co_index);
      };

      return (def.opal$generate_callout_id = function(list_index, co_index) {
        var self = this;
        return "CO" + (list_index) + "-" + (co_index);
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope, opal$a;
    if ((opal$a = opal$scope.RUBY_ENGINE_OPAL) !== false && opal$a !== nil) {
      (function(opal$base) {
        var self = opal$module(opal$base, 'Converter');

        var def = self._proto, opal$scope = self._scope;
        nil
        
      })(self)};

    (function(opal$base, opal$super) {
      function opal$Base(){};
      var self = opal$Base = opal$klass(opal$base, opal$super, 'Base', opal$Base);

      var def = opal$Base._proto, opal$scope = opal$Base._scope;
      return self.opal$include(opal$scope.Converter)
    })(opal$scope.Converter, null);

    (function(opal$base, opal$super) {
      function opal$BuiltIn(){};
      var self = opal$BuiltIn = opal$klass(opal$base, opal$super, 'BuiltIn', opal$BuiltIn);

      var def = opal$BuiltIn._proto, opal$scope = opal$BuiltIn._scope;
      def.opal$initialize = function(backend, opts) {
        var self = this;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        return nil;
      };

      def.opal$convert = function(node, transform) {
        var opal$a, self = this;
        if (transform == null) {
          transform = nil
        }
        (((opal$a = transform) !== false && opal$a !== nil) ? opal$a : transform = node.opal$node_name());
        return self.opal$send(transform, node);
      };

      def.opal$convert_with_options = function(node, transform, opts) {
        var opal$a, self = this;
        if (transform == null) {
          transform = nil
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        (((opal$a = transform) !== false && opal$a !== nil) ? opal$a : transform = node.opal$node_name());
        return self.opal$send(transform, node, opts);
      };

      opal$opal.defn(self, 'opal$handles?', def['opal$respond_to?']);

      def.opal$content = function(node) {
        var self = this;
        return node.opal$content();
      };

      opal$opal.defn(self, 'opal$pass', def.opal$content);

      return (def.opal$skip = function(node) {
        var self = this;
        return nil;
      }, nil);
    })(opal$scope.Converter, null);
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base) {
      var self = opal$module(opal$base, 'Converter');

      var def = self._proto, opal$scope = self._scope;
      (function(opal$base, opal$super) {
        function opal$Factory(){};
        var self = opal$Factory = opal$klass(opal$base, opal$super, 'Factory', opal$Factory);

        var def = opal$Factory._proto, opal$scope = opal$Factory._scope;
        def.converters = def.star_converter = nil;
        self.__default__ = nil;

        (function(self) {
          var opal$scope = self._scope, def = self._proto;
          self._proto.opal$default = function(initialize_singleton) {
            var opal$a, opal$b, self = this;
            if (self.__default__ == null) self.__default__ = nil;

            if (initialize_singleton == null) {
              initialize_singleton = true
            }
            if ((opal$a = initialize_singleton) === false || opal$a === nil) {
              return (((opal$a = self.__default__) !== false && opal$a !== nil) ? opal$a : self.opal$new())};
            return (((opal$a = self.__default__) !== false && opal$a !== nil) ? opal$a : self.__default__ = (function() { try {
            (function() {if ((opal$b = (opal$opal.Object._scope.ThreadSafe == null ? nil : 'constant')) !== false && opal$b !== nil) {
                return nil
                } else {
                return true
              }; return nil; })()
              self.opal$new((((opal$b = opal$opal.Object._scope.ThreadSafe) == null ? opal$opal.cm('ThreadSafe') : opal$b))._scope.Cache.opal$new())
            } catch (opal$err) {if (true) {
              self.opal$warn("asciidoctor: WARNING: gem 'thread_safe' is not installed. This gem recommended when registering custom converters.")
              self.opal$new()
              }else { throw opal$err; }
            }})());
          };
          self._proto.opal$register = function(converter, backends) {
            var self = this;
            if (backends == null) {
              backends = ["*"]
            }
            return self.opal$default().opal$register(converter, backends);
          };
          self._proto.opal$resolve = function(backend) {
            var self = this;
            return self.opal$default().opal$resolve(backend);
          };
          self._proto.opal$converters = function() {
            var self = this;
            return self.opal$default().opal$converters();
          };
          return (self._proto.opal$unregister_all = function() {
            var self = this;
            return self.opal$default().opal$unregister_all();
          }, nil);
        })(self.opal$singleton_class());

        self.opal$attr_reader("converters");

        def.opal$initialize = function(converters) {
          var opal$a, self = this;
          if (converters == null) {
            converters = nil
          }
          self.converters = (((opal$a = converters) !== false && opal$a !== nil) ? opal$a : opal$hash2([], {}));
          return self.star_converter = nil;
        };

        def.opal$register = function(converter, backends) {
          var opal$a, opal$b, TMP_1, self = this;
          if (backends == null) {
            backends = ["*"]
          }
          (opal$a = (opal$b = backends).opal$each, opal$a._p = (TMP_1 = function(backend){var self = TMP_1._s || this;
            if (self.converters == null) self.converters = nil;
if (backend == null) backend = nil;
          self.converters['opal$[]='](backend, converter);
            if (backend['opal$==']("*")) {
              return self.star_converter = converter
              } else {
              return nil
            };}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
          return nil;
        };

        def.opal$resolve = function(backend) {
          var opal$a, opal$b, self = this;
          return (opal$a = self.converters, opal$a !== false && opal$a !== nil ?((((opal$b = self.converters['opal$[]'](backend)) !== false && opal$b !== nil) ? opal$b : self.star_converter)) : opal$a);
        };

        def.opal$unregister_all = function() {
          var self = this;
          self.converters.opal$clear();
          return self.star_converter = nil;
        };

        return (def.opal$create = function(backend, opts) {
          var opal$a, opal$b, self = this, converter = nil, base_converter = nil, opal$case = nil, template_converter = nil;
          if (opts == null) {
            opts = opal$hash2([], {})
          }
          if ((opal$a = (converter = self.opal$resolve(backend))) !== false && opal$a !== nil) {
            if ((opal$a = converter['opal$is_a?'](((opal$b = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$b))) !== false && opal$a !== nil) {
              return converter.opal$new(backend, opts)
              } else {
              return converter
            }};
          base_converter = (function() {opal$case = backend;if ("html5"['opal$==='](opal$case)) {if ((opal$a = (function(){ try { return ((((((opal$b = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$b))._scope.Converter)._scope.Html5Converter) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })()) === false || opal$a === nil) {
            };
          return opal$scope.Html5Converter.opal$new(backend, opts);}else if ("docbook5"['opal$==='](opal$case)) {if ((opal$a = (function(){ try { return ((((((opal$b = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$b))._scope.Converter)._scope.DocBook5Converter) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })()) === false || opal$a === nil) {
            };
          return opal$scope.DocBook5Converter.opal$new(backend, opts);}else if ("docbook45"['opal$==='](opal$case)) {if ((opal$a = (function(){ try { return ((((((opal$b = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$b))._scope.Converter)._scope.DocBook45Converter) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })()) === false || opal$a === nil) {
            };
          return opal$scope.DocBook45Converter.opal$new(backend, opts);}else { return nil }})();
          if ((opal$a = opts['opal$key?']("template_dirs")) === false || opal$a === nil) {
            return base_converter};
          if ((opal$a = (function(){ try { return ((((((opal$b = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$b))._scope.Converter)._scope.TemplateConverter) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })()) === false || opal$a === nil) {
            };
          if ((opal$a = (function(){ try { return ((((((opal$b = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$b))._scope.Converter)._scope.CompositeConverter) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })()) === false || opal$a === nil) {
            };
          template_converter = opal$scope.TemplateConverter.opal$new(backend, opts['opal$[]']("template_dirs"), opts);
          return opal$scope.CompositeConverter.opal$new(backend, template_converter, base_converter);
        }, nil);
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$range = opal$opal.range, opal$hash2 = opal$opal.hash2;
  (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base) {
      var self = opal$module(opal$base, 'Converter');

      var def = self._proto, opal$scope = self._scope;
      (function(opal$base) {
        var self = opal$module(opal$base, 'Config');

        var def = self._proto, opal$scope = self._scope;
        def.opal$register_for = function(backends) {
          var opal$a, opal$b, TMP_1, opal$c, TMP_2, self = this, metaclass = nil;
          backends = opal$slice.call(arguments, 0);
          opal$scope.Factory.opal$register(self, backends);
          metaclass = (function(self) {
            var opal$scope = self._scope, def = self._proto;
            return self
          })(self.opal$singleton_class());
          if (backends['opal$=='](["*"])) {
            (opal$a = (opal$b = metaclass).opal$send, opal$a._p = (TMP_1 = function(name){var self = TMP_1._s || this;if (name == null) name = nil;
            return true}, TMP_1._s = self, TMP_1), opal$a).call(opal$b, "define_method", "converts?")
            } else {
            (opal$a = (opal$c = metaclass).opal$send, opal$a._p = (TMP_2 = function(name){var self = TMP_2._s || this;if (name == null) name = nil;
            return backends['opal$include?'](name)}, TMP_2._s = self, TMP_2), opal$a).call(opal$c, "define_method", "converts?")
          };
          return nil;
        }
                ;opal$opal.donate(self, ["opal$register_for"]);
      })(self);

      (function(opal$base) {
        var self = opal$module(opal$base, 'BackendInfo');

        var def = self._proto, opal$scope = self._scope;
        def.opal$backend_info = function() {
          var opal$a, self = this;
          if (self.backend_info == null) self.backend_info = nil;

          return (((opal$a = self.backend_info) !== false && opal$a !== nil) ? opal$a : self.backend_info = self.opal$setup_backend_info());
        };

        def.opal$setup_backend_info = function() {
          var opal$a, self = this, base = nil, ext = nil, type = nil, syntax = nil;
          if (self.backend == null) self.backend = nil;

          if ((opal$a = self.backend) === false || opal$a === nil) {
            self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a), "Cannot determine backend for converter: " + (self.opal$class()))};
          base = self.backend.opal$sub(opal$scope.TrailingDigitsRx, "");
          if ((opal$a = (ext = opal$scope.DEFAULT_EXTENSIONS['opal$[]'](base))) !== false && opal$a !== nil) {
            type = ext['opal$[]'](opal$range(1, -1, false))
            } else {
            base = "html";
            ext = ".html";
            type = "html";
            syntax = "html";
          };
          return opal$hash2(["basebackend", "outfilesuffix", "filetype", "htmlsyntax"], {"basebackend": base, "outfilesuffix": ext, "filetype": type, "htmlsyntax": syntax});
        };

        def.opal$filetype = function(value) {
          var self = this;
          if (value == null) {
            value = nil
          }
          if (value !== false && value !== nil) {
            return self.opal$backend_info()['opal$[]=']("filetype", value)
            } else {
            return self.opal$backend_info()['opal$[]']("filetype")
          };
        };

        def.opal$basebackend = function(value) {
          var self = this;
          if (value == null) {
            value = nil
          }
          if (value !== false && value !== nil) {
            return self.opal$backend_info()['opal$[]=']("basebackend", value)
            } else {
            return self.opal$backend_info()['opal$[]']("basebackend")
          };
        };

        def.opal$outfilesuffix = function(value) {
          var self = this;
          if (value == null) {
            value = nil
          }
          if (value !== false && value !== nil) {
            return self.opal$backend_info()['opal$[]=']("outfilesuffix", value)
            } else {
            return self.opal$backend_info()['opal$[]']("outfilesuffix")
          };
        };

        def.opal$htmlsyntax = function(value) {
          var self = this;
          if (value == null) {
            value = nil
          }
          if (value !== false && value !== nil) {
            return self.opal$backend_info()['opal$[]=']("htmlsyntax", value)
            } else {
            return self.opal$backend_info()['opal$[]']("htmlsyntax")
          };
        };
                ;opal$opal.donate(self, ["opal$backend_info", "opal$setup_backend_info", "opal$filetype", "opal$basebackend", "opal$outfilesuffix", "opal$htmlsyntax"]);
      })(self);

      (function(self) {
        var opal$scope = self._scope, def = self._proto;
        return (self._proto.opal$included = function(converter) {
          var self = this;
          return converter.opal$extend(opal$scope.Config);
        }, nil)
      })(self.opal$singleton_class());

      self.opal$include(opal$scope.Config);

      self.opal$include(opal$scope.BackendInfo);

      def.opal$initialize = function(backend, opts) {
        var self = this;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        self.backend = backend;
        return self.opal$setup_backend_info();
      };

      def.opal$convert = function(node, transform) {
        var opal$a, self = this;
        if (transform == null) {
          transform = nil
        }
        return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
      };

      def.opal$convert_with_options = function(node, transform, opts) {
        var self = this;
        if (transform == null) {
          transform = nil
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        return self.opal$convert(node, transform);
      };
            ;opal$opal.donate(self, ["opal$initialize", "opal$convert", "opal$convert_with_options"]);
    })(self);

    (function(opal$base) {
      var self = opal$module(opal$base, 'Writer');

      var def = self._proto, opal$scope = self._scope;
      def.opal$write = function(output, target) {
        var opal$a, opal$b, TMP_3, opal$c, self = this;
        if ((opal$a = target['opal$respond_to?']("write")) !== false && opal$a !== nil) {
          target.opal$write(output.opal$chomp());
          target.opal$write(opal$scope.EOL);
          } else {
          (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_3 = function(f){var self = TMP_3._s || this;if (f == null) f = nil;
          return f.opal$write(output)}, TMP_3._s = self, TMP_3), opal$a).call(opal$b, target, "w")
        };
        return nil;
      }
            ;opal$opal.donate(self, ["opal$write"]);
    })(self);
    
  })(self);
  ;
  return true;
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Html5Converter(){};
      var self = opal$Html5Converter = opal$klass(opal$base, opal$super, 'Html5Converter', opal$Html5Converter);

      var def = opal$Html5Converter._proto, opal$scope = opal$Html5Converter._scope;
      def.xml_mode = def.void_element_slash = def.stylesheets = nil;
      opal$opal.cdecl(opal$scope, 'QUOTE_TAGS', opal$hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "asciimath", "latexmath"], {"emphasis": ["<em>", "</em>", true], "strong": ["<strong>", "</strong>", true], "monospaced": ["<code>", "</code>", true], "superscript": ["<sup>", "</sup>", true], "subscript": ["<sub>", "</sub>", true], "double": ["&#8220;", "&#8221;", false], "single": ["&#8216;", "&#8217;", false], "asciimath": ["\\opal$", "\\opal$", false], "latexmath": ["\\(", "\\)", false]}));

      opal$scope.QUOTE_TAGS['opal$default=']([nil, nil, nil]);

      def.opal$initialize = function(backend, opts) {
        var opal$a, self = this;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        self.xml_mode = opts['opal$[]']("htmlsyntax")['opal$==']("xml");
        self.void_element_slash = (function() {if ((opal$a = self.xml_mode) !== false && opal$a !== nil) {
          return "/"
          } else {
          return nil
        }; return nil; })();
        return self.stylesheets = opal$scope.Stylesheets.opal$instance();
      };

      def.opal$document = function(node) {
        var opal$a, opal$b, opal$c, TMP_1, opal$d, TMP_2, self = this, result = nil, slash = nil, br = nil, linkcss = nil, lang_attribute = nil, iconfont_stylesheet = nil, opal$case = nil, pygments_style = nil, docinfo_content = nil, body_attrs = nil, authorcount = nil;
        result = [];
        slash = self.void_element_slash;
        br = "<br" + (slash) + ">";
        linkcss = (((opal$a = node.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SECURE)) !== false && opal$a !== nil) ? opal$a : (node['opal$attr?']("linkcss")));
        result['opal$<<']("<!DOCTYPE html>");
        lang_attribute = (function() {if ((opal$a = (node['opal$attr?']("nolang"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return " lang=\"" + (node.opal$attr("lang", "en")) + "\""
        }; return nil; })();
        result['opal$<<']("<html" + ((function() {if ((opal$a = self.xml_mode) !== false && opal$a !== nil) {
          return " xmlns=\"http://www.w3.org/1999/xhtml\""
          } else {
          return nil
        }; return nil; })()) + (lang_attribute) + ">");
        result['opal$<<']("<head>\n<meta charset=\"" + (node.opal$attr("encoding", "UTF-8")) + "\"" + (slash) + ">\n<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"" + (slash) + "><![endif]-->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"" + (slash) + ">\n<meta name=\"generator\" content=\"Asciidoctor " + (node.opal$attr("asciidoctor-version")) + "\"" + (slash) + ">");
        if ((opal$a = node['opal$attr?']("app-name")) !== false && opal$a !== nil) {
          result['opal$<<']("<meta name=\"application-name\" content=\"" + (node.opal$attr("app-name")) + "\"" + (slash) + ">")};
        if ((opal$a = node['opal$attr?']("description")) !== false && opal$a !== nil) {
          result['opal$<<']("<meta name=\"description\" content=\"" + (node.opal$attr("description")) + "\"" + (slash) + ">")};
        if ((opal$a = node['opal$attr?']("keywords")) !== false && opal$a !== nil) {
          result['opal$<<']("<meta name=\"keywords\" content=\"" + (node.opal$attr("keywords")) + "\"" + (slash) + ">")};
        if ((opal$a = node['opal$attr?']("authors")) !== false && opal$a !== nil) {
          result['opal$<<']("<meta name=\"author\" content=\"" + (node.opal$attr("authors")) + "\"" + (slash) + ">")};
        if ((opal$a = node['opal$attr?']("copyright")) !== false && opal$a !== nil) {
          result['opal$<<']("<meta name=\"copyright\" content=\"" + (node.opal$attr("copyright")) + "\"" + (slash) + ">")};
        result['opal$<<']("<title>" + ((((opal$a = node.opal$doctitle(opal$hash2(["sanitize"], {"sanitize": true}))) !== false && opal$a !== nil) ? opal$a : node.opal$attr("untitled-label"))) + "</title>");
        if ((opal$a = opal$scope.DEFAULT_STYLESHEET_KEYS['opal$include?'](node.opal$attr("stylesheet"))) !== false && opal$a !== nil) {
          if (linkcss !== false && linkcss !== nil) {
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$normalize_web_path(opal$scope.DEFAULT_STYLESHEET_NAME, (node.opal$attr("stylesdir", "")))) + "\"" + (slash) + ">")
            } else {
            result['opal$<<'](self.stylesheets.opal$embed_primary_stylesheet())
          }
        } else if ((opal$a = node['opal$attr?']("stylesheet")) !== false && opal$a !== nil) {
          if (linkcss !== false && linkcss !== nil) {
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$normalize_web_path((node.opal$attr("stylesheet")), (node.opal$attr("stylesdir", "")))) + "\"" + (slash) + ">")
            } else {
            result['opal$<<']("<style>\n" + (node.opal$read_asset(node.opal$normalize_system_path((node.opal$attr("stylesheet")), (node.opal$attr("stylesdir", ""))), true)) + "\n</style>")
          }};
        if ((opal$a = node['opal$attr?']("icons", "font")) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = (node.opal$attr("iconfont-remote", ""))['opal$nil?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$attr("iconfont-cdn", "http://cdnjs.cloudflare.com/ajax/libs/font-awesome/3.2.1/css/font-awesome.min.css")) + "\"" + (slash) + ">")
            } else {
            iconfont_stylesheet = "" + (node.opal$attr("iconfont-name", "font-awesome")) + ".css";
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$normalize_web_path(iconfont_stylesheet, (node.opal$attr("stylesdir", "")))) + "\"" + (slash) + ">");
          }};
        opal$case = node.opal$attr("source-highlighter");if ("coderay"['opal$==='](opal$case)) {if ((node.opal$attr("coderay-css", "class"))['opal$==']("class")) {
          if (linkcss !== false && linkcss !== nil) {
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$normalize_web_path(self.stylesheets.opal$coderay_stylesheet_name(), (node.opal$attr("stylesdir", "")))) + "\"" + (slash) + ">")
            } else {
            result['opal$<<'](self.stylesheets.opal$embed_coderay_stylesheet())
          }}}else if ("pygments"['opal$==='](opal$case)) {if ((node.opal$attr("pygments-css", "class"))['opal$==']("class")) {
          pygments_style = (self.opal$doc().opal$attr("pygments-style", "pastie"));
          if (linkcss !== false && linkcss !== nil) {
            result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$normalize_web_path(self.stylesheets.opal$pygments_stylesheet_name(pygments_style), (node.opal$attr("stylesdir", "")))) + "\"" + (slash) + ">")
            } else {
            result['opal$<<']((self.stylesheets.opal$instance().opal$embed_pygments_stylesheet(pygments_style)))
          };}}else if ("highlightjs"['opal$==='](opal$case) || "highlight.js"['opal$==='](opal$case)) {result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$attr("highlightjsdir", "http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4")) + "/styles/" + (node.opal$attr("highlightjs-theme", "googlecode")) + ".min.css\"" + (slash) + ">\n<script src=\"" + (node.opal$attr("highlightjsdir", "http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4")) + "/highlight.min.js\"></script>\n<script src=\"" + (node.opal$attr("highlightjsdir", "http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.4")) + "/lang/common.min.js\"></script>\n<script>hljs.initHighlightingOnLoad()</script>")}else if ("prettify"['opal$==='](opal$case)) {result['opal$<<']("<link rel=\"stylesheet\" href=\"" + (node.opal$attr("prettifydir", "http://cdnjs.cloudflare.com/ajax/libs/prettify/r298")) + "/" + (node.opal$attr("prettify-theme", "prettify")) + ".min.css\"" + (slash) + ">\n<script src=\"" + (node.opal$attr("prettifydir", "http://cdnjs.cloudflare.com/ajax/libs/prettify/r298")) + "/prettify.min.js\"></script>\n<script>document.addEventListener('DOMContentLoaded', prettyPrint)</script>")};
        if ((opal$a = node['opal$attr?']("math")) !== false && opal$a !== nil) {
          result['opal$<<']("<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {\n    inlineMath: [" + (opal$scope.INLINE_MATH_DELIMITERS['opal$[]']("latexmath")) + "],\n    displayMath: [" + (opal$scope.BLOCK_MATH_DELIMITERS['opal$[]']("latexmath")) + "],\n    ignoreClass: \"nomath|nolatexmath\"\n  },\n  asciimath2jax: {\n    delimiters: [" + (opal$scope.BLOCK_MATH_DELIMITERS['opal$[]']("asciimath")) + "],\n    ignoreClass: \"nomath|noasciimath\"\n  }\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>\n<script>document.addEventListener('DOMContentLoaded', MathJax.Hub.TypeSet)</script>")};
        if ((opal$a = ((docinfo_content = node.opal$docinfo()))['opal$empty?']()) === false || opal$a === nil) {
          result['opal$<<'](docinfo_content)};
        result['opal$<<']("</head>");
        body_attrs = [];
        if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          body_attrs['opal$<<']("id=\"" + (node.opal$id()) + "\"")};
        if ((opal$a = (opal$b = (opal$c = (node['opal$attr?']("toc-class")), opal$c !== false && opal$c !== nil ?(node['opal$attr?']("toc")) : opal$c), opal$b !== false && opal$b !== nil ?(node['opal$attr?']("toc-placement", "auto")) : opal$b)) !== false && opal$a !== nil) {
          body_attrs['opal$<<']("class=\"" + (node.opal$doctype()) + " " + (node.opal$attr("toc-class")) + " toc-" + (node.opal$attr("toc-position", "left")) + "\"")
          } else {
          body_attrs['opal$<<']("class=\"" + (node.opal$doctype()) + "\"")
        };
        if ((opal$a = node['opal$attr?']("max-width")) !== false && opal$a !== nil) {
          body_attrs['opal$<<']("style=\"max-width: " + (node.opal$attr("max-width")) + ";\"")};
        result['opal$<<']("<body " + (body_attrs['opal$*'](" ")) + ">");
        if ((opal$a = node.opal$noheader()) === false || opal$a === nil) {
          result['opal$<<']("<div id=\"header\">");
          if (node.opal$doctype()['opal$==']("manpage")) {
            result['opal$<<']("<h1>" + (node.opal$doctitle()) + " Manual Page</h1>");
            if ((opal$a = (opal$b = (node['opal$attr?']("toc")), opal$b !== false && opal$b !== nil ?(node['opal$attr?']("toc-placement", "auto")) : opal$b)) !== false && opal$a !== nil) {
              result['opal$<<']("<div id=\"toc\" class=\"" + (node.opal$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (node.opal$attr("toc-title")) + "</div>\n" + (self.opal$outline(node)) + "\n</div>")};
            result['opal$<<']("<h2>" + (node.opal$attr("manname-title")) + "</h2>\n<div class=\"sectionbody\">\n<p>" + (node.opal$attr("manname")) + " - " + (node.opal$attr("manpurpose")) + "</p>\n</div>");
            } else {
            if ((opal$a = node['opal$has_header?']()) !== false && opal$a !== nil) {
              if ((opal$a = node.opal$notitle()) === false || opal$a === nil) {
                result['opal$<<']("<h1>" + (node.opal$header().opal$title()) + "</h1>")};
              if ((opal$a = node['opal$attr?']("author")) !== false && opal$a !== nil) {
                result['opal$<<']("<span id=\"author\" class=\"author\">" + (node.opal$attr("author")) + "</span>" + (br));
                if ((opal$a = node['opal$attr?']("email")) !== false && opal$a !== nil) {
                  result['opal$<<']("<span id=\"email\" class=\"email\">" + (node.opal$sub_macros(node.opal$attr("email"))) + "</span>" + (br))};
                if (((authorcount = (node.opal$attr("authorcount")).opal$to_i()))['opal$>'](1)) {
                  (opal$a = (opal$b = (opal$range(2, authorcount, false))).opal$each, opal$a._p = (TMP_1 = function(idx){var self = TMP_1._s || this, opal$a;if (idx == null) idx = nil;
                  result['opal$<<']("<span id=\"author" + (idx) + "\" class=\"author\">" + (node.opal$attr("author_" + (idx))) + "</span>" + (br));
                    if ((opal$a = node['opal$attr?']("email_" + (idx))) !== false && opal$a !== nil) {
                      return result['opal$<<']("<span id=\"email" + (idx) + "\" class=\"email\">" + (node.opal$sub_macros(node.opal$attr("email_" + (idx)))) + "</span>" + (br))
                      } else {
                      return nil
                    };}, TMP_1._s = self, TMP_1), opal$a).call(opal$b)};};
              if ((opal$a = node['opal$attr?']("revnumber")) !== false && opal$a !== nil) {
                result['opal$<<']("<span id=\"revnumber\">" + (((((opal$a = (node.opal$attr("version-label"))) !== false && opal$a !== nil) ? opal$a : "")).opal$downcase()) + " " + (node.opal$attr("revnumber")) + ((function() {if ((opal$a = (node['opal$attr?']("revdate"))) !== false && opal$a !== nil) {
                  return ","
                  } else {
                  return ""
                }; return nil; })()) + "</span>")};
              if ((opal$a = node['opal$attr?']("revdate")) !== false && opal$a !== nil) {
                result['opal$<<']("<span id=\"revdate\">" + (node.opal$attr("revdate")) + "</span>")};
              if ((opal$a = node['opal$attr?']("revremark")) !== false && opal$a !== nil) {
                result['opal$<<']("" + (br) + "<span id=\"revremark\">" + (node.opal$attr("revremark")) + "</span>")};};
            if ((opal$a = (opal$c = (node['opal$attr?']("toc")), opal$c !== false && opal$c !== nil ?(node['opal$attr?']("toc-placement", "auto")) : opal$c)) !== false && opal$a !== nil) {
              result['opal$<<']("<div id=\"toc\" class=\"" + (node.opal$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (node.opal$attr("toc-title")) + "</div>\n" + (self.opal$outline(node)) + "\n</div>")};
          };
          result['opal$<<']("</div>");};
        result['opal$<<']("<div id=\"content\">\n" + (node.opal$content()) + "\n</div>");
        if ((opal$a = (opal$c = node['opal$footnotes?'](), opal$c !== false && opal$c !== nil ?(opal$d = (node['opal$attr?']("nofootnotes")), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$a !== nil) {
          result['opal$<<']("<div id=\"footnotes\">\n<hr" + (slash) + ">");
          (opal$a = (opal$c = node.opal$footnotes()).opal$each, opal$a._p = (TMP_2 = function(footnote){var self = TMP_2._s || this;if (footnote == null) footnote = nil;
          return result['opal$<<']("<div class=\"footnote\" id=\"_footnote_" + (footnote.opal$index()) + "\">\n<a href=\"#_footnoteref_" + (footnote.opal$index()) + "\">" + (footnote.opal$index()) + "</a>. " + (footnote.opal$text()) + "\n</div>")}, TMP_2._s = self, TMP_2), opal$a).call(opal$c);
          result['opal$<<']("</div>");};
        if ((opal$a = node.opal$nofooter()) === false || opal$a === nil) {
          result['opal$<<']("<div id=\"footer\">");
          result['opal$<<']("<div id=\"footer-text\">");
          if ((opal$a = node['opal$attr?']("revnumber")) !== false && opal$a !== nil) {
            result['opal$<<']("" + (node.opal$attr("version-label")) + " " + (node.opal$attr("revnumber")) + (br))};
          if ((opal$a = node['opal$attr?']("last-update-label")) !== false && opal$a !== nil) {
            result['opal$<<']("" + (node.opal$attr("last-update-label")) + " " + (node.opal$attr("docdatetime")))};
          result['opal$<<']("</div>");
          if ((opal$a = ((docinfo_content = node.opal$docinfo("footer")))['opal$empty?']()) === false || opal$a === nil) {
            result['opal$<<'](docinfo_content)};
          result['opal$<<']("</div>");};
        result['opal$<<']("</body>");
        result['opal$<<']("</html>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$embedded = function(node) {
        var opal$a, opal$b, opal$c, TMP_3, self = this, result = nil, id_attr = nil;
        result = [];
        if ((opal$a = (opal$b = (opal$c = node.opal$notitle(), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?node['opal$has_header?']() : opal$b)) !== false && opal$a !== nil) {
          id_attr = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
            return " id=\"" + (node.opal$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          result['opal$<<']("<h1" + (id_attr) + ">" + (node.opal$header().opal$title()) + "</h1>");};
        result['opal$<<'](node.opal$content());
        if ((opal$a = (opal$b = node['opal$footnotes?'](), opal$b !== false && opal$b !== nil ?(opal$c = (node['opal$attr?']("nofootnotes")), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          result['opal$<<']("<div id=\"footnotes\">\n<hr" + (self.void_element_slash) + ">");
          (opal$a = (opal$b = node.opal$footnotes()).opal$each, opal$a._p = (TMP_3 = function(footnote){var self = TMP_3._s || this;if (footnote == null) footnote = nil;
          return result['opal$<<']("<div class=\"footnote\" id=\"_footnote_" + (footnote.opal$index()) + "\">\n<a href=\"#_footnoteref_" + (footnote.opal$index()) + "\">" + (footnote.opal$index()) + "</a> " + (footnote.opal$text()) + "\n</div>")}, TMP_3._s = self, TMP_3), opal$a).call(opal$b);
          result['opal$<<']("</div>");};
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$outline = function(node, opts) {
        var opal$a, opal$b, TMP_4, self = this, sections = nil, sectnumlevels = nil, toclevels = nil, result = nil, slevel = nil, first_section = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = ((sections = node.opal$sections()))['opal$empty?']()) !== false && opal$a !== nil) {
          return nil};
        sectnumlevels = (((opal$a = opts['opal$[]']("sectnumlevels")) !== false && opal$a !== nil) ? opal$a : (node.opal$document().opal$attr("sectnumlevels", 3)).opal$to_i());
        toclevels = (((opal$a = opts['opal$[]']("toclevels")) !== false && opal$a !== nil) ? opal$a : (node.opal$document().opal$attr("toclevels", 2)).opal$to_i());
        result = [];
        slevel = ((first_section = sections['opal$[]'](0))).opal$level();
        if ((opal$a = ((opal$b = slevel['opal$=='](0)) ? first_section.opal$special() : opal$b)) !== false && opal$a !== nil) {
          slevel = 1};
        result['opal$<<']("<ul class=\"sectlevel" + (slevel) + "\">");
        (opal$a = (opal$b = sections).opal$each, opal$a._p = (TMP_4 = function(section){var self = TMP_4._s || this, opal$a, opal$b, opal$c, opal$d, section_num = nil, child_toc_level = nil;if (section == null) section = nil;
        section_num = (function() {if ((opal$a = ((opal$b = (opal$c = section.opal$numbered(), opal$c !== false && opal$c !== nil ?(opal$d = section.opal$caption(), (opal$d === nil || opal$d === false)) : opal$c), opal$b !== false && opal$b !== nil ?section.opal$level()['opal$<='](sectnumlevels) : opal$b))) !== false && opal$a !== nil) {
            return "" + (section.opal$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          result['opal$<<']("<li><a href=\"#" + (section.opal$id()) + "\">" + (section_num) + (section.opal$captioned_title()) + "</a></li>");
          if ((opal$a = ((opal$b = section.opal$level()['opal$<'](toclevels)) ? (child_toc_level = self.opal$outline(section, opal$hash2(["toclevels", "secnumlevels"], {"toclevels": toclevels, "secnumlevels": sectnumlevels}))) : opal$b)) !== false && opal$a !== nil) {
            result['opal$<<']("<li>");
            result['opal$<<'](child_toc_level);
            return result['opal$<<']("</li>");
            } else {
            return nil
          };}, TMP_4._s = self, TMP_4), opal$a).call(opal$b);
        result['opal$<<']("</ul>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$section = function(node) {
        var opal$a, opal$b, opal$c, opal$d, self = this, slevel = nil, htag = nil, id_attr = nil, anchor = nil, link_start = nil, link_end = nil, class_attr = nil, role = nil, sectnum = nil;
        slevel = node.opal$level();
        if ((opal$a = ((opal$b = slevel['opal$=='](0)) ? node.opal$special() : opal$b)) !== false && opal$a !== nil) {
          slevel = 1};
        htag = "h" + (slevel['opal$+'](1));
        id_attr = anchor = link_start = link_end = nil;
        if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          id_attr = " id=\"" + (node.opal$id()) + "\"";
          if ((opal$a = node.opal$document()['opal$attr?']("sectanchors")) !== false && opal$a !== nil) {
            anchor = "<a class=\"anchor\" href=\"#" + (node.opal$id()) + "\"></a>"
          } else if ((opal$a = node.opal$document()['opal$attr?']("sectlinks")) !== false && opal$a !== nil) {
            link_start = "<a class=\"link\" href=\"#" + (node.opal$id()) + "\">";
            link_end = "</a>";};};
        if (slevel['opal$=='](0)) {
          return "<h1" + (id_attr) + " class=\"sect0\">" + (anchor) + (link_start) + (node.opal$title()) + (link_end) + "</h1>\n" + (node.opal$content())
          } else {
          class_attr = (function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
            return " class=\"sect" + (slevel) + " " + (role) + "\""
            } else {
            return " class=\"sect" + (slevel) + "\""
          }; return nil; })();
          sectnum = (function() {if ((opal$a = (opal$b = (opal$c = node.opal$numbered(), opal$c !== false && opal$c !== nil ?(opal$d = node.opal$caption(), (opal$d === nil || opal$d === false)) : opal$c), opal$b !== false && opal$b !== nil ?slevel['opal$<=']((node.opal$document().opal$attr("sectnumlevels", 3)).opal$to_i()) : opal$b)) !== false && opal$a !== nil) {
            return "" + (node.opal$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          return "<div" + (class_attr) + ">\n<" + (htag) + (id_attr) + ">" + (anchor) + (link_start) + (sectnum) + (node.opal$captioned_title()) + (link_end) + "</" + (htag) + ">\n" + ((function() {if (slevel['opal$=='](1)) {
            return "<div class=\"sectionbody\">\n" + (node.opal$content()) + "\n</div>"
            } else {
            return node.opal$content()
          }; return nil; })()) + "\n</div>";
        };
      };

      def.opal$admonition = function(node) {
        var opal$a, self = this, id_attr = nil, name = nil, title_element = nil, caption = nil, role = nil;
        id_attr = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        name = node.opal$attr("name");
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        caption = (function() {if ((opal$a = node.opal$document()['opal$attr?']("icons")) !== false && opal$a !== nil) {
          if ((opal$a = node.opal$document()['opal$attr?']("icons", "font")) !== false && opal$a !== nil) {
            return "<i class=\"icon-" + (name) + "\" title=\"" + (node.opal$caption()) + "\"></i>"
            } else {
            return "<img src=\"" + (node.opal$icon_uri(name)) + "\" alt=\"" + (node.opal$caption()) + "\"" + (self.void_element_slash) + ">"
          }
          } else {
          return "<div class=\"title\">" + (node.opal$caption()) + "</div>"
        }; return nil; })();
        return "<div" + (id_attr) + " class=\"admonitionblock " + (name) + ((opal$a = (role = node.opal$role()), opal$a !== false && opal$a !== nil ?" " + (role) : opal$a)) + "\">\n<table>\n<tr>\n<td class=\"icon\">\n" + (caption) + "\n</td>\n<td class=\"content\">\n" + (title_element) + (node.opal$content()) + "\n</td>\n</tr>\n</table>\n</div>";
      };

      def.opal$audio = function(node) {
        var opal$a, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil;
        xml = node.opal$document()['opal$attr?']("htmlsyntax", "xml");
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["audioblock", node.opal$style(), node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">\n" + (title_element) + "<div class=\"content\">\n<audio src=\"" + (node.opal$media_uri(node.opal$attr("target"))) + "\"" + ((function() {if ((opal$a = (node['opal$option?']("autoplay"))) !== false && opal$a !== nil) {
          return (self.opal$append_boolean_attribute("autoplay", xml))
          } else {
          return nil
        }; return nil; })()) + ((function() {if ((opal$a = (node['opal$option?']("nocontrols"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return (self.opal$append_boolean_attribute("controls", xml))
        }; return nil; })()) + ((function() {if ((opal$a = (node['opal$option?']("loop"))) !== false && opal$a !== nil) {
          return (self.opal$append_boolean_attribute("loop", xml))
          } else {
          return nil
        }; return nil; })()) + ">\nYour browser does not support the audio tag.\n</audio>\n</div>\n</div>";
      };

      def.opal$colist = function(node) {
        var opal$a, opal$b, TMP_5, opal$c, TMP_6, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil;
        result = [];
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["colist", node.opal$style(), node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        result['opal$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<div class=\"title\">" + (node.opal$title()) + "</div>")};
        if ((opal$a = node.opal$document()['opal$attr?']("icons")) !== false && opal$a !== nil) {
          result['opal$<<']("<table>");
          font_icons = node.opal$document()['opal$attr?']("icons", "font");
          (opal$a = (opal$b = node.opal$items()).opal$each_with_index, opal$a._p = (TMP_5 = function(item, i){var self = TMP_5._s || this, num = nil, num_element = nil;
            if (self.void_element_slash == null) self.void_element_slash = nil;
if (item == null) item = nil;if (i == null) i = nil;
          num = i['opal$+'](1);
            num_element = (function() {if (font_icons !== false && font_icons !== nil) {
              return "<i class=\"conum\" data-value=\"" + (num) + "\"></i><b>" + (num) + "</b>"
              } else {
              return "<img src=\"" + (node.opal$icon_uri("callouts/" + (num))) + "\" alt=\"" + (num) + "\"" + (self.void_element_slash) + ">"
            }; return nil; })();
            return result['opal$<<']("<tr>\n<td>" + (num_element) + "</td>\n<td>" + (item.opal$text()) + "</td>\n</tr>");}, TMP_5._s = self, TMP_5), opal$a).call(opal$b);
          result['opal$<<']("</table>");
          } else {
          result['opal$<<']("<ol>");
          (opal$a = (opal$c = node.opal$items()).opal$each, opal$a._p = (TMP_6 = function(item){var self = TMP_6._s || this;if (item == null) item = nil;
          return result['opal$<<']("<li>\n<p>" + (item.opal$text()) + "</p>\n</li>")}, TMP_6._s = self, TMP_6), opal$a).call(opal$c);
          result['opal$<<']("</ol>");
        };
        result['opal$<<']("</div>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$dlist = function(node) {
        var opal$a, opal$b, TMP_7, opal$c, TMP_9, opal$d, TMP_11, self = this, result = nil, id_attribute = nil, classes = nil, opal$case = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;
        result = [];
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = (function() {opal$case = node.opal$style();if ("qanda"['opal$==='](opal$case)) {return ["qlist", "qanda", node.opal$role()]}else if ("horizontal"['opal$==='](opal$case)) {return ["hdlist", node.opal$role()]}else {return ["dlist", node.opal$style(), node.opal$role()]}})().opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        result['opal$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<div class=\"title\">" + (node.opal$title()) + "</div>")};
        opal$case = node.opal$style();if ("qanda"['opal$==='](opal$case)) {result['opal$<<']("<ol>");
        (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_7 = function(terms, dd){var self = TMP_7._s || this, opal$a, opal$b, TMP_8;if (terms == null) terms = nil;if (dd == null) dd = nil;
        result['opal$<<']("<li>");
          (opal$a = (opal$b = [].concat(terms)).opal$each, opal$a._p = (TMP_8 = function(dt){var self = TMP_8._s || this;if (dt == null) dt = nil;
          return result['opal$<<']("<p><em>" + (dt.opal$text()) + "</em></p>")}, TMP_8._s = self, TMP_8), opal$a).call(opal$b);
          if (dd !== false && dd !== nil) {
            if ((opal$a = dd['opal$text?']()) !== false && opal$a !== nil) {
              result['opal$<<']("<p>" + (dd.opal$text()) + "</p>")};
            if ((opal$a = dd['opal$blocks?']()) !== false && opal$a !== nil) {
              result['opal$<<'](dd.opal$content())};};
          return result['opal$<<']("</li>");}, TMP_7._s = self, TMP_7), opal$a).call(opal$b);
        result['opal$<<']("</ol>");}else if ("horizontal"['opal$==='](opal$case)) {slash = self.void_element_slash;
        result['opal$<<']("<table>");
        if ((opal$a = (((opal$c = (node['opal$attr?']("labelwidth"))) !== false && opal$c !== nil) ? opal$c : (node['opal$attr?']("itemwidth")))) !== false && opal$a !== nil) {
          result['opal$<<']("<colgroup>");
          col_style_attribute = (function() {if ((opal$a = (node['opal$attr?']("labelwidth"))) !== false && opal$a !== nil) {
            return " style=\"width: " + ((node.opal$attr("labelwidth")).opal$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['opal$<<']("<col" + (col_style_attribute) + (slash) + ">");
          col_style_attribute = (function() {if ((opal$a = (node['opal$attr?']("itemwidth"))) !== false && opal$a !== nil) {
            return " style=\"width: " + ((node.opal$attr("itemwidth")).opal$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['opal$<<']("<col" + (col_style_attribute) + (slash) + ">");
          result['opal$<<']("</colgroup>");};
        (opal$a = (opal$c = node.opal$items()).opal$each, opal$a._p = (TMP_9 = function(terms, dd){var self = TMP_9._s || this, opal$a, opal$b, TMP_10, terms_array = nil, last_term = nil;if (terms == null) terms = nil;if (dd == null) dd = nil;
        result['opal$<<']("<tr>");
          result['opal$<<']("<td class=\"hdlist1" + ((function() {if ((opal$a = (node['opal$option?']("strong"))) !== false && opal$a !== nil) {
            return " strong"
            } else {
            return nil
          }; return nil; })()) + "\">");
          terms_array = [].concat(terms);
          last_term = terms_array['opal$[]'](-1);
          (opal$a = (opal$b = terms_array).opal$each, opal$a._p = (TMP_10 = function(dt){var self = TMP_10._s || this, opal$a, opal$b;if (dt == null) dt = nil;
          result['opal$<<'](dt.opal$text());
            if ((opal$a = (opal$b = dt['opal$=='](last_term), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              return result['opal$<<']("<br" + (slash) + ">")
              } else {
              return nil
            };}, TMP_10._s = self, TMP_10), opal$a).call(opal$b);
          result['opal$<<']("</td>");
          result['opal$<<']("<td class=\"hdlist2\">");
          if (dd !== false && dd !== nil) {
            if ((opal$a = dd['opal$text?']()) !== false && opal$a !== nil) {
              result['opal$<<']("<p>" + (dd.opal$text()) + "</p>")};
            if ((opal$a = dd['opal$blocks?']()) !== false && opal$a !== nil) {
              result['opal$<<'](dd.opal$content())};};
          result['opal$<<']("</td>");
          return result['opal$<<']("</tr>");}, TMP_9._s = self, TMP_9), opal$a).call(opal$c);
        result['opal$<<']("</table>");}else {result['opal$<<']("<dl>");
        dt_style_attribute = (function() {if ((opal$a = node.opal$style()) !== false && opal$a !== nil) {
          return nil
          } else {
          return " class=\"hdlist1\""
        }; return nil; })();
        (opal$a = (opal$d = node.opal$items()).opal$each, opal$a._p = (TMP_11 = function(terms, dd){var self = TMP_11._s || this, opal$a, opal$b, TMP_12;if (terms == null) terms = nil;if (dd == null) dd = nil;
        (opal$a = (opal$b = [].concat(terms)).opal$each, opal$a._p = (TMP_12 = function(dt){var self = TMP_12._s || this;if (dt == null) dt = nil;
          return result['opal$<<']("<dt" + (dt_style_attribute) + ">" + (dt.opal$text()) + "</dt>")}, TMP_12._s = self, TMP_12), opal$a).call(opal$b);
          if (dd !== false && dd !== nil) {
            result['opal$<<']("<dd>");
            if ((opal$a = dd['opal$text?']()) !== false && opal$a !== nil) {
              result['opal$<<']("<p>" + (dd.opal$text()) + "</p>")};
            if ((opal$a = dd['opal$blocks?']()) !== false && opal$a !== nil) {
              result['opal$<<'](dd.opal$content())};
            return result['opal$<<']("</dd>");
            } else {
            return nil
          };}, TMP_11._s = self, TMP_11), opal$a).call(opal$d);
        result['opal$<<']("</dl>");};
        result['opal$<<']("</div>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$example = function(node) {
        var opal$a, self = this, id_attribute = nil, title_element = nil, role = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          return ["exampleblock", role]['opal$*'](" ")
          } else {
          return "exampleblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (node.opal$content()) + "\n</div>\n</div>";
      };

      def.opal$floating_title = function(node) {
        var opal$a, self = this, tag_name = nil, id_attribute = nil, classes = nil;
        tag_name = "h" + (node.opal$level()['opal$+'](1));
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = [node.opal$style(), node.opal$role()].opal$compact();
        return "<" + (tag_name) + (id_attribute) + " class=\"" + (classes['opal$*'](" ")) + "\">" + (node.opal$title()) + "</" + (tag_name) + ">";
      };

      def.opal$image = function(node) {
        var opal$a, opal$b, self = this, align = nil, float = nil, style_attribute = nil, styles = nil, width_attribute = nil, height_attribute = nil, img_element = nil, link = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil;
        align = (function() {if ((opal$a = (node['opal$attr?']("align"))) !== false && opal$a !== nil) {
          return (node.opal$attr("align"))
          } else {
          return nil
        }; return nil; })();
        float = (function() {if ((opal$a = (node['opal$attr?']("float"))) !== false && opal$a !== nil) {
          return (node.opal$attr("float"))
          } else {
          return nil
        }; return nil; })();
        style_attribute = (function() {if ((opal$a = (((opal$b = align) !== false && opal$b !== nil) ? opal$b : float)) !== false && opal$a !== nil) {
          styles = [(function() {if (align !== false && align !== nil) {
            return "text-align: " + (align)
            } else {
            return nil
          }; return nil; })(), (function() {if (float !== false && float !== nil) {
            return "float: " + (float)
            } else {
            return nil
          }; return nil; })()].opal$compact();
          return " style=\"" + (styles['opal$*'](";")) + "\"";
          } else {
          return nil
        }; return nil; })();
        width_attribute = (function() {if ((opal$a = (node['opal$attr?']("width"))) !== false && opal$a !== nil) {
          return " width=\"" + (node.opal$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attribute = (function() {if ((opal$a = (node['opal$attr?']("height"))) !== false && opal$a !== nil) {
          return " height=\"" + (node.opal$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        img_element = "<img src=\"" + (node.opal$image_uri(node.opal$attr("target"))) + "\" alt=\"" + (node.opal$attr("alt")) + "\"" + (width_attribute) + (height_attribute) + (self.void_element_slash) + ">";
        if ((opal$a = (link = node.opal$attr("link"))) !== false && opal$a !== nil) {
          img_element = "<a class=\"image\" href=\"" + (link) + "\">" + (img_element) + "</a>"};
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["imageblock", node.opal$style(), node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "\n<div class=\"title\">" + (node.opal$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + (style_attribute) + ">\n<div class=\"content\">\n" + (img_element) + "\n</div>" + (title_element) + "\n</div>";
      };

      def.opal$listing = function(node) {
        var opal$a, opal$b, self = this, nowrap = nil, language = nil, language_classes = nil, opal$case = nil, pre_class = nil, code_class = nil, pre_start = nil, pre_end = nil, id_attribute = nil, title_element = nil, role = nil;
        nowrap = (((opal$a = (opal$b = (node.opal$document()['opal$attr?']("prewrap")), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) ? opal$a : (node['opal$option?']("nowrap")));
        if (node.opal$style()['opal$==']("source")) {
          language = node.opal$attr("language");
          language_classes = (function() {if (language !== false && language !== nil) {
            return "" + (language) + " language-" + (language)
            } else {
            return nil
          }; return nil; })();
          opal$case = node.opal$attr("source-highlighter");if ("coderay"['opal$==='](opal$case)) {pre_class = (function() {if (nowrap !== false && nowrap !== nil) {
            return " class=\"CodeRay nowrap\""
            } else {
            return " class=\"CodeRay\""
          }; return nil; })();
          code_class = (function() {if (language !== false && language !== nil) {
            return " class=\"" + (language_classes) + "\""
            } else {
            return nil
          }; return nil; })();}else if ("pygments"['opal$==='](opal$case)) {pre_class = (function() {if (nowrap !== false && nowrap !== nil) {
            return " class=\"pygments highlight nowrap\""
            } else {
            return " class=\"pygments highlight\""
          }; return nil; })();
          code_class = (function() {if (language !== false && language !== nil) {
            return " class=\"" + (language_classes) + "\""
            } else {
            return nil
          }; return nil; })();}else if ("highlightjs"['opal$==='](opal$case) || "highlight.js"['opal$==='](opal$case)) {pre_class = (function() {if (nowrap !== false && nowrap !== nil) {
            return " class=\"highlight nowrap\""
            } else {
            return " class=\"highlight\""
          }; return nil; })();
          code_class = (function() {if (language !== false && language !== nil) {
            return " class=\"" + (language_classes) + "\""
            } else {
            return nil
          }; return nil; })();}else if ("prettify"['opal$==='](opal$case)) {pre_class = " class=\"prettyprint" + ((function() {if (nowrap !== false && nowrap !== nil) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + ((function() {if ((opal$a = (node['opal$attr?']("linenums"))) !== false && opal$a !== nil) {
            return " linenums"
            } else {
            return nil
          }; return nil; })()) + "\"";
          code_class = (function() {if (language !== false && language !== nil) {
            return " class=\"" + (language_classes) + "\""
            } else {
            return nil
          }; return nil; })();}else if ("html-pipeline"['opal$==='](opal$case)) {pre_class = (function() {if (language !== false && language !== nil) {
            return " lang=\"" + (language) + "\""
            } else {
            return nil
          }; return nil; })();
          code_class = nil;}else {pre_class = (function() {if (nowrap !== false && nowrap !== nil) {
            return " class=\"highlight nowrap\""
            } else {
            return " class=\"highlight\""
          }; return nil; })();
          code_class = (function() {if (language !== false && language !== nil) {
            return " class=\"" + (language_classes) + "\""
            } else {
            return nil
          }; return nil; })();};
          pre_start = "<pre" + (pre_class) + "><code" + (code_class) + ">";
          pre_end = "</code></pre>";
          } else {
          pre_start = "<pre" + ((function() {if (nowrap !== false && nowrap !== nil) {
            return " class=\"nowrap\""
            } else {
            return nil
          }; return nil; })()) + ">";
          pre_end = "</pre>";
        };
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"listingblock" + ((opal$a = (role = node.opal$role()), opal$a !== false && opal$a !== nil ?" " + (role) : opal$a)) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (pre_start) + (node.opal$content()) + (pre_end) + "\n</div>\n</div>";
      };

      def.opal$literal = function(node) {
        var opal$a, opal$b, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        nowrap = (((opal$a = (opal$b = (node.opal$document()['opal$attr?']("prewrap")), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) ? opal$a : (node['opal$option?']("nowrap")));
        return "<div" + (id_attribute) + " class=\"literalblock" + ((opal$a = (role = node.opal$role()), opal$a !== false && opal$a !== nil ?" " + (role) : opal$a)) + "\">\n" + (title_element) + "<div class=\"content\">\n<pre" + ((function() {if (nowrap !== false && nowrap !== nil) {
          return " class=\"nowrap\""
          } else {
          return nil
        }; return nil; })()) + ">" + (node.opal$content()) + "</pre>\n</div>\n</div>";
      };

      def.opal$math = function(node) {
        var opal$a, opal$b, opal$c, self = this, id_attribute = nil, title_element = nil, open = nil, close = nil, equation = nil, role = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        opal$a = opal$opal.to_ary(opal$scope.BLOCK_MATH_DELIMITERS['opal$[]'](node.opal$style().opal$to_sym())), open = (opal$a[0] == null ? nil : opal$a[0]), close = (opal$a[1] == null ? nil : opal$a[1]);
        equation = node.opal$content().opal$strip();
        if ((opal$a = (opal$b = node.opal$subs()['opal$nil_or_empty?'](), opal$b !== false && opal$b !== nil ?(opal$c = (node['opal$attr?']("subs")), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          equation = node.opal$sub_specialcharacters(equation)};
        if ((opal$a = (opal$b = (equation['opal$start_with?'](open)), opal$b !== false && opal$b !== nil ?(equation['opal$end_with?'](close)) : opal$b)) === false || opal$a === nil) {
          equation = "" + (open) + (equation) + (close)};
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          return ["mathblock", role]['opal$*'](" ")
          } else {
          return "mathblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (equation) + "\n</div>\n</div>";
      };

      def.opal$olist = function(node) {
        var opal$a, opal$b, TMP_13, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil;
        result = [];
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["olist", node.opal$style(), node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        result['opal$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<div class=\"title\">" + (node.opal$title()) + "</div>")};
        type_attribute = (function() {if ((opal$a = (keyword = node.opal$list_marker_keyword())) !== false && opal$a !== nil) {
          return " type=\"" + (keyword) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((opal$a = (node['opal$attr?']("start"))) !== false && opal$a !== nil) {
          return " start=\"" + (node.opal$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['opal$<<']("<ol class=\"" + (node.opal$style()) + "\"" + (type_attribute) + (start_attribute) + ">");
        (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_13 = function(item){var self = TMP_13._s || this, opal$a;if (item == null) item = nil;
        result['opal$<<']("<li>");
          result['opal$<<']("<p>" + (item.opal$text()) + "</p>");
          if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
            result['opal$<<'](item.opal$content())};
          return result['opal$<<']("</li>");}, TMP_13._s = self, TMP_13), opal$a).call(opal$b);
        result['opal$<<']("</ol>");
        result['opal$<<']("</div>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$open = function(node) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;
        if (((style = node.opal$style()))['opal$==']("abstract")) {
          if ((opal$a = ((opal$b = node.opal$parent()['opal$=='](node.opal$document())) ? node.opal$document().opal$doctype()['opal$==']("book") : opal$b)) !== false && opal$a !== nil) {
            self.opal$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
            return "";
            } else {
            id_attr = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
              return " id=\"" + (node.opal$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            title_el = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
              return "<div class=\"title\">" + (node.opal$title()) + "</div>"
              } else {
              return nil
            }; return nil; })();
            return "<div" + (id_attr) + " class=\"quoteblock abstract" + ((opal$a = (role = node.opal$role()), opal$a !== false && opal$a !== nil ?" " + (role) : opal$a)) + "\">\n" + (title_el) + "<blockquote>\n" + (node.opal$content()) + "\n</blockquote>\n</div>";
          }
        } else if ((opal$a = ((opal$b = style['opal$==']("partintro")) ? ((((opal$c = (((opal$d = (opal$e = node.opal$level()['opal$=='](0), (opal$e === nil || opal$e === false))) !== false && opal$d !== nil) ? opal$d : (opal$e = node.opal$parent().opal$context()['opal$==']("section"), (opal$e === nil || opal$e === false)))) !== false && opal$c !== nil) ? opal$c : (opal$d = node.opal$document().opal$doctype()['opal$==']("book"), (opal$d === nil || opal$d === false)))) : opal$b)) !== false && opal$a !== nil) {
          self.opal$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.");
          return "";
          } else {
          id_attr = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
            return " id=\"" + (node.opal$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          title_el = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
            return "<div class=\"title\">" + (node.opal$title()) + "</div>"
            } else {
            return nil
          }; return nil; })();
          return "<div" + (id_attr) + " class=\"openblock" + ((function() {if ((opal$a = ((opal$b = style !== false && style !== nil) ? (opal$c = style['opal$==']("open"), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
            return " " + (style)
            } else {
            return ""
          }; return nil; })()) + ((opal$a = (role = node.opal$role()), opal$a !== false && opal$a !== nil ?" " + (role) : opal$a)) + "\">\n" + (title_el) + "<div class=\"content\">\n" + (node.opal$content()) + "\n</div>\n</div>";
        };
      };

      def.opal$page_break = function(node) {
        var self = this;
        return "<div style=\"page-break-after: always;\"></div>";
      };

      def.opal$paragraph = function(node) {
        var opal$a, self = this, attributes = nil;
        attributes = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          if ((opal$a = node.opal$role()) !== false && opal$a !== nil) {
            return " id=\"" + (node.opal$id()) + "\" class=\"paragraph " + (node.opal$role()) + "\""
            } else {
            return " id=\"" + (node.opal$id()) + "\" class=\"paragraph\""
          }
        } else if ((opal$a = node.opal$role()) !== false && opal$a !== nil) {
          return " class=\"paragraph " + (node.opal$role()) + "\""
          } else {
          return " class=\"paragraph\""
        }; return nil; })();
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div" + (attributes) + ">\n<div class=\"title\">" + (node.opal$title()) + "</div>\n<p>" + (node.opal$content()) + "</p>\n</div>"
          } else {
          return "<div" + (attributes) + ">\n<p>" + (node.opal$content()) + "</p>\n</div>"
        };
      };

      def.opal$preamble = function(node) {
        var opal$a, opal$b, self = this, toc = nil;
        toc = (function() {if ((opal$a = (opal$b = (node['opal$attr?']("toc")), opal$b !== false && opal$b !== nil ?(node['opal$attr?']("toc-placement", "preamble")) : opal$b)) !== false && opal$a !== nil) {
          return "\n<div id=\"toc\" class=\"" + (node.opal$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (node.opal$attr("toc-title")) + "</div>\n" + (self.opal$outline(node.opal$document())) + "\n</div>"
          } else {
          return nil
        }; return nil; })();
        return "<div id=\"preamble\">\n<div class=\"sectionbody\">\n" + (node.opal$content()) + "\n</div>" + (toc) + "\n</div>";
      };

      def.opal$quote = function(node) {
        var opal$a, opal$b, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["quoteblock", node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "\n<div class=\"title\">" + (node.opal$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ((opal$a = (node['opal$attr?']("attribution"))) !== false && opal$a !== nil) {
          return (node.opal$attr("attribution"))
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ((opal$a = (node['opal$attr?']("citetitle"))) !== false && opal$a !== nil) {
          return (node.opal$attr("citetitle"))
          } else {
          return nil
        }; return nil; })();
        if ((opal$a = (((opal$b = attribution) !== false && opal$b !== nil) ? opal$b : citetitle)) !== false && opal$a !== nil) {
          cite_element = (function() {if (citetitle !== false && citetitle !== nil) {
            return "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if (attribution !== false && attribution !== nil) {
            return "" + ((function() {if (citetitle !== false && citetitle !== nil) {
              return "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })()) + "&#8212; " + (attribution)
            } else {
            return nil
          }; return nil; })();
          attribution_element = "\n<div class=\"attribution\">\n" + (cite_element) + (attribution_text) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<blockquote>\n" + (node.opal$content()) + "\n</blockquote>" + (attribution_element) + "\n</div>";
      };

      def.opal$thematic_break = function(node) {
        var self = this;
        return "<hr" + (self.void_element_slash) + ">";
      };

      def.opal$sidebar = function(node) {
        var opal$a, self = this, id_attribute = nil, title_element = nil, role = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<div class=\"title\">" + (node.opal$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          return ["sidebarblock", role]['opal$*'](" ")
          } else {
          return "sidebarblock"
        }; return nil; })()) + "\">\n<div class=\"content\">\n" + (title_element) + (node.opal$content()) + "\n</div>\n</div>";
      };

      def.opal$table = function(node) {
        var opal$a, opal$b, TMP_14, opal$c, TMP_15, opal$d, TMP_16, opal$e, opal$f, TMP_20, self = this, result = nil, id_attribute = nil, classes = nil, role_class = nil, class_attribute = nil, styles = nil, style_attribute = nil, slash = nil, tag = nil;
        result = [];
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["tableblock", "frame-" + (node.opal$attr("frame", "all")), "grid-" + (node.opal$attr("grid", "all"))];
        if ((opal$a = (role_class = node.opal$role())) !== false && opal$a !== nil) {
          classes['opal$<<'](role_class)};
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        styles = [(function() {if ((opal$a = (node['opal$option?']("autowidth"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return "width: " + (node.opal$attr("tablepcwidth")) + "%;"
        }; return nil; })(), (function() {if ((opal$a = (node['opal$attr?']("float"))) !== false && opal$a !== nil) {
          return "float: " + (node.opal$attr("float")) + ";"
          } else {
          return nil
        }; return nil; })()].opal$compact();
        style_attribute = (function() {if (styles.opal$size()['opal$>'](0)) {
          return " style=\"" + (styles['opal$*'](" ")) + "\""
          } else {
          return nil
        }; return nil; })();
        result['opal$<<']("<table" + (id_attribute) + (class_attribute) + (style_attribute) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<caption class=\"title\">" + (node.opal$captioned_title()) + "</caption>")};
        if ((node.opal$attr("rowcount"))['opal$>'](0)) {
          slash = self.void_element_slash;
          result['opal$<<']("<colgroup>");
          if ((opal$a = node['opal$option?']("autowidth")) !== false && opal$a !== nil) {
            tag = "<col" + (slash) + ">";
            (opal$a = (opal$b = node.opal$columns().opal$size()).opal$times, opal$a._p = (TMP_14 = function(){var self = TMP_14._s || this;
            return result['opal$<<'](tag)}, TMP_14._s = self, TMP_14), opal$a).call(opal$b);
            } else {
            (opal$a = (opal$c = node.opal$columns()).opal$each, opal$a._p = (TMP_15 = function(col){var self = TMP_15._s || this;if (col == null) col = nil;
            return result['opal$<<']("<col style=\"width: " + (col.opal$attr("colpcwidth")) + "%;\"" + (slash) + ">")}, TMP_15._s = self, TMP_15), opal$a).call(opal$c)
          };
          result['opal$<<']("</colgroup>");
          (opal$a = (opal$d = (opal$e = (opal$f = ["head", "foot", "body"]).opal$select, opal$e._p = (TMP_20 = function(tsec){var self = TMP_20._s || this, opal$a;if (tsec == null) tsec = nil;
          return (opal$a = node.opal$rows()['opal$[]'](tsec)['opal$empty?'](), (opal$a === nil || opal$a === false))}, TMP_20._s = self, TMP_20), opal$e).call(opal$f)).opal$each, opal$a._p = (TMP_16 = function(tsec){var self = TMP_16._s || this, opal$a, opal$b, TMP_17;if (tsec == null) tsec = nil;
          result['opal$<<']("<t" + (tsec) + ">");
            (opal$a = (opal$b = node.opal$rows()['opal$[]'](tsec)).opal$each, opal$a._p = (TMP_17 = function(row){var self = TMP_17._s || this, opal$a, opal$b, TMP_18;if (row == null) row = nil;
            result['opal$<<']("<tr>");
              (opal$a = (opal$b = row).opal$each, opal$a._p = (TMP_18 = function(cell){var self = TMP_18._s || this, opal$a, opal$b, TMP_19, opal$c, cell_content = nil, opal$case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;if (cell == null) cell = nil;
              if (tsec['opal$==']("head")) {
                  cell_content = cell.opal$text()
                  } else {
                  opal$case = cell.opal$style();if ("asciidoc"['opal$==='](opal$case)) {cell_content = "<div>" + (cell.opal$content()) + "</div>"}else if ("verse"['opal$==='](opal$case)) {cell_content = "<div class=\"verse\">" + (cell.opal$text()) + "</div>"}else if ("literal"['opal$==='](opal$case)) {cell_content = "<div class=\"literal\"><pre>" + (cell.opal$text()) + "</pre></div>"}else {cell_content = "";
                  (opal$a = (opal$b = cell.opal$content()).opal$each, opal$a._p = (TMP_19 = function(text){var self = TMP_19._s || this;if (text == null) text = nil;
                  return cell_content = "" + (cell_content) + "<p class=\"tableblock\">" + (text) + "</p>"}, TMP_19._s = self, TMP_19), opal$a).call(opal$b);}
                };
                cell_tag_name = ((function() {if ((opal$a = (((opal$c = tsec['opal$==']("head")) !== false && opal$c !== nil) ? opal$c : cell.opal$style()['opal$==']("header"))) !== false && opal$a !== nil) {
                  return "th"
                  } else {
                  return "td"
                }; return nil; })());
                cell_class_attribute = " class=\"tableblock halign-" + (cell.opal$attr("halign")) + " valign-" + (cell.opal$attr("valign")) + "\"";
                cell_colspan_attribute = (function() {if ((opal$a = cell.opal$colspan()) !== false && opal$a !== nil) {
                  return " colspan=\"" + (cell.opal$colspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_rowspan_attribute = (function() {if ((opal$a = cell.opal$rowspan()) !== false && opal$a !== nil) {
                  return " rowspan=\"" + (cell.opal$rowspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_style_attribute = (function() {if ((opal$a = (node.opal$document()['opal$attr?']("cellbgcolor"))) !== false && opal$a !== nil) {
                  return " style=\"background-color: " + (node.opal$document().opal$attr("cellbgcolor")) + ";\""
                  } else {
                  return nil
                }; return nil; })();
                return result['opal$<<']("<" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + ">" + (cell_content) + "</" + (cell_tag_name) + ">");}, TMP_18._s = self, TMP_18), opal$a).call(opal$b);
              return result['opal$<<']("</tr>");}, TMP_17._s = self, TMP_17), opal$a).call(opal$b);
            return result['opal$<<']("</t" + (tsec) + ">");}, TMP_16._s = self, TMP_16), opal$a).call(opal$d);};
        result['opal$<<']("</table>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$toc = function(node) {
        var opal$a, opal$b, opal$c, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;
        if ((opal$a = ((doc = node.opal$document()))['opal$attr?']("toc")) === false || opal$a === nil) {
          return "<!-- toc disabled -->"};
        if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          id_attr = " id=\"" + (node.opal$id()) + "\"";
          title_id_attr = "";
        } else if ((opal$a = (((opal$b = doc['opal$embedded?']()) !== false && opal$b !== nil) ? opal$b : (opal$c = (doc['opal$attr?']("toc-placement")), (opal$c === nil || opal$c === false)))) !== false && opal$a !== nil) {
          id_attr = " id=\"toc\"";
          title_id_attr = " id=\"toctitle\"";
          } else {
          id_attr = nil;
          title_id_attr = nil;
        };
        title = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return node.opal$title()
          } else {
          return (doc.opal$attr("toc-title"))
        }; return nil; })();
        levels = (function() {if ((opal$a = (node['opal$attr?']("levels"))) !== false && opal$a !== nil) {
          return (node.opal$attr("levels")).opal$to_i()
          } else {
          return nil
        }; return nil; })();
        role = (function() {if ((opal$a = node['opal$role?']()) !== false && opal$a !== nil) {
          return node.opal$role()
          } else {
          return (doc.opal$attr("toc-class", "toc"))
        }; return nil; })();
        return "<div" + (id_attr) + " class=\"" + (role) + "\">\n<div" + (title_id_attr) + " class=\"title\">" + (title) + "</div>\n" + (self.opal$outline(doc, opal$hash2(["toclevels"], {"toclevels": levels}))) + "\n</div>";
      };

      def.opal$ulist = function(node) {
        var opal$a, opal$b, TMP_21, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;
        result = [];
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        div_classes = ["ulist", node.opal$style(), node.opal$role()].opal$compact();
        marker_checked = nil;
        marker_unchecked = nil;
        if ((opal$a = (checklist = node['opal$option?']("checklist"))) !== false && opal$a !== nil) {
          div_classes.opal$insert(1, "checklist");
          ul_class_attribute = " class=\"checklist\"";
          if ((opal$a = node['opal$option?']("interactive")) !== false && opal$a !== nil) {
            if ((opal$a = node.opal$document()['opal$attr?']("htmlsyntax", "xml")) !== false && opal$a !== nil) {
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked=\"checked\"/> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"/> ";
              } else {
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"> ";
            }
          } else if ((opal$a = node.opal$document()['opal$attr?']("icons", "font")) !== false && opal$a !== nil) {
            marker_checked = "<i class=\"icon-check\"></i> ";
            marker_unchecked = "<i class=\"icon-check-empty\"></i> ";
            } else {
            marker_checked = "&#10003; ";
            marker_unchecked = "&#10063; ";
          };
          } else {
          ul_class_attribute = (function() {if ((opal$a = node.opal$style()) !== false && opal$a !== nil) {
            return " class=\"" + (node.opal$style()) + "\""
            } else {
            return nil
          }; return nil; })()
        };
        result['opal$<<']("<div" + (id_attribute) + " class=\"" + (div_classes['opal$*'](" ")) + "\">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<div class=\"title\">" + (node.opal$title()) + "</div>")};
        result['opal$<<']("<ul" + (ul_class_attribute) + ">");
        (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_21 = function(item){var self = TMP_21._s || this, opal$a, opal$b;if (item == null) item = nil;
        result['opal$<<']("<li>");
          if ((opal$a = ((opal$b = checklist !== false && checklist !== nil) ? (item['opal$attr?']("checkbox")) : opal$b)) !== false && opal$a !== nil) {
            result['opal$<<']("<p>" + ((function() {if ((opal$a = (item['opal$attr?']("checked"))) !== false && opal$a !== nil) {
              return marker_checked
              } else {
              return marker_unchecked
            }; return nil; })()) + (item.opal$text()) + "</p>")
            } else {
            result['opal$<<']("<p>" + (item.opal$text()) + "</p>")
          };
          if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
            result['opal$<<'](item.opal$content())};
          return result['opal$<<']("</li>");}, TMP_21._s = self, TMP_21), opal$a).call(opal$b);
        result['opal$<<']("</ul>");
        result['opal$<<']("</div>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$verse = function(node) {
        var opal$a, opal$b, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["verseblock", node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "\n<div class=\"title\">" + (node.opal$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ((opal$a = (node['opal$attr?']("attribution"))) !== false && opal$a !== nil) {
          return (node.opal$attr("attribution"))
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ((opal$a = (node['opal$attr?']("citetitle"))) !== false && opal$a !== nil) {
          return (node.opal$attr("citetitle"))
          } else {
          return nil
        }; return nil; })();
        if ((opal$a = (((opal$b = attribution) !== false && opal$b !== nil) ? opal$b : citetitle)) !== false && opal$a !== nil) {
          cite_element = (function() {if (citetitle !== false && citetitle !== nil) {
            return "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if (attribution !== false && attribution !== nil) {
            return "" + ((function() {if (citetitle !== false && citetitle !== nil) {
              return "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })()) + "&#8212; " + (attribution)
            } else {
            return nil
          }; return nil; })();
          attribution_element = "\n<div class=\"attribution\">\n" + (cite_element) + (attribution_text) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<pre class=\"content\">" + (node.opal$content()) + "</pre>" + (attribution_element) + "\n</div>";
      };

      def.opal$video = function(node) {
        var opal$a, opal$b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, opal$case = nil, start_anchor = nil, delimiter = nil, autoplay_param = nil, loop_param = nil, start_param = nil, end_param = nil, controls_param = nil, poster_attribute = nil, poster = nil, time_anchor = nil;
        xml = node.opal$document()['opal$attr?']("htmlsyntax", "xml");
        id_attribute = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return " id=\"" + (node.opal$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["videoblock", node.opal$style(), node.opal$role()].opal$compact();
        class_attribute = " class=\"" + (classes['opal$*'](" ")) + "\"";
        title_element = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "\n<div class=\"title\">" + (node.opal$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        width_attribute = (function() {if ((opal$a = (node['opal$attr?']("width"))) !== false && opal$a !== nil) {
          return " width=\"" + (node.opal$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attribute = (function() {if ((opal$a = (node['opal$attr?']("height"))) !== false && opal$a !== nil) {
          return " height=\"" + (node.opal$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return (function() {opal$case = node.opal$attr("poster");if ("vimeo"['opal$==='](opal$case)) {start_anchor = (function() {if ((opal$a = (node['opal$attr?']("start"))) !== false && opal$a !== nil) {
          return "#at=" + (node.opal$attr("start"))
          } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        autoplay_param = (function() {if ((opal$a = (node['opal$option?']("autoplay"))) !== false && opal$a !== nil) {
          return "" + (delimiter) + "autoplay=1"
          } else {
          return nil
        }; return nil; })();
        if (autoplay_param !== false && autoplay_param !== nil) {
          delimiter = "&amp;"};
        loop_param = (function() {if ((opal$a = (node['opal$option?']("loop"))) !== false && opal$a !== nil) {
          return "" + (delimiter) + "loop=1"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<iframe" + (width_attribute) + (height_attribute) + " src=\"//player.vimeo.com/video/" + (node.opal$attr("target")) + (start_anchor) + (autoplay_param) + (loop_param) + "\" frameborder=\"0\"" + (self.opal$append_boolean_attribute("webkitAllowFullScreen", xml)) + (self.opal$append_boolean_attribute("mozallowfullscreen", xml)) + (self.opal$append_boolean_attribute("allowFullScreen", xml)) + "></iframe>\n</div>\n</div>";}else if ("youtube"['opal$==='](opal$case)) {start_param = (function() {if ((opal$a = (node['opal$attr?']("start"))) !== false && opal$a !== nil) {
          return "&amp;start=" + (node.opal$attr("start"))
          } else {
          return nil
        }; return nil; })();
        end_param = (function() {if ((opal$a = (node['opal$attr?']("end"))) !== false && opal$a !== nil) {
          return "&amp;end=" + (node.opal$attr("end"))
          } else {
          return nil
        }; return nil; })();
        autoplay_param = (function() {if ((opal$a = (node['opal$option?']("autoplay"))) !== false && opal$a !== nil) {
          return "&amp;autoplay=1"
          } else {
          return nil
        }; return nil; })();
        loop_param = (function() {if ((opal$a = (node['opal$option?']("loop"))) !== false && opal$a !== nil) {
          return "&amp;loop=1"
          } else {
          return nil
        }; return nil; })();
        controls_param = (function() {if ((opal$a = (node['opal$option?']("nocontrols"))) !== false && opal$a !== nil) {
          return "&amp;controls=0"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<iframe" + (width_attribute) + (height_attribute) + " src=\"//www.youtube.com/embed/" + (node.opal$attr("target")) + "?rel=0" + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (controls_param) + "\" frameborder=\"0\"" + ((function() {if ((opal$a = (node['opal$option?']("nofullscreen"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return (self.opal$append_boolean_attribute("allowfullscreen", xml))
        }; return nil; })()) + "></iframe>\n</div>\n</div>";}else {poster_attribute = (function() {if ((opal$a = (("") + (poster = node.opal$attr("poster")))['opal$empty?']()) !== false && opal$a !== nil) {
          return nil
          } else {
          return " poster=\"" + (node.opal$media_uri(poster)) + "\""
        }; return nil; })();
        time_anchor = (function() {if ((opal$a = ((((opal$b = (node['opal$attr?']("start"))) !== false && opal$b !== nil) ? opal$b : (node['opal$attr?']("end"))))) !== false && opal$a !== nil) {
          return "#t=" + (node.opal$attr("start")) + ((function() {if ((opal$a = (node['opal$attr?']("end"))) !== false && opal$a !== nil) {
            return ","
            } else {
            return nil
          }; return nil; })()) + (node.opal$attr("end"))
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<video src=\"" + (node.opal$media_uri(node.opal$attr("target"))) + (time_anchor) + "\"" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ((opal$a = (node['opal$option?']("autoplay"))) !== false && opal$a !== nil) {
          return (self.opal$append_boolean_attribute("autoplay", xml))
          } else {
          return nil
        }; return nil; })()) + ((function() {if ((opal$a = (node['opal$option?']("nocontrols"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return (self.opal$append_boolean_attribute("controls", xml))
        }; return nil; })()) + ((function() {if ((opal$a = (node['opal$option?']("loop"))) !== false && opal$a !== nil) {
          return (self.opal$append_boolean_attribute("loop", xml))
          } else {
          return nil
        }; return nil; })()) + ">\nYour browser does not support the video tag.\n</video>\n</div>\n</div>";}})();
      };

      def.opal$inline_anchor = function(node) {
        var opal$a, opal$b, self = this, target = nil, opal$case = nil, refid = nil, text = nil, class_attr = nil, role = nil, window_attr = nil;
        target = node.opal$target();
        return (function() {opal$case = node.opal$type();if ("xref"['opal$==='](opal$case)) {refid = (((opal$a = (node.opal$attr("refid"))) !== false && opal$a !== nil) ? opal$a : target);
        text = (((opal$a = node.opal$text()) !== false && opal$a !== nil) ? opal$a : ((((opal$b = node.opal$document().opal$references()['opal$[]']("ids")['opal$[]'](refid)) !== false && opal$b !== nil) ? opal$b : "[" + (refid) + "]")));
        return "<a href=\"" + (target) + "\">" + (text) + "</a>";}else if ("ref"['opal$==='](opal$case)) {return "<a id=\"" + (target) + "\"></a>"}else if ("link"['opal$==='](opal$case)) {class_attr = (function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          return " class=\"" + (role) + "\""
          } else {
          return nil
        }; return nil; })();
        window_attr = (function() {if ((opal$a = (node['opal$attr?']("window"))) !== false && opal$a !== nil) {
          return " target=\"" + (node.opal$attr("window")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<a href=\"" + (target) + "\"" + (class_attr) + (window_attr) + ">" + (node.opal$text()) + "</a>";}else if ("bibref"['opal$==='](opal$case)) {return "<a id=\"" + (target) + "\"></a>[" + (target) + "]"}else {return self.opal$warn("asciidoctor: WARNING: unknown anchor type: " + (node.opal$type().opal$inspect()))}})();
      };

      def.opal$inline_break = function(node) {
        var self = this;
        return "" + (node.opal$text()) + "<br" + (self.void_element_slash) + ">";
      };

      def.opal$inline_button = function(node) {
        var self = this;
        return "<b class=\"button\">" + (node.opal$text()) + "</b>";
      };

      def.opal$inline_callout = function(node) {
        var opal$a, self = this, src = nil;
        if ((opal$a = node.opal$document()['opal$attr?']("icons", "font")) !== false && opal$a !== nil) {
          return "<i class=\"conum\" data-value=\"" + (node.opal$text()) + "\"></i><b>(" + (node.opal$text()) + ")</b>"
        } else if ((opal$a = node.opal$document()['opal$attr?']("icons")) !== false && opal$a !== nil) {
          src = node.opal$icon_uri("callouts/" + (node.opal$text()));
          return "<img src=\"" + (src) + "\" alt=\"" + (node.opal$text()) + "\"" + (self.void_element_slash) + ">";
          } else {
          return "<b>(" + (node.opal$text()) + ")</b>"
        };
      };

      def.opal$inline_footnote = function(node) {
        var opal$a, self = this, index = nil, id_attr = nil;
        if ((opal$a = (index = node.opal$attr("index"))) !== false && opal$a !== nil) {
          if (node.opal$type()['opal$==']("xref")) {
            return "<span class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</span>"
            } else {
            id_attr = (function() {if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
              return " id=\"_footnote_" + (node.opal$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            return "<span class=\"footnote\"" + (id_attr) + ">[<a id=\"_footnoteref_" + (index) + "\" class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</span>";
          }
        } else if (node.opal$type()['opal$==']("xref")) {
          return "<span class=\"footnoteref red\" title=\"Unresolved footnote reference.\">[" + (node.opal$text()) + "]</span>"
          } else {
          return nil
        };
      };

      def.opal$inline_image = function(node) {
        var opal$a, opal$b, opal$c, TMP_22, self = this, type = nil, style_class = nil, title_attribute = nil, img = nil, resolved_target = nil, attrs = nil, window_attr = nil, style_classes = nil, role = nil, style_attr = nil;
        if ((opal$a = ((opal$b = ((type = node.opal$type()))['opal$==']("icon")) ? (node.opal$document()['opal$attr?']("icons", "font")) : opal$b)) !== false && opal$a !== nil) {
          style_class = "icon-" + (node.opal$target());
          if ((opal$a = node['opal$attr?']("size")) !== false && opal$a !== nil) {
            style_class = "" + (style_class) + " icon-" + (node.opal$attr("size"))};
          if ((opal$a = node['opal$attr?']("rotate")) !== false && opal$a !== nil) {
            style_class = "" + (style_class) + " icon-rotate-" + (node.opal$attr("rotate"))};
          if ((opal$a = node['opal$attr?']("flip")) !== false && opal$a !== nil) {
            style_class = "" + (style_class) + " icon-flip-" + (node.opal$attr("flip"))};
          title_attribute = (function() {if ((opal$a = (node['opal$attr?']("title"))) !== false && opal$a !== nil) {
            return " title=\"" + (node.opal$attr("title")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "<i class=\"" + (style_class) + "\"" + (title_attribute) + "></i>";
        } else if ((opal$a = ((opal$b = type['opal$==']("icon")) ? (opal$c = (node.opal$document()['opal$attr?']("icons")), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          img = "[" + (node.opal$attr("alt")) + "]"
          } else {
          resolved_target = (function() {if ((opal$a = (type['opal$==']("icon"))) !== false && opal$a !== nil) {
            return (node.opal$icon_uri(node.opal$target()))
            } else {
            return (node.opal$image_uri(node.opal$target()))
          }; return nil; })();
          attrs = (opal$a = (opal$b = ["alt", "width", "height", "title"]).opal$map, opal$a._p = (TMP_22 = function(name){var self = TMP_22._s || this, opal$a;if (name == null) name = nil;
          if ((opal$a = (node['opal$attr?'](name))) !== false && opal$a !== nil) {
              return " " + (name) + "=\"" + (node.opal$attr(name)) + "\""
              } else {
              return nil
            }}, TMP_22._s = self, TMP_22), opal$a).call(opal$b).opal$join();
          img = "<img src=\"" + (resolved_target) + "\"" + (attrs) + (self.void_element_slash) + ">";
        };
        if ((opal$a = node['opal$attr?']("link")) !== false && opal$a !== nil) {
          window_attr = (function() {if ((opal$a = (node['opal$attr?']("window"))) !== false && opal$a !== nil) {
            return " target=\"" + (node.opal$attr("window")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "<a class=\"image\" href=\"" + (node.opal$attr("link")) + "\"" + (window_attr) + ">" + (img) + "</a>";};
        style_classes = (function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          return "" + (type) + " " + (role)
          } else {
          return type
        }; return nil; })();
        style_attr = (function() {if ((opal$a = (node['opal$attr?']("float"))) !== false && opal$a !== nil) {
          return " style=\"float: " + (node.opal$attr("float")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<span class=\"" + (style_classes) + "\"" + (style_attr) + ">" + (img) + "</span>";
      };

      def.opal$inline_indexterm = function(node) {
        var self = this;
        if (node.opal$type()['opal$==']("visible")) {
          return node.opal$text()
          } else {
          return ""
        };
      };

      def.opal$inline_kbd = function(node) {
        var opal$a, opal$b, TMP_23, self = this, keys = nil, key_combo = nil;
        if (((keys = node.opal$attr("keys"))).opal$size()['opal$=='](1)) {
          return "<kbd>" + (keys['opal$[]'](0)) + "</kbd>"
          } else {
          key_combo = (opal$a = (opal$b = keys).opal$map, opal$a._p = (TMP_23 = function(key){var self = TMP_23._s || this;if (key == null) key = nil;
          return "<kbd>" + (key) + "</kbd>+"}, TMP_23._s = self, TMP_23), opal$a).call(opal$b).opal$join().opal$chop();
          return "<span class=\"keyseq\">" + (key_combo) + "</span>";
        };
      };

      def.opal$inline_menu = function(node) {
        var opal$a, opal$b, TMP_24, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;
        menu = node.opal$attr("menu");
        if ((opal$a = (opal$b = ((submenus = node.opal$attr("submenus")))['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          submenu_path = (opal$a = (opal$b = submenus).opal$map, opal$a._p = (TMP_24 = function(submenu){var self = TMP_24._s || this;if (submenu == null) submenu = nil;
          return "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656; "}, TMP_24._s = self, TMP_24), opal$a).call(opal$b).opal$join().opal$chop();
          return "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; " + (submenu_path) + " <span class=\"menuitem\">" + (node.opal$attr("menuitem")) + "</span></span>";
        } else if ((opal$a = (menuitem = node.opal$attr("menuitem"))) !== false && opal$a !== nil) {
          return "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; <span class=\"menuitem\">" + (menuitem) + "</span></span>"
          } else {
          return "<span class=\"menu\">" + (menu) + "</span>"
        };
      };

      def.opal$inline_quoted = function(node) {
        var opal$a, self = this, open = nil, close = nil, is_tag = nil, quoted_text = nil, role = nil;
        opal$a = opal$opal.to_ary(opal$scope.QUOTE_TAGS['opal$[]'](node.opal$type())), open = (opal$a[0] == null ? nil : opal$a[0]), close = (opal$a[1] == null ? nil : opal$a[1]), is_tag = (opal$a[2] == null ? nil : opal$a[2]);
        quoted_text = (function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
          if (is_tag !== false && is_tag !== nil) {
            return "" + (open.opal$chop()) + " class=\"" + (role) + "\">" + (node.opal$text()) + (close)
            } else {
            return "<span class=\"" + (role) + "\">" + (open) + (node.opal$text()) + (close) + "</span>"
          }
          } else {
          return "" + (open) + (node.opal$text()) + (close)
        }; return nil; })();
        if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
          return "<a id=\"" + (node.opal$id()) + "\"></a>" + (quoted_text)
          } else {
          return quoted_text
        };
      };

      return (def.opal$append_boolean_attribute = function(name, xml) {
        var self = this;
        if (xml !== false && xml !== nil) {
          return " " + (name) + "=\"" + (name) + "\""
          } else {
          return " " + (name)
        };
      }, nil);
    })(opal$scope.Converter, (opal$scope.Converter)._scope.BuiltIn)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Document(){};
      var self = opal$Document = opal$klass(opal$base, opal$super, 'Document', opal$Document);

      var def = opal$Document._proto, opal$scope = opal$Document._scope, opal$a, TMP_1, TMP_9, TMP_15;
      def.attributes = def.safe = def.reader = def.callouts = def.base_dir = def.parsed = def.parent_document = def.extensions = def.options = def.counters = def.references = def.doctype = def.backend = def.header = def.blocks = def.attributes_modified = def.id = def.original_attributes = def.attribute_overrides = def.converter = nil;
      opal$opal.cdecl(opal$scope, 'Footnote', ((opal$a = opal$opal.Object._scope.Struct) == null ? opal$opal.cm('Struct') : opal$a).opal$new("index", "id", "text"));

      (function(opal$base, opal$super) {
        function opal$AttributeEntry(){};
        var self = opal$AttributeEntry = opal$klass(opal$base, opal$super, 'AttributeEntry', opal$AttributeEntry);

        var def = opal$AttributeEntry._proto, opal$scope = opal$AttributeEntry._scope;
        self.opal$attr_reader("name", "value", "negate");

        def.opal$initialize = function(name, value, negate) {
          var opal$a, self = this;
          if (negate == null) {
            negate = nil
          }
          self.name = name;
          self.value = value;
          return self.negate = (function() {if ((opal$a = negate['opal$nil?']()) !== false && opal$a !== nil) {
            return value['opal$nil?']()
            } else {
            return negate
          }; return nil; })();
        };

        return (def.opal$save_to = function(block_attributes) {
          var opal$a, opal$b, opal$c, self = this;
          return ((opal$a = "attribute_entries", opal$b = block_attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, []))))['opal$<<'](self);
        }, nil);
      })(self, null);

      self.opal$attr_reader("safe");

      self.opal$attr_reader("references");

      self.opal$attr_reader("counters");

      self.opal$attr_reader("callouts");

      self.opal$attr_reader("header");

      self.opal$attr_reader("base_dir");

      self.opal$attr_reader("parent_document");

      self.opal$attr_reader("reader");

      self.opal$attr_reader("converter");

      self.opal$attr_reader("extensions");

      def.opal$initialize = TMP_1 = function(data, options) {
        var opal$a, opal$b, opal$c, TMP_2, TMP_3, opal$e, opal$f, TMP_4, opal$g, TMP_5, opal$h, opal$i, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil, parent_doc = nil, attr_overrides = nil, initialize_extensions = nil, safe_mode = nil, header_footer = nil, attrs = nil, safe_mode_name = nil, backend_val = nil, doctype_val = nil, now = nil, localdate = nil, localtime = nil, registry = nil, ext_registry = nil, ext_block = nil;
        if (data == null) {
          data = nil
        }
        if (options == null) {
          options = opal$hash2([], {})
        }
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [self, "document"]);
        if ((opal$a = (parent_doc = options.opal$delete("parent"))) !== false && opal$a !== nil) {
          self.parent_document = parent_doc;
          (opal$a = "base_dir", opal$b = options, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, parent_doc.opal$base_dir())));
          self.references = (opal$a = (opal$b = parent_doc.opal$references()).opal$inject, opal$a._p = (TMP_2 = function(accum, opal$d){var self = TMP_2._s || this;if (accum == null) accum = nil;key = opal$d[0];ref = opal$d[1];
          if (key['opal$==']("footnotes")) {
              accum['opal$[]=']("footnotes", [])
              } else {
              accum['opal$[]='](key, ref)
            };
            return accum;}, TMP_2._s = self, TMP_2), opal$a).call(opal$b, opal$hash2([], {}));
          attr_overrides = parent_doc.opal$attributes().opal$dup();
          attr_overrides.opal$delete("doctype");
          self.attribute_overrides = attr_overrides;
          self.safe = parent_doc.opal$safe();
          self.converter = parent_doc.opal$converter();
          initialize_extensions = false;
          self.extensions = parent_doc.opal$extensions();
          } else {
          self.parent_document = nil;
          self.references = opal$hash2(["ids", "footnotes", "links", "images", "indexterms", "includes"], {"ids": opal$hash2([], {}), "footnotes": [], "links": [], "images": [], "indexterms": [], "includes": ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()});
          attr_overrides = opal$hash2([], {});
          (opal$a = (opal$c = ((((opal$e = options['opal$[]']("attributes")) !== false && opal$e !== nil) ? opal$e : opal$hash2([], {})))).opal$each, opal$a._p = (TMP_3 = function(key, value){var self = TMP_3._s || this, opal$a;if (key == null) key = nil;if (value == null) value = nil;
          if ((opal$a = key['opal$start_with?']("!")) !== false && opal$a !== nil) {
              key = key['opal$[]'](opal$range(1, -1, false));
              value = nil;
            } else if ((opal$a = key['opal$end_with?']("!")) !== false && opal$a !== nil) {
              key = key.opal$chop();
              value = nil;};
            return attr_overrides['opal$[]='](key.opal$downcase(), value);}, TMP_3._s = self, TMP_3), opal$a).call(opal$c);
          self.attribute_overrides = attr_overrides;
          self.safe = nil;
          self.converter = nil;
          initialize_extensions = (function(){ try { return (((((opal$a = opal$opal.Object._scope.Asciidoctor) == null ? opal$opal.cm('Asciidoctor') : opal$a))._scope.Extensions) != null ? 'constant' : nil); } catch (err) { if (err._klass === Opal.NameError) { return nil; } else { throw(err); }}; })();
          self.extensions = nil;
        };
        self.parsed = false;
        self.header = nil;
        self.counters = opal$hash2([], {});
        self.callouts = opal$scope.Callouts.opal$new();
        self.attributes_modified = ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new();
        self.options = options;
        if ((opal$a = parent_doc) === false || opal$a === nil) {
          if ((opal$a = (opal$e = (safe_mode = options['opal$[]']("safe")), (opal$e === nil || opal$e === false))) !== false && opal$a !== nil) {
            self.safe = (opal$scope.SafeMode)._scope.SECURE
          } else if ((opal$a = safe_mode['opal$is_a?'](((opal$e = opal$opal.Object._scope.Fixnum) == null ? opal$opal.cm('Fixnum') : opal$e))) !== false && opal$a !== nil) {
            self.safe = safe_mode
            } else {
            self.safe = (function() {try {return opal$scope.SafeMode.opal$const_get(safe_mode.opal$to_s().opal$upcase()).opal$to_i() } catch (opal$err) { return (opal$scope.SafeMode)._scope.SECURE.opal$to_i() }})()
          }};
        header_footer = ((opal$a = "header_footer", opal$e = options, (((opal$f = opal$e['opal$[]'](opal$a)) !== false && opal$f !== nil) ? opal$f : opal$e['opal$[]='](opal$a, false))));
        attrs = self.attributes;
        attrs['opal$[]=']("encoding", "UTF-8");
        attrs['opal$[]=']("sectids", "");
        if ((opal$a = header_footer) === false || opal$a === nil) {
          attrs['opal$[]=']("notitle", "")};
        attrs['opal$[]=']("toc-placement", "auto");
        attrs['opal$[]=']("stylesheet", "");
        if (header_footer !== false && header_footer !== nil) {
          attrs['opal$[]=']("copycss", "")};
        attrs['opal$[]=']("prewrap", "");
        attrs['opal$[]=']("attribute-undefined", opal$scope.Compliance.opal$attribute_undefined());
        attrs['opal$[]=']("attribute-missing", opal$scope.Compliance.opal$attribute_missing());
        attrs['opal$[]=']("caution-caption", "Caution");
        attrs['opal$[]=']("important-caption", "Important");
        attrs['opal$[]=']("note-caption", "Note");
        attrs['opal$[]=']("tip-caption", "Tip");
        attrs['opal$[]=']("warning-caption", "Warning");
        attrs['opal$[]=']("appendix-caption", "Appendix");
        attrs['opal$[]=']("example-caption", "Example");
        attrs['opal$[]=']("figure-caption", "Figure");
        attrs['opal$[]=']("table-caption", "Table");
        attrs['opal$[]=']("toc-title", "Table of Contents");
        attrs['opal$[]=']("manname-title", "NAME");
        attrs['opal$[]=']("untitled-label", "Untitled");
        attrs['opal$[]=']("version-label", "Version");
        attrs['opal$[]=']("last-update-label", "Last updated");
        attr_overrides['opal$[]=']("asciidoctor", "");
        attr_overrides['opal$[]=']("asciidoctor-version", opal$scope.VERSION);
        safe_mode_name = (opal$a = (opal$e = opal$scope.SafeMode.opal$constants()).opal$detect, opal$a._p = (TMP_4 = function(l){var self = TMP_4._s || this;
          if (self.safe == null) self.safe = nil;
if (l == null) l = nil;
        return opal$scope.SafeMode.opal$const_get(l)['opal$=='](self.safe)}, TMP_4._s = self, TMP_4), opal$a).call(opal$e).opal$to_s().opal$downcase();
        attr_overrides['opal$[]=']("safe-mode-name", safe_mode_name);
        attr_overrides['opal$[]=']("safe-mode-" + (safe_mode_name), "");
        attr_overrides['opal$[]=']("safe-mode-level", self.safe);
        attr_overrides['opal$[]=']("embedded", (function() {if (header_footer !== false && header_footer !== nil) {
          return nil
          } else {
          return ""
        }; return nil; })());
        (opal$a = "max-include-depth", opal$f = attr_overrides, (((opal$g = opal$f['opal$[]'](opal$a)) !== false && opal$g !== nil) ? opal$g : opal$f['opal$[]='](opal$a, 64)));
        if ((opal$a = (opal$f = attr_overrides['opal$[]']("allow-uri-read")['opal$nil?'](), (opal$f === nil || opal$f === false))) === false || opal$a === nil) {
          attr_overrides['opal$[]=']("allow-uri-read", nil)};
        attr_overrides['opal$[]=']("user-home", opal$scope.USER_HOME);
        if ((opal$a = options['opal$[]']("base_dir")) !== false && opal$a !== nil) {
          self.base_dir = attr_overrides['opal$[]=']("docdir", ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(options['opal$[]']("base_dir")))
        } else if ((opal$a = attr_overrides['opal$[]']("docdir")) !== false && opal$a !== nil) {
          self.base_dir = attr_overrides['opal$[]=']("docdir", ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(attr_overrides['opal$[]']("docdir")))
          } else {
          self.base_dir = attr_overrides['opal$[]=']("docdir", ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(((opal$a = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$a).opal$pwd()))
        };
        if ((opal$a = (backend_val = options['opal$[]']("backend"))) !== false && opal$a !== nil) {
          attr_overrides['opal$[]=']("backend", "" + (backend_val))};
        if ((opal$a = (doctype_val = options['opal$[]']("doctype"))) !== false && opal$a !== nil) {
          attr_overrides['opal$[]=']("doctype", "" + (doctype_val))};
        if (self.safe['opal$>=']((opal$scope.SafeMode)._scope.SERVER)) {
          (opal$a = "copycss", opal$f = attr_overrides, (((opal$g = opal$f['opal$[]'](opal$a)) !== false && opal$g !== nil) ? opal$g : opal$f['opal$[]='](opal$a, nil)));
          (opal$a = "source-highlighter", opal$f = attr_overrides, (((opal$g = opal$f['opal$[]'](opal$a)) !== false && opal$g !== nil) ? opal$g : opal$f['opal$[]='](opal$a, nil)));
          (opal$a = "backend", opal$f = attr_overrides, (((opal$g = opal$f['opal$[]'](opal$a)) !== false && opal$g !== nil) ? opal$g : opal$f['opal$[]='](opal$a, opal$scope.DEFAULT_BACKEND)));
          if ((opal$a = (opal$f = (opal$g = parent_doc, (opal$g === nil || opal$g === false)), opal$f !== false && opal$f !== nil ?attr_overrides['opal$key?']("docfile") : opal$f)) !== false && opal$a !== nil) {
            attr_overrides['opal$[]=']("docfile", attr_overrides['opal$[]']("docfile")['opal$[]'](opal$range((attr_overrides['opal$[]']("docdir").opal$length()['opal$+'](1)), -1, false)))};
          attr_overrides['opal$[]=']("docdir", "");
          attr_overrides['opal$[]=']("user-home", ".");
          if (self.safe['opal$>=']((opal$scope.SafeMode)._scope.SECURE)) {
            if ((opal$a = attr_overrides.opal$fetch("linkcss", "")['opal$nil?']()) === false || opal$a === nil) {
              attr_overrides['opal$[]=']("linkcss", "")};
            (opal$a = "icons", opal$f = attr_overrides, (((opal$g = opal$f['opal$[]'](opal$a)) !== false && opal$g !== nil) ? opal$g : opal$f['opal$[]='](opal$a, nil)));};};
        (opal$a = (opal$f = attr_overrides).opal$delete_if, opal$a._p = (TMP_5 = function(key, val){var self = TMP_5._s || this, opal$a, opal$b, opal$c, verdict = nil;if (key == null) key = nil;if (val == null) val = nil;
        verdict = false;
          if ((opal$a = val['opal$nil?']()) !== false && opal$a !== nil) {
            attrs.opal$delete(key)
            } else {
            if ((opal$a = (opal$b = (val['opal$is_a?'](((opal$c = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$c))), opal$b !== false && opal$b !== nil ?(val['opal$end_with?']("@")) : opal$b)) !== false && opal$a !== nil) {
              val = val.opal$chop();
              verdict = true;};
            attrs['opal$[]='](key, val);
          };
          return verdict;}, TMP_5._s = self, TMP_5), opal$a).call(opal$f);
        if (parent_doc !== false && parent_doc !== nil) {
          self.reader = opal$scope.Reader.opal$new(data, options['opal$[]']("cursor"));
          opal$scope.Parser.opal$parse(self.reader, self);
          self.callouts.opal$rewind();
          return self.parsed = true;
          } else {
          (opal$a = "backend", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, opal$scope.DEFAULT_BACKEND)));
          (opal$a = "doctype", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, opal$scope.DEFAULT_DOCTYPE)));
          self.opal$update_backend_attributes(attrs['opal$[]']("backend"), true);
          now = ((opal$a = opal$opal.Object._scope.Time) == null ? opal$opal.cm('Time') : opal$a).opal$now();
          localdate = ((opal$a = "localdate", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, now.opal$strftime("%Y-%m-%d")))));
          localtime = ((opal$a = "localtime", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, ((function() {try {return now.opal$strftime("%H:%M:%S %Z") } catch (opal$err) { return now.opal$strftime("%H:%M:%S") }})())))));
          (opal$a = "localdatetime", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, "" + (localdate) + " " + (localtime))));
          (opal$a = "docdate", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, localdate)));
          (opal$a = "doctime", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, localtime)));
          (opal$a = "docdatetime", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, "" + (localdate) + " " + (localtime))));
          (opal$a = "stylesdir", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, ".")));
          (opal$a = "iconsdir", opal$g = attrs, (((opal$h = opal$g['opal$[]'](opal$a)) !== false && opal$h !== nil) ? opal$h : opal$g['opal$[]='](opal$a, ((opal$i = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$i).opal$join(attrs.opal$fetch("imagesdir", "./images"), "icons"))));
          self.extensions = (function() {if (initialize_extensions !== false && initialize_extensions !== nil) {
            registry = (function() {if ((opal$a = (ext_registry = options['opal$[]']("extensions_registry"))) !== false && opal$a !== nil) {
              if ((opal$a = (((opal$g = (ext_registry['opal$is_a?']((opal$scope.Extensions)._scope.Registry))) !== false && opal$g !== nil) ? opal$g : ((opal$h = ((opal$i = opal$opal.Object._scope.RUBY_ENGINE_JRUBY) == null ? opal$opal.cm('RUBY_ENGINE_JRUBY') : opal$i), opal$h !== false && opal$h !== nil ?(ext_registry['opal$is_a?'](((((opal$i = opal$opal.Object._scope.AsciidoctorJ) == null ? opal$opal.cm('AsciidoctorJ') : opal$i))._scope.Extensions)._scope.ExtensionRegistry)) : opal$h)))) !== false && opal$a !== nil) {
                return ext_registry
                } else {
                return nil
              }
            } else if ((opal$a = ((ext_block = options['opal$[]']("extensions")))['opal$is_a?'](((opal$g = opal$opal.Object._scope.Proc) == null ? opal$opal.cm('Proc') : opal$g))) !== false && opal$a !== nil) {
              return (opal$a = (opal$g = opal$scope.Extensions).opal$build_registry, opal$a._p = ext_block.opal$to_proc(), opal$a).call(opal$g)
              } else {
              return nil
            }; return nil; })();
            return ((((opal$a = registry) !== false && opal$a !== nil) ? opal$a : registry = (opal$scope.Extensions)._scope.Registry.opal$new())).opal$activate(self);
            } else {
            return nil
          }; return nil; })();
          self.reader = opal$scope.PreprocessorReader.opal$new(self, data, (opal$scope.Reader)._scope.Cursor.opal$new(attrs['opal$[]']("docfile"), self.base_dir));
          if ((opal$a = ((opal$h = data !== false && data !== nil) ? options['opal$[]']("parse") : opal$h)) !== false && opal$a !== nil) {
            return self.opal$parse()
            } else {
            return nil
          };
        };
      };

      def.opal$parse = function(data) {
        var opal$a, opal$b, opal$c, TMP_6, TMP_7, self = this, exts = nil;
        if (data == null) {
          data = nil
        }
        if ((opal$a = self.parsed) === false || opal$a === nil) {
          if (data !== false && data !== nil) {
            self.reader = opal$scope.PreprocessorReader.opal$new(self, data, (opal$scope.Reader)._scope.Cursor.opal$new(self.attributes['opal$[]']("docfile"), self.base_dir))};
          if ((opal$a = (opal$b = (exts = (function() {if ((opal$c = self.parent_document) !== false && opal$c !== nil) {
            return nil
            } else {
            return self.extensions
          }; return nil; })()), opal$b !== false && opal$b !== nil ?exts['opal$preprocessors?']() : opal$b)) !== false && opal$a !== nil) {
            (opal$a = (opal$b = exts.opal$preprocessors()).opal$each, opal$a._p = (TMP_6 = function(ext){var self = TMP_6._s || this, opal$a;
              if (self.reader == null) self.reader = nil;
if (ext == null) ext = nil;
            return self.reader = (((opal$a = ext.opal$process_method()['opal$[]'](self, self.reader)) !== false && opal$a !== nil) ? opal$a : self.reader)}, TMP_6._s = self, TMP_6), opal$a).call(opal$b)};
          opal$scope.Parser.opal$parse(self.reader, self, opal$hash2(["header_only"], {"header_only": (opal$a = (opal$c = self.options['opal$[]']("parse_header_only"), (opal$c === nil || opal$c === false)), (opal$a === nil || opal$a === false))}));
          self.callouts.opal$rewind();
          if ((opal$a = ((opal$c = exts !== false && exts !== nil) ? exts['opal$treeprocessors?']() : opal$c)) !== false && opal$a !== nil) {
            (opal$a = (opal$c = exts.opal$treeprocessors()).opal$each, opal$a._p = (TMP_7 = function(ext){var self = TMP_7._s || this;if (ext == null) ext = nil;
            return ext.opal$process_method()['opal$[]'](self)}, TMP_7._s = self, TMP_7), opal$a).call(opal$c)};
          self.parsed = true;};
        return self;
      };

      def.opal$counter = function(name, seed) {
        var opal$a, opal$b, opal$c, self = this, attr_is_seed = nil, attr_val = nil;
        if (seed == null) {
          seed = nil
        }
        if ((opal$a = (opal$b = (attr_is_seed = (opal$c = ((attr_val = self.attributes['opal$[]'](name)))['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false))), opal$b !== false && opal$b !== nil ?self.counters['opal$key?'](name) : opal$b)) !== false && opal$a !== nil) {
          self.counters['opal$[]='](name, self.opal$nextval(attr_val))
          } else {
          if ((opal$a = seed['opal$nil?']()) !== false && opal$a !== nil) {
            seed = self.opal$nextval((function() {if (attr_is_seed !== false && attr_is_seed !== nil) {
              return attr_val
              } else {
              return 0
            }; return nil; })())
          } else if (seed.opal$to_i().opal$to_s()['opal$=='](seed)) {
            seed = seed.opal$to_i()};
          self.counters['opal$[]='](name, seed);
        };
        return (self.attributes['opal$[]='](name, self.counters['opal$[]'](name)));
      };

      def.opal$counter_increment = function(counter_name, block) {
        var self = this, val = nil;
        val = self.opal$counter(counter_name);
        opal$scope.AttributeEntry.opal$new(counter_name, val).opal$save_to(block.opal$attributes());
        return val;
      };

      def.opal$nextval = function(current) {
        var opal$a, opal$b, self = this, intval = nil;
        if ((opal$a = current['opal$is_a?'](((opal$b = opal$opal.Object._scope.Integer) == null ? opal$opal.cm('Integer') : opal$b))) !== false && opal$a !== nil) {
          return current['opal$+'](1)
          } else {
          intval = current.opal$to_i();
          if ((opal$a = (opal$b = intval.opal$to_s()['opal$=='](current.opal$to_s()), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            return (current['opal$[]'](0).opal$ord()['opal$+'](1)).opal$chr()
            } else {
            return intval['opal$+'](1)
          };
        };
      };

      def.opal$register = function(type, value) {
        var opal$a, opal$b, self = this, opal$case = nil;
        return (function() {opal$case = type;if ("ids"['opal$==='](opal$case)) {if ((opal$a = value['opal$is_a?'](((opal$b = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$b))) !== false && opal$a !== nil) {
          return self.references['opal$[]']("ids")['opal$[]='](value['opal$[]'](0), ((((opal$a = value['opal$[]'](1)) !== false && opal$a !== nil) ? opal$a : "["['opal$+'](value['opal$[]'](0))['opal$+']("]"))))
          } else {
          return self.references['opal$[]']("ids")['opal$[]='](value, "["['opal$+'](value)['opal$+']("]"))
        }}else if ("footnotes"['opal$==='](opal$case) || "indexterms"['opal$==='](opal$case)) {return self.references['opal$[]'](type)['opal$<<'](value)}else {if ((opal$a = self.options['opal$[]']("catalog_assets")) !== false && opal$a !== nil) {
          return self.references['opal$[]'](type)['opal$<<'](value)
          } else {
          return nil
        }}})();
      };

      def['opal$footnotes?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.references['opal$[]']("footnotes")['opal$empty?'](), (opal$a === nil || opal$a === false));
      };

      def.opal$footnotes = function() {
        var self = this;
        return self.references['opal$[]']("footnotes");
      };

      def['opal$nested?'] = function() {
        var opal$a, opal$b, self = this;
        return (opal$a = (opal$b = self.parent_document, (opal$b === nil || opal$b === false)), (opal$a === nil || opal$a === false));
      };

      def['opal$embedded?'] = function() {
        var self = this;
        return self.attributes['opal$key?']("embedded");
      };

      def['opal$extensions?'] = function() {
        var opal$a, opal$b, self = this;
        return (opal$a = (opal$b = self.extensions, (opal$b === nil || opal$b === false)), (opal$a === nil || opal$a === false));
      };

      def.opal$source = function() {
        var opal$a, self = this;
        if ((opal$a = self.reader) !== false && opal$a !== nil) {
          return self.reader.opal$source()
          } else {
          return nil
        };
      };

      def.opal$source_lines = function() {
        var opal$a, self = this;
        if ((opal$a = self.reader) !== false && opal$a !== nil) {
          return self.reader.opal$source_lines()
          } else {
          return nil
        };
      };

      def.opal$doctype = function() {
        var opal$a, self = this;
        return (((opal$a = self.doctype) !== false && opal$a !== nil) ? opal$a : self.doctype = self.attributes['opal$[]']("doctype"));
      };

      def.opal$backend = function() {
        var opal$a, self = this;
        return (((opal$a = self.backend) !== false && opal$a !== nil) ? opal$a : self.backend = self.attributes['opal$[]']("backend"));
      };

      def['opal$basebackend?'] = function(base) {
        var self = this;
        return self.attributes['opal$[]']("basebackend")['opal$=='](base);
      };

      def.opal$title = function() {
        var self = this;
        return self.attributes['opal$[]']("title");
      };

      def['opal$title='] = function(title) {
        var opal$a, self = this;
        (((opal$a = self.header) !== false && opal$a !== nil) ? opal$a : self.header = opal$scope.Section.opal$new(self, 0));
        return self.header['opal$title='](title);
      };

      def.opal$doctitle = function(opts) {
        var opal$a, opal$b, self = this, val = nil, sect = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = (opal$b = ((val = self.attributes.opal$fetch("title", "")))['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          val = self.opal$title()
        } else if ((opal$a = (opal$b = (sect = self.opal$first_section()), opal$b !== false && opal$b !== nil ?sect['opal$title?']() : opal$b)) !== false && opal$a !== nil) {
          val = sect.opal$title()
          } else {
          return nil
        };
        if ((opal$a = (opal$b = opts['opal$[]']("sanitize"), opal$b !== false && opal$b !== nil ?val['opal$include?']("<") : opal$b)) !== false && opal$a !== nil) {
          return val.opal$gsub(opal$scope.XmlSanitizeRx, "").opal$tr_s(" ", " ").opal$strip()
          } else {
          return val
        };
      };

      opal$opal.defn(self, 'opal$name', def.opal$doctitle);

      def.opal$author = function() {
        var self = this;
        return self.attributes['opal$[]']("author");
      };

      def.opal$revdate = function() {
        var self = this;
        return self.attributes['opal$[]']("revdate");
      };

      def.opal$notitle = function() {
        var opal$a, opal$b, self = this;
        return (opal$a = (opal$b = self.attributes['opal$key?']("showtitle"), (opal$b === nil || opal$b === false)), opal$a !== false && opal$a !== nil ?self.attributes['opal$key?']("notitle") : opal$a);
      };

      def.opal$noheader = function() {
        var self = this;
        return self.attributes['opal$key?']("noheader");
      };

      def.opal$nofooter = function() {
        var self = this;
        return self.attributes['opal$key?']("nofooter");
      };

      def.opal$first_section = function() {
        var opal$a, opal$b, TMP_8, opal$c, self = this;
        if ((opal$a = self['opal$has_header?']()) !== false && opal$a !== nil) {
          return self.header
          } else {
          return (opal$a = (opal$b = ((((opal$c = self.blocks) !== false && opal$c !== nil) ? opal$c : []))).opal$detect, opal$a._p = (TMP_8 = function(e){var self = TMP_8._s || this;if (e == null) e = nil;
          return e.opal$context()['opal$==']("section")}, TMP_8._s = self, TMP_8), opal$a).call(opal$b)
        };
      };

      def['opal$has_header?'] = function() {
        var opal$a, self = this;
        if ((opal$a = self.header) !== false && opal$a !== nil) {
          return true
          } else {
          return false
        };
      };

      opal$opal.defn(self, 'opal$header?', def['opal$has_header?']);

      def['opal$<<'] = TMP_9 = function(block) {var opal$zuper = opal$slice.call(arguments, 0);
        var self = this, opal$iter = TMP_9._p, opal$yield = opal$iter || nil;
        TMP_9._p = null;
        opal$opal.find_super_dispatcher(self, '<<', TMP_9, opal$iter).apply(self, opal$zuper);
        if (block.opal$context()['opal$==']("section")) {
          return self.opal$assign_index(block)
          } else {
          return nil
        };
      };

      def.opal$finalize_header = function(unrooted_attributes, header_valid) {
        var opal$a, self = this;
        if (header_valid == null) {
          header_valid = true
        }
        self.opal$clear_playback_attributes(unrooted_attributes);
        self.opal$save_attributes();
        if ((opal$a = header_valid) === false || opal$a === nil) {
          unrooted_attributes['opal$[]=']("invalid-header", true)};
        return unrooted_attributes;
      };

      def.opal$save_attributes = function() {
        var opal$a, opal$b, opal$c, opal$d, opal$e, TMP_10, TMP_11, self = this, val = nil, toc_val = nil, toc2_val = nil, toc_position_val = nil, default_toc_position = nil, default_toc_class = nil, position = nil, opal$case = nil;
        if (self.attributes['opal$[]']("basebackend")['opal$==']("docbook")) {
          if ((opal$a = (((opal$b = self['opal$attribute_locked?']("toc")) !== false && opal$b !== nil) ? opal$b : self.attributes_modified['opal$include?']("toc"))) === false || opal$a === nil) {
            self.attributes['opal$[]=']("toc", "")};
          if ((opal$a = (((opal$b = self['opal$attribute_locked?']("numbered")) !== false && opal$b !== nil) ? opal$b : self.attributes_modified['opal$include?']("numbered"))) === false || opal$a === nil) {
            self.attributes['opal$[]=']("numbered", "")};};
        if ((opal$a = (((opal$b = self.attributes['opal$key?']("doctitle")) !== false && opal$b !== nil) ? opal$b : (opal$c = (val = self.opal$doctitle()), (opal$c === nil || opal$c === false)))) === false || opal$a === nil) {
          self.attributes['opal$[]=']("doctitle", val)};
        if ((opal$a = self.id) === false || opal$a === nil) {
          self.id = self.attributes['opal$[]']("css-signature")};
        toc_val = self.attributes['opal$[]']("toc");
        toc2_val = self.attributes['opal$[]']("toc2");
        toc_position_val = self.attributes['opal$[]']("toc-position");
        if ((opal$a = (((opal$b = (((opal$c = toc_val !== false && toc_val !== nil) ? ((((opal$d = (opal$e = toc_val['opal$=='](""), (opal$e === nil || opal$e === false))) !== false && opal$d !== nil) ? opal$d : (opal$e = toc_position_val['opal$nil_or_empty?'](), (opal$e === nil || opal$e === false)))) : opal$c))) !== false && opal$b !== nil) ? opal$b : toc2_val)) !== false && opal$a !== nil) {
          default_toc_position = "left";
          default_toc_class = "toc2";
          position = (opal$a = (opal$b = [toc_position_val, toc2_val, toc_val]).opal$find, opal$a._p = (TMP_10 = function(pos){var self = TMP_10._s || this, opal$a;if (pos == null) pos = nil;
          return (opal$a = pos['opal$nil_or_empty?'](), (opal$a === nil || opal$a === false))}, TMP_10._s = self, TMP_10), opal$a).call(opal$b);
          if ((opal$a = (opal$c = (opal$d = position, (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?toc2_val : opal$c)) !== false && opal$a !== nil) {
            position = default_toc_position};
          self.attributes['opal$[]=']("toc", "");
          opal$case = position;if ("left"['opal$==='](opal$case) || "<"['opal$==='](opal$case) || "&lt;"['opal$==='](opal$case)) {self.attributes['opal$[]=']("toc-position", "left")}else if ("right"['opal$==='](opal$case) || ">"['opal$==='](opal$case) || "&gt;"['opal$==='](opal$case)) {self.attributes['opal$[]=']("toc-position", "right")}else if ("top"['opal$==='](opal$case) || "^"['opal$==='](opal$case)) {self.attributes['opal$[]=']("toc-position", "top")}else if ("bottom"['opal$==='](opal$case) || "v"['opal$==='](opal$case)) {self.attributes['opal$[]=']("toc-position", "bottom")}else if ("preamble"['opal$==='](opal$case)) {self.attributes.opal$delete("toc2");
          self.attributes['opal$[]=']("toc-placement", "preamble");
          default_toc_class = nil;
          default_toc_position = nil;}else if ("default"['opal$==='](opal$case)) {self.attributes.opal$delete("toc2");
          default_toc_class = nil;
          default_toc_position = "default";};
          if (default_toc_class !== false && default_toc_class !== nil) {
            (opal$a = "toc-class", opal$c = self.attributes, (((opal$d = opal$c['opal$[]'](opal$a)) !== false && opal$d !== nil) ? opal$d : opal$c['opal$[]='](opal$a, default_toc_class)))};
          if (default_toc_position !== false && default_toc_position !== nil) {
            (opal$a = "toc-position", opal$c = self.attributes, (((opal$d = opal$c['opal$[]'](opal$a)) !== false && opal$d !== nil) ? opal$d : opal$c['opal$[]='](opal$a, default_toc_position)))};};
        self.original_attributes = self.attributes.opal$dup();
        if ((opal$a = self['opal$nested?']()) !== false && opal$a !== nil) {
          return nil
          } else {
          return (opal$a = (opal$c = opal$scope.FLEXIBLE_ATTRIBUTES).opal$each, opal$a._p = (TMP_11 = function(name){var self = TMP_11._s || this, opal$a, opal$b, opal$c;
            if (self.attribute_overrides == null) self.attribute_overrides = nil;
if (name == null) name = nil;
          if ((opal$a = (opal$b = self.attribute_overrides['opal$key?'](name), opal$b !== false && opal$b !== nil ?(opal$c = self.attribute_overrides['opal$[]'](name)['opal$nil?'](), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
              return self.attribute_overrides.opal$delete(name)
              } else {
              return nil
            }}, TMP_11._s = self, TMP_11), opal$a).call(opal$c)
        };
      };

      def.opal$restore_attributes = function() {
        var self = this;
        return self.attributes = self.original_attributes;
      };

      def.opal$clear_playback_attributes = function(attributes) {
        var self = this;
        return attributes.opal$delete("attribute_entries");
      };

      def.opal$playback_attributes = function(block_attributes) {
        var opal$a, opal$b, TMP_12, self = this;
        if ((opal$a = block_attributes['opal$key?']("attribute_entries")) !== false && opal$a !== nil) {
          return (opal$a = (opal$b = block_attributes['opal$[]']("attribute_entries")).opal$each, opal$a._p = (TMP_12 = function(entry){var self = TMP_12._s || this, opal$a;
            if (self.attributes == null) self.attributes = nil;
if (entry == null) entry = nil;
          if ((opal$a = entry.opal$negate()) !== false && opal$a !== nil) {
              return self.attributes.opal$delete(entry.opal$name())
              } else {
              return self.attributes['opal$[]='](entry.opal$name(), entry.opal$value())
            }}, TMP_12._s = self, TMP_12), opal$a).call(opal$b)
          } else {
          return nil
        };
      };

      def.opal$set_attribute = function(name, value) {
        var opal$a, self = this, opal$case = nil;
        if ((opal$a = self['opal$attribute_locked?'](name)) !== false && opal$a !== nil) {
          return false
          } else {
          opal$case = name;if ("backend"['opal$==='](opal$case)) {self.opal$update_backend_attributes(self.opal$apply_attribute_value_subs(value))}else if ("doctype"['opal$==='](opal$case)) {self.opal$update_doctype_attributes(self.opal$apply_attribute_value_subs(value))}else {self.attributes['opal$[]='](name, self.opal$apply_attribute_value_subs(value))};
          self.attributes_modified['opal$<<'](name);
          return true;
        };
      };

      def.opal$delete_attribute = function(name) {
        var opal$a, self = this;
        if ((opal$a = self['opal$attribute_locked?'](name)) !== false && opal$a !== nil) {
          return false
          } else {
          self.attributes.opal$delete(name);
          self.attributes_modified['opal$<<'](name);
          return true;
        };
      };

      def['opal$attribute_locked?'] = function(name) {
        var self = this;
        return self.attribute_overrides['opal$key?'](name);
      };

      def.opal$apply_attribute_value_subs = function(value) {
        var opal$a, opal$b, self = this, m = nil, subs = nil;
        if ((opal$a = (m = opal$scope.AttributeEntryPassMacroRx.opal$match(value))) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = m['opal$[]'](1)['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            subs = self.opal$resolve_pass_subs(m['opal$[]'](1));
            if ((opal$a = subs['opal$empty?']()) !== false && opal$a !== nil) {
              return m['opal$[]'](2)
              } else {
              return (self.opal$apply_subs(m['opal$[]'](2), subs))
            };
            } else {
            return m['opal$[]'](2)
          }
          } else {
          return self.opal$apply_header_subs(value)
        };
      };

      def.opal$update_backend_attributes = function(new_backend, force) {
        var opal$a, opal$b, opal$c, opal$d, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, resolved_name = nil, new_basebackend = nil, new_filetype = nil, new_outfilesuffix = nil, current_filetype = nil, page_width = nil;
        if (force == null) {
          force = false
        }
        if ((opal$a = (((opal$b = force) !== false && opal$b !== nil) ? opal$b : (((opal$c = new_backend !== false && new_backend !== nil) ? (opal$d = new_backend['opal$=='](self.attributes['opal$[]']("backend")), (opal$d === nil || opal$d === false)) : opal$c)))) !== false && opal$a !== nil) {
          attrs = self.attributes;
          current_backend = attrs['opal$[]']("backend");
          current_basebackend = attrs['opal$[]']("basebackend");
          current_doctype = attrs['opal$[]']("doctype");
          if ((opal$a = new_backend['opal$start_with?']("xhtml")) !== false && opal$a !== nil) {
            attrs['opal$[]=']("htmlsyntax", "xml");
            new_backend = new_backend['opal$[]'](opal$range(1, -1, false));
          } else if ((opal$a = new_backend['opal$start_with?']("html")) !== false && opal$a !== nil) {
            attrs['opal$[]=']("htmlsyntax", "html")};
          if ((opal$a = (resolved_name = opal$scope.BACKEND_ALIASES['opal$[]'](new_backend))) !== false && opal$a !== nil) {
            new_backend = resolved_name};
          if (current_backend !== false && current_backend !== nil) {
            attrs.opal$delete("backend-" + (current_backend));
            if (current_doctype !== false && current_doctype !== nil) {
              attrs.opal$delete("backend-" + (current_backend) + "-doctype-" + (current_doctype))};};
          if (current_doctype !== false && current_doctype !== nil) {
            attrs['opal$[]=']("doctype-" + (current_doctype), "");
            attrs['opal$[]=']("backend-" + (new_backend) + "-doctype-" + (current_doctype), "");};
          attrs['opal$[]=']("backend", new_backend);
          attrs['opal$[]=']("backend-" + (new_backend), "");
          if ((opal$a = (self.converter = self.opal$create_converter())['opal$is_a?']((opal$scope.Converter)._scope.BackendInfo)) !== false && opal$a !== nil) {
            new_basebackend = self.converter.opal$basebackend();
            attrs['opal$[]=']("outfilesuffix", self.converter.opal$outfilesuffix());
            new_filetype = self.converter.opal$filetype();
            } else {
            new_basebackend = new_backend.opal$sub(opal$scope.TrailingDigitsRx, "");
            new_outfilesuffix = (((opal$a = opal$scope.DEFAULT_EXTENSIONS['opal$[]'](new_basebackend)) !== false && opal$a !== nil) ? opal$a : ".html");
            new_filetype = new_outfilesuffix['opal$[]'](opal$range(1, -1, false));
            if ((opal$a = self['opal$attribute_locked?']("outfilesuffix")) === false || opal$a === nil) {
              attrs['opal$[]=']("outfilesuffix", new_outfilesuffix)};
          };
          if ((opal$a = (current_filetype = attrs['opal$[]']("filetype"))) !== false && opal$a !== nil) {
            attrs.opal$delete("filetype-" + (current_filetype))};
          attrs['opal$[]=']("filetype", new_filetype);
          attrs['opal$[]=']("filetype-" + (new_filetype), "");
          if ((opal$a = (page_width = opal$scope.DEFAULT_PAGE_WIDTHS['opal$[]'](new_basebackend))) !== false && opal$a !== nil) {
            attrs['opal$[]=']("pagewidth", page_width)
            } else {
            attrs.opal$delete("pagewidth")
          };
          if ((opal$a = (opal$b = new_basebackend['opal$=='](current_basebackend), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            if (current_basebackend !== false && current_basebackend !== nil) {
              attrs.opal$delete("basebackend-" + (current_basebackend));
              if (current_doctype !== false && current_doctype !== nil) {
                attrs.opal$delete("basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
            attrs['opal$[]=']("basebackend", new_basebackend);
            attrs['opal$[]=']("basebackend-" + (new_basebackend), "");
            if (current_doctype !== false && current_doctype !== nil) {
              attrs['opal$[]=']("basebackend-" + (new_basebackend) + "-doctype-" + (current_doctype), "")};};
          return self.backend = nil;
          } else {
          return nil
        };
      };

      def.opal$update_doctype_attributes = function(new_doctype) {
        var opal$a, opal$b, opal$c, self = this, attrs = nil, current_doctype = nil, current_backend = nil, current_basebackend = nil;
        if ((opal$a = ((opal$b = new_doctype !== false && new_doctype !== nil) ? (opal$c = new_doctype['opal$=='](self.attributes['opal$[]']("doctype")), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          attrs = self.attributes;
          current_doctype = attrs['opal$[]']("doctype");
          current_backend = attrs['opal$[]']("backend");
          current_basebackend = attrs['opal$[]']("basebackend");
          if (current_doctype !== false && current_doctype !== nil) {
            attrs.opal$delete("doctype-" + (current_doctype));
            if (current_backend !== false && current_backend !== nil) {
              attrs.opal$delete("backend-" + (current_backend) + "-doctype-" + (current_doctype))};
            if (current_basebackend !== false && current_basebackend !== nil) {
              attrs.opal$delete("basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
          attrs['opal$[]=']("doctype", new_doctype);
          attrs['opal$[]=']("doctype-" + (new_doctype), "");
          if (current_backend !== false && current_backend !== nil) {
            attrs['opal$[]=']("backend-" + (current_backend) + "-doctype-" + (new_doctype), "")};
          if (current_basebackend !== false && current_basebackend !== nil) {
            attrs['opal$[]=']("basebackend-" + (current_basebackend) + "-doctype-" + (new_doctype), "")};
          return self.doctype = nil;
          } else {
          return nil
        };
      };

      def.opal$create_converter = function() {
        var opal$a, self = this, converter_opts = nil, template_dirs = nil, template_dir = nil, converter_factory = nil, converter = nil;
        converter_opts = opal$hash2([], {});
        converter_opts['opal$[]=']("htmlsyntax", self.attributes['opal$[]']("htmlsyntax"));
        template_dirs = (function() {if ((opal$a = (template_dir = self.options['opal$[]']("template_dir"))) !== false && opal$a !== nil) {
          return converter_opts['opal$[]=']("template_dirs", [template_dir])
        } else if ((opal$a = (template_dirs = self.options['opal$[]']("template_dirs"))) !== false && opal$a !== nil) {
          return converter_opts['opal$[]=']("template_dirs", template_dirs)
          } else {
          return nil
        }; return nil; })();
        if (template_dirs !== false && template_dirs !== nil) {
          converter_opts['opal$[]=']("template_cache", self.options.opal$fetch("template_cache", true));
          converter_opts['opal$[]=']("template_engine", self.options['opal$[]']("template_engine"));
          converter_opts['opal$[]=']("template_engine_options", self.options['opal$[]']("template_engine_options"));
          converter_opts['opal$[]=']("eruby", self.options['opal$[]']("eruby"));};
        converter_factory = (function() {if ((opal$a = (converter = self.options['opal$[]']("converter"))) !== false && opal$a !== nil) {
          return (opal$scope.Converter)._scope.Factory.opal$new(((opal$a = opal$opal.Object._scope.Hash) == null ? opal$opal.cm('Hash') : opal$a)['opal$[]'](self.opal$backend(), converter))
          } else {
          return (opal$scope.Converter)._scope.Factory.opal$default(false)
        }; return nil; })();
        return converter_factory.opal$create(self.opal$backend(), converter_opts);
      };

      def.opal$convert = function(opts) {
        var opal$a, opal$b, opal$c, TMP_13, self = this, block = nil, output = nil, transform = nil, exts = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = self.parsed) === false || opal$a === nil) {
          self.opal$parse()};
        self.opal$restore_attributes();
        if (self.opal$doctype()['opal$==']("inline")) {
          if ((opal$a = (opal$b = (block = self.blocks['opal$[]'](0)), opal$b !== false && opal$b !== nil ?(opal$c = block.opal$content_model()['opal$==']("compound"), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
            output = block.opal$content()
            } else {
            output = ""
          }
          } else {
          transform = (function() {if ((opal$a = ((function() {if ((opal$b = (opts['opal$key?']("header_footer"))) !== false && opal$b !== nil) {
            return opts['opal$[]']("header_footer")
            } else {
            return self.options['opal$[]']("header_footer")
          }; return nil; })())) !== false && opal$a !== nil) {
            return "document"
            } else {
            return "embedded"
          }; return nil; })();
          output = self.converter.opal$convert(self, transform);
        };
        if ((opal$a = self.parent_document) === false || opal$a === nil) {
          if ((opal$a = (opal$b = (exts = self.extensions), opal$b !== false && opal$b !== nil ?exts['opal$postprocessors?']() : opal$b)) !== false && opal$a !== nil) {
            (opal$a = (opal$b = exts.opal$postprocessors()).opal$each, opal$a._p = (TMP_13 = function(ext){var self = TMP_13._s || this;if (ext == null) ext = nil;
            return output = ext.opal$process_method()['opal$[]'](self, output)}, TMP_13._s = self, TMP_13), opal$a).call(opal$b)}};
        return output;
      };

      opal$opal.defn(self, 'opal$render', def.opal$convert);

      def.opal$write = function(output, target) {
        var opal$a, opal$b, TMP_14, opal$c, self = this;
        if ((opal$a = self.converter['opal$is_a?'](opal$scope.Writer)) !== false && opal$a !== nil) {
          return self.converter.opal$write(output, target)
          } else {
          if ((opal$a = target['opal$respond_to?']("write")) !== false && opal$a !== nil) {
            target.opal$write(output.opal$chomp());
            target.opal$write(opal$scope.EOL);
            } else {
            (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_14 = function(f){var self = TMP_14._s || this;if (f == null) f = nil;
            return f.opal$write(output)}, TMP_14._s = self, TMP_14), opal$a).call(opal$b, target, "w")
          };
          return nil;
        };
      };

      def.opal$content = TMP_15 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var self = this, opal$iter = TMP_15._p, opal$yield = opal$iter || nil;
        TMP_15._p = null;
        self.attributes.opal$delete("title");
        return opal$opal.find_super_dispatcher(self, 'content', TMP_15, opal$iter).apply(self, opal$zuper);
      };

      def.opal$docinfo = function(pos, ext) {
        var opal$a, opal$b, opal$c, self = this, opal$case = nil, qualifier = nil, content = nil, docinfo = nil, docinfo1 = nil, docinfo2 = nil, docinfo_filename = nil, docinfo_path = nil, content2 = nil;
        if (pos == null) {
          pos = "header"
        }
        if (ext == null) {
          ext = nil
        }
        if (self.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SECURE)) {
          return ""
          } else {
          opal$case = pos;if ("footer"['opal$==='](opal$case)) {qualifier = "-footer"}else {qualifier = nil};
          if ((opal$a = ext['opal$nil?']()) !== false && opal$a !== nil) {
            ext = self.attributes['opal$[]']("outfilesuffix")};
          content = nil;
          docinfo = self.attributes['opal$key?']("docinfo");
          docinfo1 = self.attributes['opal$key?']("docinfo1");
          docinfo2 = self.attributes['opal$key?']("docinfo2");
          docinfo_filename = "docinfo" + (qualifier) + (ext);
          if ((opal$a = (((opal$b = docinfo1) !== false && opal$b !== nil) ? opal$b : docinfo2)) !== false && opal$a !== nil) {
            docinfo_path = self.opal$normalize_system_path(docinfo_filename);
            content = self.opal$read_asset(docinfo_path);
            if ((opal$a = content['opal$nil?']()) === false || opal$a === nil) {
              if ((opal$a = opal$scope.FORCE_ENCODING) !== false && opal$a !== nil) {
                content.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_8)};
              content = self.opal$sub_attributes(content.opal$split(opal$scope.EOL))['opal$*'](opal$scope.EOL);};};
          if ((opal$a = (opal$b = ((((opal$c = docinfo) !== false && opal$c !== nil) ? opal$c : docinfo2)), opal$b !== false && opal$b !== nil ?self.attributes['opal$key?']("docname") : opal$b)) !== false && opal$a !== nil) {
            docinfo_path = self.opal$normalize_system_path("" + (self.attributes['opal$[]']("docname")) + "-" + (docinfo_filename));
            content2 = self.opal$read_asset(docinfo_path);
            if ((opal$a = content2['opal$nil?']()) === false || opal$a === nil) {
              if ((opal$a = opal$scope.FORCE_ENCODING) !== false && opal$a !== nil) {
                content2.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_8)};
              content2 = self.opal$sub_attributes(content2.opal$split(opal$scope.EOL))['opal$*'](opal$scope.EOL);
              content = (function() {if ((opal$a = content['opal$nil?']()) !== false && opal$a !== nil) {
                return content2
                } else {
                return "" + (content) + (opal$scope.EOL) + (content2)
              }; return nil; })();};};
          return content.opal$to_s();
        };
      };

      return (def.opal$to_s = function() {
        var opal$a, opal$b, self = this;
        return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {doctype: " + (self.opal$doctype().opal$inspect()) + ", doctitle: " + (((function() {if ((opal$a = (opal$b = self.header['opal$=='](nil), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return self.header.opal$title()
          } else {
          return nil
        }; return nil; })()).opal$inspect()) + ", blocks: " + (self.blocks.opal$size()) + "}>";
      }, nil);
    })(self, opal$scope.AbstractBlock)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Inline(){};
      var self = opal$Inline = opal$klass(opal$base, opal$super, 'Inline', opal$Inline);

      var def = opal$Inline._proto, opal$scope = opal$Inline._scope, TMP_1;
      self.opal$attr_reader("text");

      self.opal$attr_reader("type");

      self.opal$attr_accessor("target");

      def.opal$initialize = TMP_1 = function(parent, context, text, opts) {
        var opal$a, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil, more_attributes = nil;
        if (text == null) {
          text = nil
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [parent, context]);
        self.node_name = "inline_" + (context);
        self.text = text;
        self.id = opts['opal$[]']("id");
        self.type = opts['opal$[]']("type");
        self.target = opts['opal$[]']("target");
        if ((opal$a = ((more_attributes = opts['opal$[]']("attributes")))['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return nil
          } else {
          return self.opal$update_attributes(more_attributes)
        };
      };

      def['opal$block?'] = function() {
        var self = this;
        return false;
      };

      def['opal$inline?'] = function() {
        var self = this;
        return true;
      };

      def.opal$convert = function() {
        var self = this;
        return self.opal$converter().opal$convert(self);
      };

      return opal$opal.defn(self, 'opal$render', def.opal$convert);
    })(self, opal$scope.AbstractNode)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$List(){};
      var self = opal$List = opal$klass(opal$base, opal$super, 'List', opal$List);

      var def = opal$List._proto, opal$scope = opal$List._scope, TMP_1, TMP_2;
      def.blocks = def.context = def.document = def.style = nil;
      opal$opal.defn(self, 'opal$items', def.opal$blocks);

      opal$opal.defn(self, 'opal$items?', def['opal$blocks?']);

      def.opal$initialize = TMP_1 = function(parent, context) {var opal$zuper = opal$slice.call(arguments, 0);
        var self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil;
        TMP_1._p = null;
        return opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, opal$iter).apply(self, opal$zuper);
      };

      def.opal$content = function() {
        var self = this;
        return self.blocks;
      };

      def.opal$convert = TMP_2 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var self = this, opal$iter = TMP_2._p, opal$yield = opal$iter || nil, result = nil;
        TMP_2._p = null;
        if (self.context['opal$==']("colist")) {
          result = opal$opal.find_super_dispatcher(self, 'convert', TMP_2, opal$iter).apply(self, opal$zuper);
          self.document.opal$callouts().opal$next_list();
          return result;
          } else {
          return opal$opal.find_super_dispatcher(self, 'convert', TMP_2, opal$iter).apply(self, opal$zuper)
        };
      };

      opal$opal.defn(self, 'opal$render', def.opal$convert);

      return (def.opal$to_s = function() {
        var self = this;
        return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {context: " + (self.context.opal$inspect()) + ", style: " + (self.style.opal$inspect()) + ", items: " + (self.opal$items().opal$size()) + "}>";
      }, nil);
    })(self, opal$scope.AbstractBlock);

    (function(opal$base, opal$super) {
      function opal$ListItem(){};
      var self = opal$ListItem = opal$klass(opal$base, opal$super, 'ListItem', opal$ListItem);

      var def = opal$ListItem._proto, opal$scope = opal$ListItem._scope, TMP_3;
      def.text = def.blocks = nil;
      self.opal$attr_accessor("marker");

      def.opal$initialize = TMP_3 = function(parent, text) {
        var self = this, opal$iter = TMP_3._p, opal$yield = opal$iter || nil;
        if (text == null) {
          text = nil
        }
        TMP_3._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_3, null).apply(self, [parent, "list_item"]);
        self.text = text;
        return self.level = parent.opal$level();
      };

      def['opal$text?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.text['opal$nil_or_empty?'](), (opal$a === nil || opal$a === false));
      };

      def.opal$text = function() {
        var self = this;
        return self.opal$apply_subs(self.text);
      };

      def.opal$fold_first = function(continuation_connects_first_block, content_adjacent) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, opal$f, opal$g, self = this, first_block = nil, block = nil;
        if (continuation_connects_first_block == null) {
          continuation_connects_first_block = false
        }
        if (content_adjacent == null) {
          content_adjacent = false
        }
        if ((opal$a = (opal$b = (opal$c = (first_block = self.blocks['opal$[]'](0)), opal$c !== false && opal$c !== nil ?first_block['opal$is_a?'](opal$scope.Block) : opal$c), opal$b !== false && opal$b !== nil ?((((opal$c = (((opal$d = first_block.opal$context()['opal$==']("paragraph")) ? (opal$e = continuation_connects_first_block, (opal$e === nil || opal$e === false)) : opal$d))) !== false && opal$c !== nil) ? opal$c : ((opal$d = (opal$e = ((((opal$f = content_adjacent) !== false && opal$f !== nil) ? opal$f : (opal$g = continuation_connects_first_block, (opal$g === nil || opal$g === false)))), opal$e !== false && opal$e !== nil ?first_block.opal$context()['opal$==']("literal") : opal$e), opal$d !== false && opal$d !== nil ?first_block['opal$option?']("listparagraph") : opal$d)))) : opal$b)) !== false && opal$a !== nil) {
          block = self.opal$blocks().opal$shift();
          if ((opal$a = self.text['opal$nil_or_empty?']()) === false || opal$a === nil) {
            block.opal$lines().opal$unshift(self.text)};
          self.text = block.opal$source();};
        return nil;
      };

      return (def.opal$to_s = function() {
        var opal$a, self = this;
        return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {list_context: " + (self.opal$parent().opal$context().opal$inspect()) + ", text: " + (self.text.opal$inspect()) + ", blocks: " + (((((opal$a = self.blocks) !== false && opal$a !== nil) ? opal$a : [])).opal$size()) + "}>";
      }, nil);
    })(self, opal$scope.AbstractBlock);
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range, opal$gvars = opal$opal.gvars;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Parser(){};
      var self = opal$Parser = opal$klass(opal$base, opal$super, 'Parser', opal$Parser);

      var def = opal$Parser._proto, opal$scope = opal$Parser._scope;
      opal$opal.cdecl(opal$scope, 'BlockMatchData', opal$scope.Struct.opal$new("context", "masq", "tip", "terminator"));

      def.opal$initialize = function() {
        var self = this;
        return self.opal$raise("Au contraire, mon frere. No lexer instances will be running around.");
      };

      opal$opal.defs(self, 'opal$parse', function(reader, document, options) {
        var opal$a, opal$b, self = this, block_attributes = nil, new_section = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        block_attributes = self.opal$parse_document_header(reader, document);
        if ((opal$a = options['opal$[]']("header_only")) === false || opal$a === nil) {
          while ((opal$b = reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
          opal$b = opal$opal.to_ary(self.opal$next_section(reader, document, block_attributes)), new_section = (opal$b[0] == null ? nil : opal$b[0]), block_attributes = (opal$b[1] == null ? nil : opal$b[1]);
          if (new_section !== false && new_section !== nil) {
            document['opal$<<'](new_section)};}};
        return document;
      });

      opal$opal.defs(self, 'opal$parse_document_header', function(reader, document) {
        var opal$a, opal$b, opal$c, self = this, block_attributes = nil, assigned_doctitle = nil, val = nil, section_title = nil, _ = nil, doctitle = nil;
        block_attributes = self.opal$parse_block_metadata_lines(reader, document);
        if ((opal$a = block_attributes['opal$has_key?']("title")) !== false && opal$a !== nil) {
          return document.opal$finalize_header(block_attributes, false)};
        assigned_doctitle = nil;
        if ((opal$a = ((val = document.opal$attributes()['opal$[]']("doctitle")))['opal$nil_or_empty?']()) === false || opal$a === nil) {
          document['opal$title='](val);
          assigned_doctitle = val;};
        section_title = nil;
        if ((opal$a = self['opal$is_next_line_document_title?'](reader, block_attributes)) !== false && opal$a !== nil) {
          opal$a = opal$opal.to_ary(self.opal$parse_section_title(reader, document)), document['opal$id=']((opal$a[0] == null ? nil : opal$a[0])), _ = (opal$a[1] == null ? nil : opal$a[1]), doctitle = (opal$a[2] == null ? nil : opal$a[2]), _ = (opal$a[3] == null ? nil : opal$a[3]), _ = (opal$a[4] == null ? nil : opal$a[4]);
          if ((opal$a = assigned_doctitle) === false || opal$a === nil) {
            document['opal$title='](doctitle);
            assigned_doctitle = doctitle;};
          document.opal$attributes()['opal$[]=']("doctitle", section_title = doctitle);
          if ((opal$a = document.opal$id()) === false || opal$a === nil) {
            document['opal$id='](block_attributes.opal$delete("id"))};
          self.opal$parse_header_metadata(reader, document);};
        if ((opal$a = (opal$b = (opal$c = ((val = document.opal$attributes()['opal$[]']("doctitle")))['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$c = val['opal$=='](section_title), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          document['opal$title='](val);
          assigned_doctitle = val;};
        if (assigned_doctitle !== false && assigned_doctitle !== nil) {
          document.opal$attributes()['opal$[]=']("doctitle", assigned_doctitle)};
        if (document.opal$doctype()['opal$==']("manpage")) {
          self.opal$parse_manpage_header(reader, document)};
        return document.opal$finalize_header(block_attributes);
      });

      opal$opal.defs(self, 'opal$parse_manpage_header', function(reader, document) {
        var opal$a, self = this, m = nil, name_section = nil, name_section_buffer = nil;
        if ((opal$a = (m = opal$scope.ManpageTitleVolnumRx.opal$match(document.opal$attributes()['opal$[]']("doctitle")))) !== false && opal$a !== nil) {
          document.opal$attributes()['opal$[]=']("mantitle", document.opal$sub_attributes(m['opal$[]'](1).opal$rstrip().opal$downcase()));
          document.opal$attributes()['opal$[]=']("manvolnum", m['opal$[]'](2).opal$strip());
          } else {
          self.opal$warn("asciidoctor: ERROR: " + (reader.opal$prev_line_info()) + ": malformed manpage title")
        };
        reader.opal$skip_blank_lines();
        if ((opal$a = self['opal$is_next_line_section?'](reader, opal$hash2([], {}))) !== false && opal$a !== nil) {
          name_section = self.opal$initialize_section(reader, document, opal$hash2([], {}));
          if (name_section.opal$level()['opal$=='](1)) {
            name_section_buffer = reader.opal$read_lines_until(opal$hash2(["break_on_blank_lines"], {"break_on_blank_lines": true})).opal$join(" ").opal$tr_s(" ", " ");
            if ((opal$a = (m = opal$scope.ManpageNamePurposeRx.opal$match(name_section_buffer))) !== false && opal$a !== nil) {
              document.opal$attributes()['opal$[]=']("manname", m['opal$[]'](1));
              document.opal$attributes()['opal$[]=']("manpurpose", m['opal$[]'](2));
              if (document.opal$backend()['opal$==']("manpage")) {
                document.opal$attributes()['opal$[]=']("docname", document.opal$attributes()['opal$[]']("manname"));
                return document.opal$attributes()['opal$[]=']("outfilesuffix", "." + (document.opal$attributes()['opal$[]']("manvolnum")));
                } else {
                return nil
              };
              } else {
              return self.opal$warn("asciidoctor: ERROR: " + (reader.opal$prev_line_info()) + ": malformed name section body")
            };
            } else {
            return self.opal$warn("asciidoctor: ERROR: " + (reader.opal$prev_line_info()) + ": name section title must be at level 1")
          };
          } else {
          return self.opal$warn("asciidoctor: ERROR: " + (reader.opal$prev_line_info()) + ": name section expected")
        };
      });

      opal$opal.defs(self, 'opal$next_section', function(reader, parent, attributes) {
        var opal$a, opal$b, opal$c, opal$d, self = this, preamble = nil, part = nil, intro = nil, has_header = nil, doctype = nil, section = nil, current_level = nil, expected_next_levels = nil, title = nil, next_level = nil, new_section = nil, block_line_info = nil, new_block = nil, first_block = nil, document = nil, child_block = nil;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        preamble = false;
        part = false;
        intro = false;
        if ((opal$a = (opal$b = ((opal$c = parent.opal$context()['opal$==']("document")) ? parent.opal$blocks()['opal$empty?']() : opal$c), opal$b !== false && opal$b !== nil ?((((opal$c = (((opal$d = (has_header = parent['opal$has_header?']())) !== false && opal$d !== nil) ? opal$d : attributes.opal$delete("invalid-header"))) !== false && opal$c !== nil) ? opal$c : (opal$d = self['opal$is_next_line_section?'](reader, attributes), (opal$d === nil || opal$d === false)))) : opal$b)) !== false && opal$a !== nil) {
          doctype = parent.opal$doctype();
          if (has_header !== false && has_header !== nil) {
            preamble = intro = opal$scope.Block.opal$new(parent, "preamble", opal$hash2(["content_model"], {"content_model": "compound"}));
            parent['opal$<<'](preamble);};
          section = parent;
          current_level = 0;
          if ((opal$a = parent.opal$attributes()['opal$has_key?']("fragment")) !== false && opal$a !== nil) {
            expected_next_levels = nil
          } else if (doctype['opal$==']("book")) {
            expected_next_levels = [0, 1]
            } else {
            expected_next_levels = [1]
          };
          } else {
          doctype = parent.opal$document().opal$doctype();
          section = self.opal$initialize_section(reader, parent, attributes);
          attributes = (function() {if ((opal$a = (title = attributes['opal$[]']("title"))) !== false && opal$a !== nil) {
            return opal$hash2(["title"], {"title": title})
            } else {
            return opal$hash2([], {})
          }; return nil; })();
          current_level = section.opal$level();
          if ((opal$a = ((opal$b = current_level['opal$=='](0)) ? doctype['opal$==']("book") : opal$b)) !== false && opal$a !== nil) {
            part = (opal$a = section.opal$special(), (opal$a === nil || opal$a === false));
            if ((opal$a = (opal$b = section.opal$special(), opal$b !== false && opal$b !== nil ?(["preface", "appendix"]['opal$include?'](section.opal$sectname())) : opal$b)) !== false && opal$a !== nil) {
              expected_next_levels = [current_level['opal$+'](2)]
              } else {
              expected_next_levels = [current_level['opal$+'](1)]
            };
            } else {
            expected_next_levels = [current_level['opal$+'](1)]
          };
        };
        reader.opal$skip_blank_lines();
        while ((opal$b = reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
        self.opal$parse_block_metadata_lines(reader, section, attributes);
        if ((opal$b = (next_level = self['opal$is_next_line_section?'](reader, attributes))) !== false && opal$b !== nil) {
          next_level = next_level['opal$+'](section.opal$document().opal$attr("leveloffset", 0).opal$to_i());
          if ((opal$b = (((opal$c = next_level['opal$>'](current_level)) !== false && opal$c !== nil) ? opal$c : (((opal$d = section.opal$context()['opal$==']("document")) ? next_level['opal$=='](0) : opal$d)))) !== false && opal$b !== nil) {
            if ((opal$b = ((opal$c = next_level['opal$=='](0)) ? (opal$d = doctype['opal$==']("book"), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
              self.opal$warn("asciidoctor: ERROR: " + (reader.opal$line_info()) + ": only book doctypes can contain level 0 sections")
            } else if ((opal$b = ((opal$c = expected_next_levels !== false && expected_next_levels !== nil) ? (opal$d = expected_next_levels['opal$include?'](next_level), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
              self.opal$warn(((("asciidoctor: WARNING: ") + (reader.opal$line_info())) + ": section title out of sequence: ")['opal$+']("expected " + ((function() {if (expected_next_levels.opal$size()['opal$>'](1)) {
                return "levels"
                } else {
                return "level"
              }; return nil; })()) + " " + (expected_next_levels['opal$*'](" or ")) + ", ")['opal$+']("got level " + (next_level)))};
            opal$b = opal$opal.to_ary(self.opal$next_section(reader, section, attributes)), new_section = (opal$b[0] == null ? nil : opal$b[0]), attributes = (opal$b[1] == null ? nil : opal$b[1]);
            section['opal$<<'](new_section);
            } else {
            if ((opal$b = ((opal$c = next_level['opal$=='](0)) ? (opal$d = doctype['opal$==']("book"), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
              self.opal$warn("asciidoctor: ERROR: " + (reader.opal$line_info()) + ": only book doctypes can contain level 0 sections")};
            break;;
          };
          } else {
          block_line_info = reader.opal$line_info();
          if ((opal$b = (new_block = self.opal$next_block(reader, ((((opal$c = intro) !== false && opal$c !== nil) ? opal$c : section)), attributes, opal$hash2(["parse_metadata"], {"parse_metadata": false})))) !== false && opal$b !== nil) {
            if (part !== false && part !== nil) {
              if ((opal$b = (opal$c = section['opal$blocks?'](), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
                if ((opal$b = (opal$c = new_block.opal$style()['opal$==']("partintro"), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
                  if (new_block.opal$context()['opal$==']("paragraph")) {
                    new_block['opal$context=']("open");
                    new_block['opal$style=']("partintro");
                    } else {
                    intro = opal$scope.Block.opal$new(section, "open", opal$hash2(["content_model"], {"content_model": "compound"}));
                    intro['opal$style=']("partintro");
                    new_block['opal$parent='](intro);
                    section['opal$<<'](intro);
                  }}
              } else if (section.opal$blocks().opal$size()['opal$=='](1)) {
                first_block = section.opal$blocks()['opal$[]'](0);
                if ((opal$b = (opal$c = (opal$d = intro, (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?first_block.opal$content_model()['opal$==']("compound") : opal$c)) !== false && opal$b !== nil) {
                  self.opal$warn("asciidoctor: ERROR: " + (block_line_info) + ": illegal block content outside of partintro block")
                } else if ((opal$b = (opal$c = first_block.opal$content_model()['opal$==']("compound"), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
                  intro = opal$scope.Block.opal$new(section, "open", opal$hash2(["content_model"], {"content_model": "compound"}));
                  intro['opal$style=']("partintro");
                  section.opal$blocks().opal$shift();
                  if (first_block.opal$style()['opal$==']("partintro")) {
                    first_block['opal$context=']("paragraph");
                    first_block['opal$style='](nil);};
                  first_block['opal$parent='](intro);
                  intro['opal$<<'](first_block);
                  new_block['opal$parent='](intro);
                  section['opal$<<'](intro);};}};
            ((((opal$b = intro) !== false && opal$b !== nil) ? opal$b : section))['opal$<<'](new_block);
            attributes = opal$hash2([], {});};
        };
        reader.opal$skip_blank_lines();};
        if (part !== false && part !== nil) {
          if ((opal$a = (opal$b = section['opal$blocks?'](), opal$b !== false && opal$b !== nil ?section.opal$blocks()['opal$[]'](-1).opal$context()['opal$==']("section") : opal$b)) === false || opal$a === nil) {
            self.opal$warn("asciidoctor: ERROR: " + (reader.opal$line_info()) + ": invalid part, must have at least one section (e.g., chapter, appendix, etc.)")}
        } else if (preamble !== false && preamble !== nil) {
          document = parent;
          if ((opal$a = preamble['opal$blocks?']()) !== false && opal$a !== nil) {
            if ((opal$a = (opal$b = (opal$c = opal$scope.Compliance.opal$unwrap_standalone_preamble(), opal$c !== false && opal$c !== nil ?document.opal$blocks().opal$size()['opal$=='](1) : opal$c), opal$b !== false && opal$b !== nil ?((((opal$c = (opal$d = doctype['opal$==']("book"), (opal$d === nil || opal$d === false))) !== false && opal$c !== nil) ? opal$c : (opal$d = preamble.opal$blocks()['opal$[]'](0).opal$style()['opal$==']("abstract"), (opal$d === nil || opal$d === false)))) : opal$b)) !== false && opal$a !== nil) {
              document.opal$blocks().opal$shift();
              while ((opal$b = (child_block = preamble.opal$blocks().opal$shift())) !== false && opal$b !== nil) {
              child_block['opal$parent='](document);
              document['opal$<<'](child_block);};}
            } else {
            document.opal$blocks().opal$shift()
          };};
        return [(function() {if ((opal$a = (opal$b = section['opal$=='](parent), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return section
          } else {
          return nil
        }; return nil; })(), attributes.opal$dup()];
      });

      opal$opal.defs(self, 'opal$next_block', function(reader, parent, attributes, options) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, TMP_1, opal$f, TMP_2, opal$g, TMP_3, TMP_4, opal$h, opal$i, opal$j, TMP_5, opal$k, opal$l, opal$m, TMP_6, TMP_7, self = this, skipped = nil, text_only = nil, parse_metadata = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, in_list = nil, block = nil, style = nil, explicit_style = nil, this_line = nil, delimited_block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_blk_match = nil, first_char = nil, match = nil, blk_ctx = nil, posattrs = nil, target = nil, extension = nil, raw_attributes = nil, default_attrs = nil, expected_index = nil, list_item = nil, coids = nil, marker = nil, float_id = nil, float_reftext = nil, float_title = nil, float_level = nil, _ = nil, tmp_sect = nil, break_at_list = nil, lines = nil, first_line = nil, admonition_match = nil, admonition_name = nil, attribution = nil, citetitle = nil, first_line_shifted = nil, indent = nil, opal$case = nil, language = nil, linenums = nil, default_math_syntax = nil, cursor = nil, block_reader = nil, content_model = nil, pos_attrs = nil, resolved_target = nil, scaledwidth = nil, block_id = nil;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        if (options == null) {
          options = opal$hash2([], {})
        }
        skipped = reader.opal$skip_blank_lines();
        if ((opal$a = reader['opal$has_more_lines?']()) === false || opal$a === nil) {
          return nil};
        if ((opal$a = (opal$b = (text_only = options['opal$[]']("text")), opal$b !== false && opal$b !== nil ?skipped['opal$>'](0) : opal$b)) !== false && opal$a !== nil) {
          options.opal$delete("text");
          text_only = false;};
        parse_metadata = options.opal$fetch("parse_metadata", true);
        document = parent.opal$document();
        if ((opal$a = (extensions = document.opal$extensions())) !== false && opal$a !== nil) {
          block_extensions = extensions['opal$blocks?']();
          block_macro_extensions = extensions['opal$block_macros?']();
          } else {
          block_extensions = block_macro_extensions = false
        };
        in_list = (parent['opal$is_a?'](opal$scope.List));
        block = nil;
        style = nil;
        explicit_style = nil;
        while ((opal$b = (opal$c = (opal$d = block, (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?reader['opal$has_more_lines?']() : opal$c)) !== false && opal$b !== nil) {
        if ((opal$b = ((opal$c = parse_metadata !== false && parse_metadata !== nil) ? self.opal$parse_block_metadata_line(reader, document, attributes, options) : opal$c)) !== false && opal$b !== nil) {
          reader.opal$advance();
          continue;;};
        this_line = reader.opal$read_line();
        delimited_block = false;
        block_context = nil;
        cloaked_context = nil;
        terminator = nil;
        if ((opal$b = attributes['opal$[]'](1)) !== false && opal$b !== nil) {
          opal$b = opal$opal.to_ary(self.opal$parse_style_attribute(attributes, reader)), style = (opal$b[0] == null ? nil : opal$b[0]), explicit_style = (opal$b[1] == null ? nil : opal$b[1])};
        if ((opal$b = (delimited_blk_match = self['opal$is_delimited_block?'](this_line, true))) !== false && opal$b !== nil) {
          delimited_block = true;
          block_context = cloaked_context = delimited_blk_match.opal$context();
          terminator = delimited_blk_match.opal$terminator();
          if ((opal$b = (opal$c = style, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
            style = attributes['opal$[]=']("style", block_context.opal$to_s())
          } else if ((opal$b = (opal$c = style['opal$=='](block_context.opal$to_s()), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
            if ((opal$b = delimited_blk_match.opal$masq()['opal$include?'](style)) !== false && opal$b !== nil) {
              block_context = style.opal$to_sym()
            } else if ((opal$b = (opal$c = delimited_blk_match.opal$masq()['opal$include?']("admonition"), opal$c !== false && opal$c !== nil ?opal$scope.ADMONITION_STYLES['opal$include?'](style) : opal$c)) !== false && opal$b !== nil) {
              block_context = "admonition"
            } else if ((opal$b = ((opal$c = block_extensions !== false && block_extensions !== nil) ? extensions['opal$registered_for_block?'](style, block_context) : opal$c)) !== false && opal$b !== nil) {
              block_context = style.opal$to_sym()
              } else {
              self.opal$warn("asciidoctor: WARNING: " + (reader.opal$prev_line_info()) + ": invalid style for " + (block_context) + " block: " + (style));
              style = block_context.opal$to_s();
            }};};
        if ((opal$b = delimited_block) === false || opal$b === nil) {
          while ((opal$c = true) !== false && opal$c !== nil) {
          if ((opal$c = (opal$d = ((opal$e = style !== false && style !== nil) ? opal$scope.Compliance.opal$strict_verbatim_paragraphs() : opal$e), opal$d !== false && opal$d !== nil ?opal$scope.VERBATIM_STYLES['opal$include?'](style) : opal$d)) !== false && opal$c !== nil) {
            block_context = style.opal$to_sym();
            reader.opal$unshift_line(this_line);
            break;;};
          if ((opal$c = text_only) === false || opal$c === nil) {
            first_char = (function() {if ((opal$c = opal$scope.Compliance.opal$markdown_syntax()) !== false && opal$c !== nil) {
              return this_line.opal$lstrip().opal$chr()
              } else {
              return this_line.opal$chr()
            }; return nil; })();
            if ((opal$c = (opal$d = (opal$e = (opal$scope.LAYOUT_BREAK_LINES['opal$has_key?'](first_char)), opal$e !== false && opal$e !== nil ?this_line.opal$length()['opal$>='](3) : opal$e), opal$d !== false && opal$d !== nil ?((function() {if ((opal$e = opal$scope.Compliance.opal$markdown_syntax()) !== false && opal$e !== nil) {
              return opal$scope.LayoutBreakLinePlusRx
              } else {
              return opal$scope.LayoutBreakLineRx
            }; return nil; })())['opal$=~'](this_line) : opal$d)) !== false && opal$c !== nil) {
              block = opal$scope.Block.opal$new(parent, opal$scope.LAYOUT_BREAK_LINES['opal$[]'](first_char), opal$hash2(["content_model"], {"content_model": "empty"}));
              break;;
            } else if ((opal$c = (opal$d = this_line['opal$end_with?']("]"), opal$d !== false && opal$d !== nil ?(match = opal$scope.MediaBlockMacroRx.opal$match(this_line)) : opal$d)) !== false && opal$c !== nil) {
              blk_ctx = match['opal$[]'](1).opal$to_sym();
              block = opal$scope.Block.opal$new(parent, blk_ctx, opal$hash2(["content_model"], {"content_model": "empty"}));
              if (blk_ctx['opal$==']("image")) {
                posattrs = ["alt", "width", "height"]
              } else if (blk_ctx['opal$==']("video")) {
                posattrs = ["poster", "width", "height"]
                } else {
                posattrs = []
              };
              if ((opal$c = (((opal$d = (opal$e = style, (opal$e === nil || opal$e === false))) !== false && opal$d !== nil) ? opal$d : explicit_style)) === false || opal$c === nil) {
                if (blk_ctx['opal$==']("image")) {
                  attributes['opal$[]=']("alt", style)};
                attributes.opal$delete("style");
                style = nil;};
              block.opal$parse_attributes(match['opal$[]'](3), posattrs, opal$hash2(["unescape_input", "sub_input", "sub_result", "into"], {"unescape_input": (blk_ctx['opal$==']("image")), "sub_input": true, "sub_result": false, "into": attributes}));
              target = block.opal$sub_attributes(match['opal$[]'](2), opal$hash2(["attribute_missing"], {"attribute_missing": "drop-line"}));
              if ((opal$c = target['opal$empty?']()) !== false && opal$c !== nil) {
                if (document.opal$attributes().opal$fetch("attribute-missing", opal$scope.Compliance.opal$attribute_missing())['opal$==']("skip")) {
                  return opal$scope.Block.opal$new(parent, "paragraph", opal$hash2(["content_model", "source"], {"content_model": "simple", "source": [this_line]}))
                  } else {
                  attributes.opal$clear();
                  return nil;
                }};
              attributes['opal$[]=']("target", target);
              break;;
            } else if ((opal$c = ((opal$d = first_char['opal$==']("t")) ? (match = opal$scope.TocBlockMacroRx.opal$match(this_line)) : opal$d)) !== false && opal$c !== nil) {
              block = opal$scope.Block.opal$new(parent, "toc", opal$hash2(["content_model"], {"content_model": "empty"}));
              block.opal$parse_attributes(match['opal$[]'](1), [], opal$hash2(["sub_result", "into"], {"sub_result": false, "into": attributes}));
              break;;
            } else if ((opal$c = (opal$d = ((opal$e = block_macro_extensions !== false && block_macro_extensions !== nil) ? (match = opal$scope.GenericBlockMacroRx.opal$match(this_line)) : opal$e), opal$d !== false && opal$d !== nil ?(extension = extensions['opal$registered_for_block_macro?'](match['opal$[]'](1))) : opal$d)) !== false && opal$c !== nil) {
              target = match['opal$[]'](2);
              raw_attributes = match['opal$[]'](3);
              if (extension.opal$config()['opal$[]']("content_model")['opal$==']("attributes")) {
                if ((opal$c = raw_attributes['opal$empty?']()) === false || opal$c === nil) {
                  document.opal$parse_attributes(raw_attributes, ((((opal$c = extension.opal$config()['opal$[]']("pos_attrs")) !== false && opal$c !== nil) ? opal$c : [])), opal$hash2(["sub_input", "sub_result", "into"], {"sub_input": true, "sub_result": false, "into": attributes}))}
                } else {
                attributes['opal$[]=']("text", raw_attributes)
              };
              if ((opal$c = (default_attrs = extension.opal$config()['opal$[]']("default_attrs"))) !== false && opal$c !== nil) {
                (opal$c = (opal$d = default_attrs).opal$each, opal$c._p = (TMP_1 = function(k, v){var self = TMP_1._s || this, opal$a, opal$b, opal$c;if (k == null) k = nil;if (v == null) v = nil;
                return (opal$a = k, opal$b = attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, v)))}, TMP_1._s = self, TMP_1), opal$c).call(opal$d)};
              if ((opal$c = (block = extension.opal$process_method()['opal$[]'](parent, target, attributes.opal$dup()))) !== false && opal$c !== nil) {
                attributes.opal$replace(block.opal$attributes())
                } else {
                attributes.opal$clear();
                return nil;
              };
              break;;};};
          if ((opal$c = (match = opal$scope.CalloutListRx.opal$match(this_line))) !== false && opal$c !== nil) {
            block = opal$scope.List.opal$new(parent, "colist");
            attributes['opal$[]=']("style", "arabic");
            reader.opal$unshift_line(this_line);
            expected_index = 1;
            while ((opal$e = (opal$f = reader['opal$has_more_lines?'](), opal$f !== false && opal$f !== nil ?(match = opal$scope.CalloutListRx.opal$match(reader.opal$peek_line())) : opal$f)) !== false && opal$e !== nil) {
            if ((opal$e = (opal$f = match['opal$[]'](1).opal$to_i()['opal$=='](expected_index), (opal$f === nil || opal$f === false))) !== false && opal$e !== nil) {
              self.opal$warn("asciidoctor: WARNING: " + (reader.opal$path()) + ": line " + (reader.opal$lineno()['opal$-'](2)) + ": callout list item index: expected " + (expected_index) + " got " + (match['opal$[]'](1)))};
            list_item = self.opal$next_list_item(reader, block, match);
            expected_index = expected_index['opal$+'](1);
            if (list_item !== false && list_item !== nil) {
              block['opal$<<'](list_item);
              coids = document.opal$callouts().opal$callout_ids(block.opal$items().opal$size());
              if ((opal$e = (opal$f = coids['opal$empty?'](), (opal$f === nil || opal$f === false))) !== false && opal$e !== nil) {
                list_item.opal$attributes()['opal$[]=']("coids", coids)
                } else {
                self.opal$warn("asciidoctor: WARNING: " + (reader.opal$path()) + ": line " + (reader.opal$lineno()['opal$-'](2)) + ": no callouts refer to list item " + (block.opal$items().opal$size()))
              };};};
            document.opal$callouts().opal$next_list();
            break;;
          } else if ((opal$c = opal$scope.UnorderedListRx['opal$=~'](this_line)) !== false && opal$c !== nil) {
            reader.opal$unshift_line(this_line);
            block = self.opal$next_outline_list(reader, "ulist", parent);
            break;;
          } else if ((opal$c = (match = opal$scope.OrderedListRx.opal$match(this_line))) !== false && opal$c !== nil) {
            reader.opal$unshift_line(this_line);
            block = self.opal$next_outline_list(reader, "olist", parent);
            if ((opal$c = (opal$e = (opal$f = attributes['opal$[]']("style"), (opal$f === nil || opal$f === false)), opal$e !== false && opal$e !== nil ?(opal$f = block.opal$attributes()['opal$[]']("style"), (opal$f === nil || opal$f === false)) : opal$e)) !== false && opal$c !== nil) {
              marker = block.opal$items()['opal$[]'](0).opal$marker();
              if ((opal$c = marker['opal$start_with?'](".")) !== false && opal$c !== nil) {
                attributes['opal$[]=']("style", ((((opal$c = opal$scope.ORDERED_LIST_STYLES['opal$[]'](marker.opal$length()['opal$-'](1))) !== false && opal$c !== nil) ? opal$c : opal$scope.ORDERED_LIST_STYLES['opal$[]'](0))).opal$to_s())
                } else {
                style = (opal$c = (opal$e = opal$scope.ORDERED_LIST_STYLES).opal$detect, opal$c._p = (TMP_2 = function(s){var self = TMP_2._s || this;if (s == null) s = nil;
                return opal$scope.OrderedListMarkerRxMap['opal$[]'](s)['opal$=~'](marker)}, TMP_2._s = self, TMP_2), opal$c).call(opal$e);
                attributes['opal$[]=']("style", ((((opal$c = style) !== false && opal$c !== nil) ? opal$c : opal$scope.ORDERED_LIST_STYLES['opal$[]'](0))).opal$to_s());
              };};
            break;;
          } else if ((opal$c = (match = opal$scope.DefinitionListRx.opal$match(this_line))) !== false && opal$c !== nil) {
            reader.opal$unshift_line(this_line);
            block = self.opal$next_labeled_list(reader, match, parent);
            break;;
          } else if ((opal$c = (opal$f = ((((opal$g = style['opal$==']("float")) !== false && opal$g !== nil) ? opal$g : style['opal$==']("discrete"))), opal$f !== false && opal$f !== nil ?self['opal$is_section_title?'](this_line, ((function() {if ((opal$g = opal$scope.Compliance.opal$underline_style_section_titles()) !== false && opal$g !== nil) {
            return reader.opal$peek_line(true)
            } else {
            return nil
          }; return nil; })())) : opal$f)) !== false && opal$c !== nil) {
            reader.opal$unshift_line(this_line);
            opal$c = opal$opal.to_ary(self.opal$parse_section_title(reader, document)), float_id = (opal$c[0] == null ? nil : opal$c[0]), float_reftext = (opal$c[1] == null ? nil : opal$c[1]), float_title = (opal$c[2] == null ? nil : opal$c[2]), float_level = (opal$c[3] == null ? nil : opal$c[3]), _ = (opal$c[4] == null ? nil : opal$c[4]);
            if (float_reftext !== false && float_reftext !== nil) {
              attributes['opal$[]=']("reftext", float_reftext)};
            if ((opal$c = attributes['opal$has_key?']("id")) !== false && opal$c !== nil) {
              (((opal$c = float_id) !== false && opal$c !== nil) ? opal$c : float_id = attributes['opal$[]']("id"))};
            block = opal$scope.Block.opal$new(parent, "floating_title", opal$hash2(["content_model"], {"content_model": "empty"}));
            if ((opal$c = float_id['opal$nil_or_empty?']()) !== false && opal$c !== nil) {
              tmp_sect = opal$scope.Section.opal$new(parent);
              tmp_sect['opal$title='](float_title);
              block['opal$id='](tmp_sect.opal$generate_id());
              } else {
              block['opal$id='](float_id)
            };
            block['opal$level='](float_level);
            block['opal$title='](float_title);
            break;;
          } else if ((opal$c = ((opal$f = style !== false && style !== nil) ? (opal$g = style['opal$==']("normal"), (opal$g === nil || opal$g === false)) : opal$f)) !== false && opal$c !== nil) {
            if ((opal$c = opal$scope.PARAGRAPH_STYLES['opal$include?'](style)) !== false && opal$c !== nil) {
              block_context = style.opal$to_sym();
              cloaked_context = "paragraph";
              reader.opal$unshift_line(this_line);
              break;;
            } else if ((opal$c = opal$scope.ADMONITION_STYLES['opal$include?'](style)) !== false && opal$c !== nil) {
              block_context = "admonition";
              cloaked_context = "paragraph";
              reader.opal$unshift_line(this_line);
              break;;
            } else if ((opal$c = ((opal$f = block_extensions !== false && block_extensions !== nil) ? extensions['opal$registered_for_block?'](style, "paragraph") : opal$f)) !== false && opal$c !== nil) {
              block_context = style.opal$to_sym();
              cloaked_context = "paragraph";
              reader.opal$unshift_line(this_line);
              break;;
              } else {
              self.opal$warn("asciidoctor: WARNING: " + (reader.opal$prev_line_info()) + ": invalid style for paragraph: " + (style));
              style = nil;
            }};
          break_at_list = (((opal$c = skipped['opal$=='](0)) ? in_list : opal$c));
          if ((opal$c = (opal$f = (opal$g = style['opal$==']("normal"), (opal$g === nil || opal$g === false)), opal$f !== false && opal$f !== nil ?opal$scope.LiteralParagraphRx['opal$=~'](this_line) : opal$f)) !== false && opal$c !== nil) {
            reader.opal$unshift_line(this_line);
            lines = (opal$c = (opal$f = reader).opal$read_lines_until, opal$c._p = (TMP_3 = function(line){var self = TMP_3._s || this, opal$a, opal$b, opal$c;if (line == null) line = nil;
            return (((opal$a = (((opal$b = break_at_list !== false && break_at_list !== nil) ? opal$scope.AnyListRx['opal$=~'](line) : opal$b))) !== false && opal$a !== nil) ? opal$a : ((opal$b = opal$scope.Compliance.opal$block_terminates_paragraph(), opal$b !== false && opal$b !== nil ?((((opal$c = self['opal$is_delimited_block?'](line)) !== false && opal$c !== nil) ? opal$c : opal$scope.BlockAttributeLineRx['opal$=~'](line))) : opal$b)))}, TMP_3._s = self, TMP_3), opal$c).call(opal$f, opal$hash2(["break_on_blank_lines", "break_on_list_continuation", "preserve_last_line"], {"break_on_blank_lines": true, "break_on_list_continuation": true, "preserve_last_line": true}));
            self['opal$reset_block_indent!'](lines);
            block = opal$scope.Block.opal$new(parent, "literal", opal$hash2(["content_model", "source", "attributes"], {"content_model": "verbatim", "source": lines, "attributes": attributes}));
            if (in_list !== false && in_list !== nil) {
              block.opal$set_option("listparagraph")};
            } else {
            reader.opal$unshift_line(this_line);
            lines = (opal$c = (opal$g = reader).opal$read_lines_until, opal$c._p = (TMP_4 = function(line){var self = TMP_4._s || this, opal$a, opal$b, opal$c;if (line == null) line = nil;
            return (((opal$a = (((opal$b = break_at_list !== false && break_at_list !== nil) ? opal$scope.AnyListRx['opal$=~'](line) : opal$b))) !== false && opal$a !== nil) ? opal$a : ((opal$b = opal$scope.Compliance.opal$block_terminates_paragraph(), opal$b !== false && opal$b !== nil ?((((opal$c = self['opal$is_delimited_block?'](line)) !== false && opal$c !== nil) ? opal$c : opal$scope.BlockAttributeLineRx['opal$=~'](line))) : opal$b)))}, TMP_4._s = self, TMP_4), opal$c).call(opal$g, opal$hash2(["break_on_blank_lines", "break_on_list_continuation", "preserve_last_line", "skip_line_comments"], {"break_on_blank_lines": true, "break_on_list_continuation": true, "preserve_last_line": true, "skip_line_comments": true}));
            if ((opal$c = lines['opal$empty?']()) !== false && opal$c !== nil) {
              reader.opal$advance();
              return nil;};
            self.opal$catalog_inline_anchors(lines.opal$join(opal$scope.EOL), document);
            first_line = lines['opal$[]'](0);
            if ((opal$c = (opal$h = (opal$i = text_only, (opal$i === nil || opal$i === false)), opal$h !== false && opal$h !== nil ?(admonition_match = opal$scope.AdmonitionParagraphRx.opal$match(first_line)) : opal$h)) !== false && opal$c !== nil) {
              lines['opal$[]='](0, admonition_match.opal$post_match().opal$lstrip());
              attributes['opal$[]=']("style", admonition_match['opal$[]'](1));
              attributes['opal$[]=']("name", admonition_name = admonition_match['opal$[]'](1).opal$downcase());
              (opal$c = "caption", opal$h = attributes, (((opal$i = opal$h['opal$[]'](opal$c)) !== false && opal$i !== nil) ? opal$i : opal$h['opal$[]='](opal$c, document.opal$attributes()['opal$[]']("" + (admonition_name) + "-caption"))));
              block = opal$scope.Block.opal$new(parent, "admonition", opal$hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
            } else if ((opal$c = (opal$h = (opal$i = (opal$j = text_only, (opal$j === nil || opal$j === false)), opal$i !== false && opal$i !== nil ?opal$scope.Compliance.opal$markdown_syntax() : opal$i), opal$h !== false && opal$h !== nil ?first_line['opal$start_with?']("> ") : opal$h)) !== false && opal$c !== nil) {
              (opal$c = (opal$h = lines)['opal$map!'], opal$c._p = (TMP_5 = function(line){var self = TMP_5._s || this, opal$a;if (line == null) line = nil;
              if (line['opal$=='](">")) {
                  return line['opal$[]'](opal$range(1, -1, false))
                } else if ((opal$a = line['opal$start_with?']("> ")) !== false && opal$a !== nil) {
                  return line['opal$[]'](opal$range(2, -1, false))
                  } else {
                  return line
                }}, TMP_5._s = self, TMP_5), opal$c).call(opal$h);
              if ((opal$c = lines['opal$[]'](-1)['opal$start_with?']("-- ")) !== false && opal$c !== nil) {
                opal$c = opal$opal.to_ary(lines.opal$pop()['opal$[]'](opal$range(3, -1, false)).opal$split(", ", 2)), attribution = (opal$c[0] == null ? nil : opal$c[0]), citetitle = (opal$c[1] == null ? nil : opal$c[1]);
                while ((opal$i = lines['opal$[]'](-1)['opal$empty?']()) !== false && opal$i !== nil) {
                lines.opal$pop()};
                } else {
                opal$c = opal$opal.to_ary(nil), attribution = (opal$c[0] == null ? nil : opal$c[0]), citetitle = (opal$c[1] == null ? nil : opal$c[1])
              };
              attributes['opal$[]=']("style", "quote");
              if (attribution !== false && attribution !== nil) {
                attributes['opal$[]=']("attribution", attribution)};
              if (citetitle !== false && citetitle !== nil) {
                attributes['opal$[]=']("citetitle", citetitle)};
              block = self.opal$build_block("quote", "compound", false, parent, opal$scope.Reader.opal$new(lines), attributes);
            } else if ((opal$c = (opal$i = (opal$j = (opal$k = (opal$l = (opal$m = text_only, (opal$m === nil || opal$m === false)), opal$l !== false && opal$l !== nil ?lines.opal$size()['opal$>'](1) : opal$l), opal$k !== false && opal$k !== nil ?first_line['opal$start_with?']("\"") : opal$k), opal$j !== false && opal$j !== nil ?lines['opal$[]'](-1)['opal$start_with?']("-- ") : opal$j), opal$i !== false && opal$i !== nil ?lines['opal$[]'](-2)['opal$end_with?']("\"") : opal$i)) !== false && opal$c !== nil) {
              lines['opal$[]='](0, first_line['opal$[]'](opal$range(1, -1, false)));
              opal$c = opal$opal.to_ary(lines.opal$pop()['opal$[]'](opal$range(3, -1, false)).opal$split(", ", 2)), attribution = (opal$c[0] == null ? nil : opal$c[0]), citetitle = (opal$c[1] == null ? nil : opal$c[1]);
              while ((opal$i = lines['opal$[]'](-1)['opal$empty?']()) !== false && opal$i !== nil) {
              lines.opal$pop()};
              lines['opal$[]='](-1, lines['opal$[]'](-1).opal$chop());
              attributes['opal$[]=']("style", "quote");
              if (attribution !== false && attribution !== nil) {
                attributes['opal$[]=']("attribution", attribution)};
              if (citetitle !== false && citetitle !== nil) {
                attributes['opal$[]=']("citetitle", citetitle)};
              block = opal$scope.Block.opal$new(parent, "quote", opal$hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
              } else {
              if ((opal$c = ((opal$i = style['opal$==']("normal")) ? ((((opal$j = ((first_char = lines['opal$[]'](0).opal$chr()))['opal$=='](" ")) !== false && opal$j !== nil) ? opal$j : first_char['opal$=='](opal$scope.TAB))) : opal$i)) !== false && opal$c !== nil) {
                first_line = lines['opal$[]'](0);
                first_line_shifted = first_line.opal$lstrip();
                indent = self.opal$line_length(first_line)['opal$-'](self.opal$line_length(first_line_shifted));
                lines['opal$[]='](0, first_line_shifted);
                (opal$c = (opal$i = lines.opal$size()).opal$times, opal$c._p = (TMP_6 = function(i){var self = TMP_6._s || this;if (i == null) i = nil;
                if (i['opal$>'](0)) {
                    return lines['opal$[]='](i, lines['opal$[]'](i)['opal$[]'](opal$range(indent, -1, false)))
                    } else {
                    return nil
                  }}, TMP_6._s = self, TMP_6), opal$c).call(opal$i);};
              block = opal$scope.Block.opal$new(parent, "paragraph", opal$hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
            };
          };
          break;;}};
        if ((opal$b = (opal$c = (opal$j = block, (opal$j === nil || opal$j === false)), opal$c !== false && opal$c !== nil ?block_context : opal$c)) !== false && opal$b !== nil) {
          if ((opal$b = (((opal$c = block_context['opal$==']("abstract")) !== false && opal$c !== nil) ? opal$c : block_context['opal$==']("partintro"))) !== false && opal$b !== nil) {
            block_context = "open"};
          opal$case = block_context;if ("admonition"['opal$==='](opal$case)) {attributes['opal$[]=']("name", admonition_name = style.opal$downcase());
          (opal$b = "caption", opal$c = attributes, (((opal$j = opal$c['opal$[]'](opal$b)) !== false && opal$j !== nil) ? opal$j : opal$c['opal$[]='](opal$b, document.opal$attributes()['opal$[]']("" + (admonition_name) + "-caption"))));
          block = self.opal$build_block(block_context, "compound", terminator, parent, reader, attributes);}else if ("comment"['opal$==='](opal$case)) {self.opal$build_block(block_context, "skip", terminator, parent, reader, attributes);
          return nil;}else if ("example"['opal$==='](opal$case)) {block = self.opal$build_block(block_context, "compound", terminator, parent, reader, attributes)}else if ("listing"['opal$==='](opal$case) || "fenced_code"['opal$==='](opal$case) || "source"['opal$==='](opal$case)) {if (block_context['opal$==']("fenced_code")) {
            style = attributes['opal$[]=']("style", "source");
            opal$b = opal$opal.to_ary(this_line['opal$[]'](opal$range(3, -1, false)).opal$split(",", 2)), language = (opal$b[0] == null ? nil : opal$b[0]), linenums = (opal$b[1] == null ? nil : opal$b[1]);
            if ((opal$b = ((opal$c = language !== false && language !== nil) ? (opal$j = ((language = language.opal$strip()))['opal$empty?'](), (opal$j === nil || opal$j === false)) : opal$c)) !== false && opal$b !== nil) {
              attributes['opal$[]=']("language", language);
              if ((opal$b = ((opal$c = linenums !== false && linenums !== nil) ? (opal$j = linenums.opal$strip()['opal$empty?'](), (opal$j === nil || opal$j === false)) : opal$c)) !== false && opal$b !== nil) {
                attributes['opal$[]=']("linenums", "")};};
            terminator = terminator['opal$[]'](opal$range(0, 2, false));
          } else if (block_context['opal$==']("source")) {
            opal$scope.AttributeList.opal$rekey(attributes, [nil, "language", "linenums"])};
          block = self.opal$build_block("listing", "verbatim", terminator, parent, reader, attributes);}else if ("literal"['opal$==='](opal$case)) {block = self.opal$build_block(block_context, "verbatim", terminator, parent, reader, attributes)}else if ("pass"['opal$==='](opal$case)) {block = self.opal$build_block(block_context, "raw", terminator, parent, reader, attributes)}else if ("math"['opal$==='](opal$case) || "latexmath"['opal$==='](opal$case) || "asciimath"['opal$==='](opal$case)) {if (block_context['opal$==']("math")) {
            attributes['opal$[]=']("style", (function() {if ((opal$b = ((default_math_syntax = document.opal$attributes()['opal$[]']("math")))['opal$nil_or_empty?']()) !== false && opal$b !== nil) {
              return "asciimath"
              } else {
              return default_math_syntax
            }; return nil; })())};
          block = self.opal$build_block("math", "raw", terminator, parent, reader, attributes);}else if ("open"['opal$==='](opal$case) || "sidebar"['opal$==='](opal$case)) {block = self.opal$build_block(block_context, "compound", terminator, parent, reader, attributes)}else if ("table"['opal$==='](opal$case)) {cursor = reader.opal$cursor();
          block_reader = opal$scope.Reader.opal$new(reader.opal$read_lines_until(opal$hash2(["terminator", "skip_line_comments"], {"terminator": terminator, "skip_line_comments": true})), cursor);
          opal$case = terminator.opal$chr();if (","['opal$==='](opal$case)) {attributes['opal$[]=']("format", "csv")}else if (":"['opal$==='](opal$case)) {attributes['opal$[]=']("format", "dsv")};
          block = self.opal$next_table(block_reader, parent, attributes);}else if ("quote"['opal$==='](opal$case) || "verse"['opal$==='](opal$case)) {opal$scope.AttributeList.opal$rekey(attributes, [nil, "attribution", "citetitle"]);
          block = self.opal$build_block(block_context, ((function() {if (block_context['opal$==']("verse")) {
            return "verbatim"
            } else {
            return "compound"
          }; return nil; })()), terminator, parent, reader, attributes);}else {if ((opal$b = ((opal$c = block_extensions !== false && block_extensions !== nil) ? (extension = extensions['opal$registered_for_block?'](block_context, cloaked_context)) : opal$c)) !== false && opal$b !== nil) {
            if ((opal$b = (opal$c = ((content_model = extension.opal$config()['opal$[]']("content_model")))['opal$==']("skip"), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
              if ((opal$b = (opal$c = ((pos_attrs = (((opal$j = extension.opal$config()['opal$[]']("pos_attrs")) !== false && opal$j !== nil) ? opal$j : [])))['opal$empty?'](), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
                opal$scope.AttributeList.opal$rekey(attributes, [nil].opal$concat(pos_attrs))};
              if ((opal$b = (default_attrs = extension.opal$config()['opal$[]']("default_attrs"))) !== false && opal$b !== nil) {
                (opal$b = (opal$c = default_attrs).opal$each, opal$b._p = (TMP_7 = function(k, v){var self = TMP_7._s || this, opal$a, opal$b, opal$c;if (k == null) k = nil;if (v == null) v = nil;
                return (opal$a = k, opal$b = attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, v)))}, TMP_7._s = self, TMP_7), opal$b).call(opal$c)};};
            block = self.opal$build_block(block_context, content_model, terminator, parent, reader, attributes, opal$hash2(["extension"], {"extension": extension}));
            if ((opal$b = ((opal$j = block !== false && block !== nil) ? (opal$k = content_model['opal$==']("skip"), (opal$k === nil || opal$k === false)) : opal$j)) === false || opal$b === nil) {
              attributes.opal$clear();
              return nil;};
            } else {
            self.opal$raise("Unsupported block type " + (block_context) + " at " + (reader.opal$line_info()))
          }};};};
        if (block !== false && block !== nil) {
          if ((opal$a = block['opal$title?']()) === false || opal$a === nil) {
            block['opal$title='](attributes['opal$[]']("title"))};
          if (block.opal$context()['opal$==']("image")) {
            resolved_target = attributes['opal$[]']("target");
            block.opal$document().opal$register("images", resolved_target);
            (opal$a = "alt", opal$b = attributes, (((opal$j = opal$b['opal$[]'](opal$a)) !== false && opal$j !== nil) ? opal$j : opal$b['opal$[]='](opal$a, ((opal$k = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$k).opal$basename(resolved_target, ((opal$k = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$k).opal$extname(resolved_target)).opal$tr("_-", " "))));
            block.opal$assign_caption(attributes.opal$delete("caption"), "figure");
            if ((opal$a = (scaledwidth = attributes['opal$[]']("scaledwidth"))) !== false && opal$a !== nil) {
              if ((opal$a = (opal$range(48, 57, false))['opal$include?'](((((opal$b = scaledwidth['opal$[]'](-1)) !== false && opal$b !== nil) ? opal$b : 0)).opal$ord())) !== false && opal$a !== nil) {
                attributes['opal$[]=']("scaledwidth", "" + (scaledwidth) + "%")}};
            } else {
            (opal$a = block, (((opal$b = opal$a.opal$caption()) !== false && opal$b !== nil) ? opal$b : opal$a['opal$caption='](attributes.opal$delete("caption"))))
          };
          block['opal$style='](attributes['opal$[]']("style"));
          if ((opal$a = (block_id = ((opal$b = block, (((opal$j = opal$b.opal$id()) !== false && opal$j !== nil) ? opal$j : opal$b['opal$id='](attributes['opal$[]']("id"))))))) !== false && opal$a !== nil) {
            document.opal$register("ids", [block_id, ((((opal$a = attributes['opal$[]']("reftext")) !== false && opal$a !== nil) ? opal$a : ((function() {if ((opal$b = block['opal$title?']()) !== false && opal$b !== nil) {
              return block.opal$title()
              } else {
              return nil
            }; return nil; })())))])};
          if ((opal$a = attributes['opal$empty?']()) === false || opal$a === nil) {
            block.opal$attributes().opal$update(attributes)};
          block.opal$lock_in_subs();
          if ((opal$a = block['opal$sub?']("callouts")) !== false && opal$a !== nil) {
            if ((opal$a = (self.opal$catalog_callouts(block.opal$source(), document))) === false || opal$a === nil) {
              block.opal$remove_sub("callouts")}};};
        return block;
      });

      opal$opal.defs(self, 'opal$is_delimited_block?', function(line, return_match_data) {
        var opal$a, opal$b, opal$c, self = this, line_len = nil, tip = nil, tl = nil, fenced_code = nil, tip_3 = nil, context = nil, masq = nil;
        if (return_match_data == null) {
          return_match_data = false
        }
        if ((opal$a = ((opal$b = ((line_len = line.opal$length()))['opal$>'](1)) ? (opal$scope.DELIMITED_BLOCK_LEADERS['opal$include?'](line['opal$[]'](opal$range(0, 1, false)))) : opal$b)) === false || opal$a === nil) {
          return nil};
        if (line_len['opal$=='](2)) {
          tip = line;
          tl = 2;
          } else {
          if (line_len['opal$<='](4)) {
            tip = line;
            tl = line_len;
            } else {
            tip = line['opal$[]'](opal$range(0, 3, false));
            tl = 4;
          };
          fenced_code = false;
          if ((opal$a = opal$scope.Compliance.opal$markdown_syntax()) !== false && opal$a !== nil) {
            tip_3 = ((function() {if (tl['opal$=='](4)) {
              return tip.opal$chop()
              } else {
              return tip
            }; return nil; })());
            if (tip_3['opal$==']("```")) {
              if ((opal$a = ((opal$b = tl['opal$=='](4)) ? tip['opal$end_with?']("`") : opal$b)) !== false && opal$a !== nil) {
                return nil};
              tip = tip_3;
              tl = 3;
              fenced_code = true;
            } else if (tip_3['opal$==']("~~~")) {
              if ((opal$a = ((opal$b = tl['opal$=='](4)) ? tip['opal$end_with?']("~") : opal$b)) !== false && opal$a !== nil) {
                return nil};
              tip = tip_3;
              tl = 3;
              fenced_code = true;};};
          if ((opal$a = ((opal$b = tl['opal$=='](3)) ? (opal$c = fenced_code, (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
            return nil};
        };
        if ((opal$a = opal$scope.DELIMITED_BLOCKS['opal$has_key?'](tip)) !== false && opal$a !== nil) {
          if ((opal$a = (((opal$b = tl['opal$<'](4)) !== false && opal$b !== nil) ? opal$b : tl['opal$=='](line_len))) !== false && opal$a !== nil) {
            if (return_match_data !== false && return_match_data !== nil) {
              (opal$a = opal$scope.DELIMITED_BLOCKS['opal$[]'](tip))['opal$to_a'] ? (opal$a = opal$a['opal$to_a']()) : (opal$a)._isArray ? opal$a : (opal$a = [opal$a]), context = (opal$a[0] == null ? nil : opal$a[0]), masq = (opal$a[1] == null ? nil : opal$a[1]);
              return opal$scope.BlockMatchData.opal$new(context, masq, tip, tip);
              } else {
              return true
            }
          } else if (((("") + (tip)) + (tip['opal$[]'](opal$range(-1, -1, false))['opal$*']((line_len['opal$-'](tl)))))['opal$=='](line)) {
            if (return_match_data !== false && return_match_data !== nil) {
              (opal$a = opal$scope.DELIMITED_BLOCKS['opal$[]'](tip))['opal$to_a'] ? (opal$a = opal$a['opal$to_a']()) : (opal$a)._isArray ? opal$a : (opal$a = [opal$a]), context = (opal$a[0] == null ? nil : opal$a[0]), masq = (opal$a[1] == null ? nil : opal$a[1]);
              return opal$scope.BlockMatchData.opal$new(context, masq, tip, line);
              } else {
              return true
            }
            } else {
            return nil
          }
          } else {
          return nil
        };
      });

      opal$opal.defs(self, 'opal$build_block', function(block_context, content_model, terminator, parent, reader, attributes, options) {
        var opal$a, opal$b, TMP_8, opal$c, opal$d, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, cursor = nil, indent = nil, extension = nil, block = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        if ((opal$a = (((opal$b = content_model['opal$==']("skip")) !== false && opal$b !== nil) ? opal$b : content_model['opal$==']("raw"))) !== false && opal$a !== nil) {
          skip_processing = content_model['opal$==']("skip");
          parse_as_content_model = "simple";
          } else {
          skip_processing = false;
          parse_as_content_model = content_model;
        };
        if ((opal$a = terminator['opal$nil?']()) !== false && opal$a !== nil) {
          if (parse_as_content_model['opal$==']("verbatim")) {
            lines = reader.opal$read_lines_until(opal$hash2(["break_on_blank_lines", "break_on_list_continuation"], {"break_on_blank_lines": true, "break_on_list_continuation": true}))
            } else {
            if (content_model['opal$==']("compound")) {
              content_model = "simple"};
            lines = (opal$a = (opal$b = reader).opal$read_lines_until, opal$a._p = (TMP_8 = function(line){var self = TMP_8._s || this, opal$a, opal$b;if (line == null) line = nil;
            return (opal$a = opal$scope.Compliance.opal$block_terminates_paragraph(), opal$a !== false && opal$a !== nil ?((((opal$b = self['opal$is_delimited_block?'](line)) !== false && opal$b !== nil) ? opal$b : opal$scope.BlockAttributeLineRx['opal$=~'](line))) : opal$a)}, TMP_8._s = self, TMP_8), opal$a).call(opal$b, opal$hash2(["break_on_blank_lines", "break_on_list_continuation", "preserve_last_line", "skip_line_comments", "skip_processing"], {"break_on_blank_lines": true, "break_on_list_continuation": true, "preserve_last_line": true, "skip_line_comments": true, "skip_processing": skip_processing}));
          };
          block_reader = nil;
        } else if ((opal$a = (opal$c = parse_as_content_model['opal$==']("compound"), (opal$c === nil || opal$c === false))) !== false && opal$a !== nil) {
          lines = reader.opal$read_lines_until(opal$hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing}));
          block_reader = nil;
        } else if (terminator['opal$=='](false)) {
          lines = nil;
          block_reader = reader;
          } else {
          lines = nil;
          cursor = reader.opal$cursor();
          block_reader = opal$scope.Reader.opal$new(reader.opal$read_lines_until(opal$hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing})), cursor);
        };
        if (content_model['opal$==']("skip")) {
          attributes.opal$clear();
          return lines;};
        if ((opal$a = ((opal$c = content_model['opal$==']("verbatim")) ? (indent = attributes['opal$[]']("indent")) : opal$c)) !== false && opal$a !== nil) {
          self['opal$reset_block_indent!'](lines, indent.opal$to_i())};
        if ((opal$a = (extension = options['opal$[]']("extension"))) !== false && opal$a !== nil) {
          attributes.opal$delete("style");
          if ((opal$a = (block = extension.opal$process_method()['opal$[]'](parent, (((opal$c = block_reader) !== false && opal$c !== nil) ? opal$c : (opal$scope.Reader.opal$new(lines))), attributes.opal$dup()))) !== false && opal$a !== nil) {
            attributes.opal$replace(block.opal$attributes());
            if ((opal$a = ((opal$c = block.opal$content_model()['opal$==']("compound")) ? (opal$d = ((lines = block.opal$lines()))['opal$nil_or_empty?'](), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$a !== nil) {
              content_model = "compound";
              block_reader = opal$scope.Reader.opal$new(lines);};
            } else {
            return nil
          };
          } else {
          block = opal$scope.Block.opal$new(parent, block_context, opal$hash2(["content_model", "source", "attributes"], {"content_model": content_model, "source": lines, "attributes": attributes}))
        };
        if ((opal$a = (opal$c = (attributes['opal$has_key?']("title")), opal$c !== false && opal$c !== nil ?(block.opal$document()['opal$attr?']("" + (block.opal$context()) + "-caption")) : opal$c)) !== false && opal$a !== nil) {
          block['opal$title='](attributes.opal$delete("title"));
          block.opal$assign_caption(attributes.opal$delete("caption"));};
        if (content_model['opal$==']("compound")) {
          self.opal$parse_blocks(block_reader, block)};
        return block;
      });

      opal$opal.defs(self, 'opal$parse_blocks', function(reader, parent) {
        var opal$a, opal$b, self = this, block = nil;
        while ((opal$b = reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
        block = opal$scope.Parser.opal$next_block(reader, parent);
        if (block !== false && block !== nil) {
          parent['opal$<<'](block)};};
      });

      opal$opal.defs(self, 'opal$next_outline_list', function(reader, list_type, parent) {
        var opal$a, opal$b, opal$c, opal$d, self = this, list_block = nil, match = nil, marker = nil, this_item_level = nil, ancestor = nil, list_item = nil;
        list_block = opal$scope.List.opal$new(parent, list_type);
        if (parent.opal$context()['opal$=='](list_type)) {
          list_block['opal$level='](parent.opal$level()['opal$+'](1))
          } else {
          list_block['opal$level='](1)
        };
        while ((opal$b = (opal$c = reader['opal$has_more_lines?'](), opal$c !== false && opal$c !== nil ?(match = opal$scope.ListRxMap['opal$[]'](list_type).opal$match(reader.opal$peek_line())) : opal$c)) !== false && opal$b !== nil) {
        marker = self.opal$resolve_list_marker(list_type, match['opal$[]'](1));
        if ((opal$b = (opal$c = list_block['opal$items?'](), opal$c !== false && opal$c !== nil ?(opal$d = marker['opal$=='](list_block.opal$items()['opal$[]'](0).opal$marker()), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
          this_item_level = list_block.opal$level()['opal$+'](1);
          ancestor = parent;
          while (ancestor.opal$context()['opal$=='](list_type)) {
          if (marker['opal$=='](ancestor.opal$items()['opal$[]'](0).opal$marker())) {
            this_item_level = ancestor.opal$level();
            break;;};
          ancestor = ancestor.opal$parent();};
          } else {
          this_item_level = list_block.opal$level()
        };
        if ((opal$b = (((opal$c = (opal$d = list_block['opal$items?'](), (opal$d === nil || opal$d === false))) !== false && opal$c !== nil) ? opal$c : this_item_level['opal$=='](list_block.opal$level()))) !== false && opal$b !== nil) {
          list_item = self.opal$next_list_item(reader, list_block, match)
        } else if (this_item_level['opal$<'](list_block.opal$level())) {
          break;
        } else if (this_item_level['opal$>'](list_block.opal$level())) {
          list_block.opal$items()['opal$[]'](-1)['opal$<<'](self.opal$next_block(reader, list_block))};
        if (list_item !== false && list_item !== nil) {
          list_block['opal$<<'](list_item)};
        list_item = nil;
        reader.opal$skip_blank_lines();};
        return list_block;
      });

      opal$opal.defs(self, 'opal$catalog_callouts', function(text, document) {
        var opal$a, opal$b, TMP_9, self = this, found = nil;
        found = false;
        if ((opal$a = text['opal$include?']("<")) !== false && opal$a !== nil) {
          (opal$a = (opal$b = text).opal$scan, opal$a._p = (TMP_9 = function(){var self = TMP_9._s || this, opal$a, opal$b, m = nil;
          m = opal$gvars["~"];
            if ((opal$a = (opal$b = m['opal$[]'](0).opal$chr()['opal$==']("\\"), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              document.opal$callouts().opal$register(m['opal$[]'](2))};
            return found = true;}, TMP_9._s = self, TMP_9), opal$a).call(opal$b, opal$scope.CalloutQuickScanRx)};
        return found;
      });

      opal$opal.defs(self, 'opal$catalog_inline_anchors', function(text, document) {
        var opal$a, opal$b, TMP_10, self = this;
        if ((opal$a = text['opal$include?']("[")) !== false && opal$a !== nil) {
          (opal$a = (opal$b = text).opal$scan, opal$a._p = (TMP_10 = function(){var self = TMP_10._s || this, opal$a, m = nil, id = nil, reftext = nil;
          m = opal$gvars["~"];
            if ((opal$a = m['opal$[]'](0)['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              return nil;};
            id = (((opal$a = m['opal$[]'](1)) !== false && opal$a !== nil) ? opal$a : m['opal$[]'](3));
            reftext = (((opal$a = m['opal$[]'](2)) !== false && opal$a !== nil) ? opal$a : m['opal$[]'](4));
            return document.opal$register("ids", [id, reftext]);}, TMP_10._s = self, TMP_10), opal$a).call(opal$b, opal$scope.InlineAnchorRx)};
        return nil;
      });

      opal$opal.defs(self, 'opal$next_labeled_list', function(reader, match, parent) {
        var opal$a, opal$b, opal$c, opal$d, self = this, list_block = nil, previous_pair = nil, sibling_pattern = nil, term = nil, item = nil;
        list_block = opal$scope.List.opal$new(parent, "dlist");
        previous_pair = nil;
        sibling_pattern = opal$scope.DefinitionListSiblingRx['opal$[]'](match['opal$[]'](2));
        while ((opal$b = (opal$c = reader['opal$has_more_lines?'](), opal$c !== false && opal$c !== nil ?(match = sibling_pattern.opal$match(reader.opal$peek_line())) : opal$c)) !== false && opal$b !== nil) {
        opal$b = opal$opal.to_ary(self.opal$next_list_item(reader, list_block, match, sibling_pattern)), term = (opal$b[0] == null ? nil : opal$b[0]), item = (opal$b[1] == null ? nil : opal$b[1]);
        if ((opal$b = ((opal$c = previous_pair !== false && previous_pair !== nil) ? (opal$d = previous_pair['opal$[]'](-1), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
          previous_pair.opal$pop();
          previous_pair['opal$[]'](0)['opal$<<'](term);
          previous_pair['opal$<<'](item);
          } else {
          list_block.opal$items()['opal$<<']((previous_pair = [[term], item]))
        };};
        return list_block;
      });

      opal$opal.defs(self, 'opal$next_list_item', function(reader, list_block, match, sibling_trait) {
        var opal$a, opal$b, opal$c, self = this, list_type = nil, list_term = nil, list_item = nil, has_text = nil, text = nil, checkbox = nil, checked = nil, cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, continuation_connects_first_block = nil, content_adjacent = nil, options = nil, new_block = nil;
        if (sibling_trait == null) {
          sibling_trait = nil
        }
        if (((list_type = list_block.opal$context()))['opal$==']("dlist")) {
          list_term = opal$scope.ListItem.opal$new(list_block, match['opal$[]'](1));
          list_item = opal$scope.ListItem.opal$new(list_block, match['opal$[]'](3));
          has_text = (opal$a = match['opal$[]'](3)['opal$nil_or_empty?'](), (opal$a === nil || opal$a === false));
          } else {
          text = match['opal$[]'](2);
          checkbox = false;
          if ((opal$a = ((opal$b = list_type['opal$==']("ulist")) ? text['opal$start_with?']("[") : opal$b)) !== false && opal$a !== nil) {
            if ((opal$a = text['opal$start_with?']("[ ] ")) !== false && opal$a !== nil) {
              checkbox = true;
              checked = false;
              text = text['opal$[]'](opal$range(3, -1, false)).opal$lstrip();
            } else if ((opal$a = (((opal$b = text['opal$start_with?']("[*] ")) !== false && opal$b !== nil) ? opal$b : text['opal$start_with?']("[x] "))) !== false && opal$a !== nil) {
              checkbox = true;
              checked = true;
              text = text['opal$[]'](opal$range(3, -1, false)).opal$lstrip();}};
          list_item = opal$scope.ListItem.opal$new(list_block, text);
          if (checkbox !== false && checkbox !== nil) {
            list_block.opal$attributes()['opal$[]=']("checklist-option", "");
            list_item.opal$attributes()['opal$[]=']("checkbox", "");
            if (checked !== false && checked !== nil) {
              list_item.opal$attributes()['opal$[]=']("checked", "")};};
          (((opal$a = sibling_trait) !== false && opal$a !== nil) ? opal$a : sibling_trait = self.opal$resolve_list_marker(list_type, match['opal$[]'](1), list_block.opal$items().opal$size(), true, reader));
          list_item['opal$marker='](sibling_trait);
          has_text = true;
        };
        reader.opal$advance();
        cursor = reader.opal$cursor();
        list_item_reader = opal$scope.Reader.opal$new(self.opal$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), cursor);
        if ((opal$a = list_item_reader['opal$has_more_lines?']()) !== false && opal$a !== nil) {
          comment_lines = list_item_reader.opal$skip_line_comments();
          subsequent_line = list_item_reader.opal$peek_line();
          if ((opal$a = comment_lines['opal$empty?']()) === false || opal$a === nil) {
            list_item_reader.opal$unshift_lines(comment_lines)};
          if ((opal$a = (opal$b = subsequent_line['opal$nil?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            continuation_connects_first_block = subsequent_line['opal$empty?']();
            if ((opal$a = (opal$b = (opal$c = continuation_connects_first_block, (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$c = list_type['opal$==']("dlist"), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
              has_text = false};
            content_adjacent = (opal$a = (opal$b = continuation_connects_first_block, (opal$b === nil || opal$b === false)), opal$a !== false && opal$a !== nil ?(opal$b = subsequent_line['opal$empty?'](), (opal$b === nil || opal$b === false)) : opal$a);
            } else {
            continuation_connects_first_block = false;
            content_adjacent = false;
          };
          options = opal$hash2(["text"], {"text": (opal$a = has_text, (opal$a === nil || opal$a === false))});
          while ((opal$b = list_item_reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
          new_block = self.opal$next_block(list_item_reader, list_block, opal$hash2([], {}), options);
          if (new_block !== false && new_block !== nil) {
            list_item['opal$<<'](new_block)};};
          list_item.opal$fold_first(continuation_connects_first_block, content_adjacent);};
        if (list_type['opal$==']("dlist")) {
          if ((opal$a = (((opal$b = list_item['opal$text?']()) !== false && opal$b !== nil) ? opal$b : list_item['opal$blocks?']())) === false || opal$a === nil) {
            list_item = nil};
          return [list_term, list_item];
          } else {
          return list_item
        };
      });

      opal$opal.defs(self, 'opal$read_lines_for_list_item', function(reader, list_type, sibling_trait, has_text) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, TMP_11, TMP_12, opal$f, TMP_13, TMP_14, opal$g, opal$h, TMP_15, opal$i, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, this_line = nil, prev_line = nil, match = nil, nested_list_type = nil;
        if (sibling_trait == null) {
          sibling_trait = nil
        }
        if (has_text == null) {
          has_text = true
        }
        buffer = [];
        continuation = "inactive";
        within_nested_list = false;
        detached_continuation = nil;
        while ((opal$b = reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
        this_line = reader.opal$read_line();
        if ((opal$b = self['opal$is_sibling_list_item?'](this_line, list_type, sibling_trait)) !== false && opal$b !== nil) {
          break;};
        prev_line = (function() {if ((opal$b = buffer['opal$empty?']()) !== false && opal$b !== nil) {
          return nil
          } else {
          return buffer['opal$[]'](-1)
        }; return nil; })();
        if (prev_line['opal$=='](opal$scope.LIST_CONTINUATION)) {
          if (continuation['opal$==']("inactive")) {
            continuation = "active";
            has_text = true;
            if ((opal$b = within_nested_list) === false || opal$b === nil) {
              buffer['opal$[]='](-1, "")};};
          if (this_line['opal$=='](opal$scope.LIST_CONTINUATION)) {
            if ((opal$b = (opal$c = continuation['opal$==']("frozen"), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
              continuation = "frozen";
              buffer['opal$<<'](this_line);};
            this_line = nil;
            continue;;};};
        if ((opal$b = (match = self['opal$is_delimited_block?'](this_line, true))) !== false && opal$b !== nil) {
          if (continuation['opal$==']("active")) {
            buffer['opal$<<'](this_line);
            buffer.opal$concat(reader.opal$read_lines_until(opal$hash2(["terminator", "read_last_line"], {"terminator": match.opal$terminator(), "read_last_line": true})));
            continuation = "inactive";
            } else {
            break;
          }
        } else if ((opal$b = (opal$c = ((opal$d = list_type['opal$==']("dlist")) ? (opal$e = continuation['opal$==']("active"), (opal$e === nil || opal$e === false)) : opal$d), opal$c !== false && opal$c !== nil ?opal$scope.BlockAttributeLineRx['opal$=~'](this_line) : opal$c)) !== false && opal$b !== nil) {
          break;
        } else if ((opal$b = ((opal$c = continuation['opal$==']("active")) ? (opal$d = this_line['opal$empty?'](), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
          if ((opal$b = opal$scope.LiteralParagraphRx['opal$=~'](this_line)) !== false && opal$b !== nil) {
            reader.opal$unshift_line(this_line);
            buffer.opal$concat((opal$b = (opal$c = reader).opal$read_lines_until, opal$b._p = (TMP_11 = function(line){var self = TMP_11._s || this, opal$a;if (line == null) line = nil;
            return ((opal$a = list_type['opal$==']("dlist")) ? self['opal$is_sibling_list_item?'](line, list_type, sibling_trait) : opal$a)}, TMP_11._s = self, TMP_11), opal$b).call(opal$c, opal$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})));
            continuation = "inactive";
          } else if ((opal$b = (((opal$d = (((opal$e = opal$scope.BlockTitleRx['opal$=~'](this_line)) !== false && opal$e !== nil) ? opal$e : opal$scope.BlockAttributeLineRx['opal$=~'](this_line))) !== false && opal$d !== nil) ? opal$d : opal$scope.AttributeEntryRx['opal$=~'](this_line))) !== false && opal$b !== nil) {
            buffer['opal$<<'](this_line)
            } else {
            if ((opal$b = nested_list_type = (opal$d = (opal$e = ((function() {if (within_nested_list !== false && within_nested_list !== nil) {
              return ["dlist"]
              } else {
              return opal$scope.NESTABLE_LIST_CONTEXTS
            }; return nil; })())).opal$detect, opal$d._p = (TMP_12 = function(ctx){var self = TMP_12._s || this;if (ctx == null) ctx = nil;
            return opal$scope.ListRxMap['opal$[]'](ctx)['opal$=~'](this_line)}, TMP_12._s = self, TMP_12), opal$d).call(opal$e)) !== false && opal$b !== nil) {
              within_nested_list = true;
              if ((opal$b = ((opal$d = nested_list_type['opal$==']("dlist")) ? opal$gvars["~"]['opal$[]'](3)['opal$nil_or_empty?']() : opal$d)) !== false && opal$b !== nil) {
                has_text = false};};
            buffer['opal$<<'](this_line);
            continuation = "inactive";
          }
        } else if ((opal$b = (opal$d = (opal$f = prev_line['opal$nil?'](), (opal$f === nil || opal$f === false)), opal$d !== false && opal$d !== nil ?prev_line['opal$empty?']() : opal$d)) !== false && opal$b !== nil) {
          if ((opal$b = this_line['opal$empty?']()) !== false && opal$b !== nil) {
            reader.opal$skip_blank_lines();
            this_line = reader.opal$read_line();
            if ((opal$b = (((opal$d = this_line['opal$nil?']()) !== false && opal$d !== nil) ? opal$d : self['opal$is_sibling_list_item?'](this_line, list_type, sibling_trait))) !== false && opal$b !== nil) {
              break;};};
          if (this_line['opal$=='](opal$scope.LIST_CONTINUATION)) {
            detached_continuation = buffer.opal$size();
            buffer['opal$<<'](this_line);
          } else if (has_text !== false && has_text !== nil) {
            if ((opal$b = self['opal$is_sibling_list_item?'](this_line, list_type, sibling_trait)) !== false && opal$b !== nil) {
              break;
            } else if ((opal$b = nested_list_type = (opal$d = (opal$f = opal$scope.NESTABLE_LIST_CONTEXTS).opal$detect, opal$d._p = (TMP_13 = function(ctx){var self = TMP_13._s || this;if (ctx == null) ctx = nil;
            return opal$scope.ListRxMap['opal$[]'](ctx)['opal$=~'](this_line)}, TMP_13._s = self, TMP_13), opal$d).call(opal$f)) !== false && opal$b !== nil) {
              buffer['opal$<<'](this_line);
              within_nested_list = true;
              if ((opal$b = ((opal$d = nested_list_type['opal$==']("dlist")) ? opal$gvars["~"]['opal$[]'](3)['opal$nil_or_empty?']() : opal$d)) !== false && opal$b !== nil) {
                has_text = false};
            } else if ((opal$b = opal$scope.LiteralParagraphRx['opal$=~'](this_line)) !== false && opal$b !== nil) {
              reader.opal$unshift_line(this_line);
              buffer.opal$concat((opal$b = (opal$d = reader).opal$read_lines_until, opal$b._p = (TMP_14 = function(line){var self = TMP_14._s || this, opal$a;if (line == null) line = nil;
              return ((opal$a = list_type['opal$==']("dlist")) ? self['opal$is_sibling_list_item?'](line, list_type, sibling_trait) : opal$a)}, TMP_14._s = self, TMP_14), opal$b).call(opal$d, opal$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})));
              } else {
              break;
            }
            } else {
            if ((opal$b = within_nested_list) === false || opal$b === nil) {
              buffer.opal$pop()};
            buffer['opal$<<'](this_line);
            has_text = true;
          };
          } else {
          if ((opal$b = (opal$g = this_line['opal$empty?'](), (opal$g === nil || opal$g === false))) !== false && opal$b !== nil) {
            has_text = true};
          if ((opal$b = nested_list_type = (opal$g = (opal$h = ((function() {if (within_nested_list !== false && within_nested_list !== nil) {
            return ["dlist"]
            } else {
            return opal$scope.NESTABLE_LIST_CONTEXTS
          }; return nil; })())).opal$detect, opal$g._p = (TMP_15 = function(ctx){var self = TMP_15._s || this;if (ctx == null) ctx = nil;
          return opal$scope.ListRxMap['opal$[]'](ctx)['opal$=~'](this_line)}, TMP_15._s = self, TMP_15), opal$g).call(opal$h)) !== false && opal$b !== nil) {
            within_nested_list = true;
            if ((opal$b = ((opal$g = nested_list_type['opal$==']("dlist")) ? opal$gvars["~"]['opal$[]'](3)['opal$nil_or_empty?']() : opal$g)) !== false && opal$b !== nil) {
              has_text = false};};
          buffer['opal$<<'](this_line);
        };
        this_line = nil;};
        if (this_line !== false && this_line !== nil) {
          reader.opal$unshift_line(this_line)};
        if (detached_continuation !== false && detached_continuation !== nil) {
          buffer.opal$delete_at(detached_continuation)};
        while ((opal$b = (opal$g = (opal$i = buffer['opal$empty?'](), (opal$i === nil || opal$i === false)), opal$g !== false && opal$g !== nil ?buffer['opal$[]'](-1)['opal$empty?']() : opal$g)) !== false && opal$b !== nil) {
        buffer.opal$pop()};
        if ((opal$a = (opal$b = (opal$g = buffer['opal$empty?'](), (opal$g === nil || opal$g === false)), opal$b !== false && opal$b !== nil ?buffer['opal$[]'](-1)['opal$=='](opal$scope.LIST_CONTINUATION) : opal$b)) !== false && opal$a !== nil) {
          buffer.opal$pop()};
        return buffer;
      });

      opal$opal.defs(self, 'opal$initialize_section', function(reader, parent, attributes) {
        var opal$a, opal$b, opal$c, self = this, document = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, _ = nil, section = nil, style = nil, id = nil;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        document = parent.opal$document();
        opal$a = opal$opal.to_ary(self.opal$parse_section_title(reader, document)), sect_id = (opal$a[0] == null ? nil : opal$a[0]), sect_reftext = (opal$a[1] == null ? nil : opal$a[1]), sect_title = (opal$a[2] == null ? nil : opal$a[2]), sect_level = (opal$a[3] == null ? nil : opal$a[3]), _ = (opal$a[4] == null ? nil : opal$a[4]);
        if (sect_reftext !== false && sect_reftext !== nil) {
          attributes['opal$[]=']("reftext", sect_reftext)};
        section = opal$scope.Section.opal$new(parent, sect_level, document.opal$attributes()['opal$has_key?']("numbered"));
        section['opal$id='](sect_id);
        section['opal$title='](sect_title);
        if ((opal$a = attributes['opal$[]'](1)) !== false && opal$a !== nil) {
          opal$a = opal$opal.to_ary(self.opal$parse_style_attribute(attributes, reader)), style = (opal$a[0] == null ? nil : opal$a[0]), _ = (opal$a[1] == null ? nil : opal$a[1]);
          if (style !== false && style !== nil) {
            section['opal$sectname='](style);
            section['opal$special='](true);
            if ((opal$a = ((opal$b = section.opal$sectname()['opal$==']("abstract")) ? document.opal$doctype()['opal$==']("book") : opal$b)) !== false && opal$a !== nil) {
              section['opal$sectname=']("sect1");
              section['opal$special='](false);
              section['opal$level='](1);};
            } else {
            section['opal$sectname=']("sect" + (section.opal$level()))
          };
        } else if ((opal$a = ((opal$b = sect_title.opal$downcase()['opal$==']("synopsis")) ? document.opal$doctype()['opal$==']("manpage") : opal$b)) !== false && opal$a !== nil) {
          section['opal$special='](true);
          section['opal$sectname=']("synopsis");
          } else {
          section['opal$sectname=']("sect" + (section.opal$level()))
        };
        if ((opal$a = (opal$b = (opal$c = section.opal$id(), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(id = attributes['opal$[]']("id")) : opal$b)) !== false && opal$a !== nil) {
          section['opal$id='](id)
          } else {
          (opal$a = section, (((opal$b = opal$a.opal$id()) !== false && opal$b !== nil) ? opal$b : opal$a['opal$id='](section.opal$generate_id())))
        };
        if ((opal$a = section.opal$id()) !== false && opal$a !== nil) {
          section.opal$document().opal$register("ids", [section.opal$id(), ((((opal$a = attributes['opal$[]']("reftext")) !== false && opal$a !== nil) ? opal$a : section.opal$title()))])};
        section.opal$update_attributes(attributes);
        reader.opal$skip_blank_lines();
        return section;
      });

      opal$opal.defs(self, 'opal$section_level', function(line) {
        var self = this;
        return opal$scope.SECTION_LEVELS['opal$[]'](line.opal$chr());
      });

      opal$opal.defs(self, 'opal$single_line_section_level', function(marker) {
        var self = this;
        return marker.opal$length()['opal$-'](1);
      });

      opal$opal.defs(self, 'opal$is_next_line_section?', function(reader, attributes) {
        var opal$a, opal$b, opal$c, opal$d, self = this, val = nil, ord_0 = nil;
        if ((opal$a = (opal$b = (opal$c = (opal$d = ((val = attributes['opal$[]'](1)))['opal$nil?'](), (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?((((opal$d = ((ord_0 = val['opal$[]'](0).opal$ord()))['opal$=='](100)) !== false && opal$d !== nil) ? opal$d : ord_0['opal$=='](102))) : opal$c), opal$b !== false && opal$b !== nil ?val['opal$=~'](opal$scope.FloatingTitleStyleRx) : opal$b)) !== false && opal$a !== nil) {
          return false};
        if ((opal$a = reader['opal$has_more_lines?']()) === false || opal$a === nil) {
          return false};
        if ((opal$a = opal$scope.Compliance.opal$underline_style_section_titles()) !== false && opal$a !== nil) {
          return (opal$a = self)['opal$is_section_title?'].apply(opal$a, [].concat(reader.opal$peek_lines(2)))
          } else {
          return self['opal$is_section_title?'](reader.opal$peek_line())
        };
      });

      opal$opal.defs(self, 'opal$is_next_line_document_title?', function(reader, attributes) {
        var self = this;
        return self['opal$is_next_line_section?'](reader, attributes)['opal$=='](0);
      });

      opal$opal.defs(self, 'opal$is_section_title?', function(line1, line2) {
        var opal$a, opal$b, self = this, level = nil;
        if (line2 == null) {
          line2 = nil
        }
        if ((opal$a = (level = self['opal$is_single_line_section_title?'](line1))) !== false && opal$a !== nil) {
          return level
        } else if ((opal$a = ((opal$b = line2 !== false && line2 !== nil) ? (level = self['opal$is_two_line_section_title?'](line1, line2)) : opal$b)) !== false && opal$a !== nil) {
          return level
          } else {
          return false
        };
      });

      opal$opal.defs(self, 'opal$is_single_line_section_title?', function(line1) {
        var opal$a, opal$b, opal$c, opal$d, self = this, first_char = nil, match = nil;
        first_char = (function() {if (line1 !== false && line1 !== nil) {
          return line1.opal$chr()
          } else {
          return nil
        }; return nil; })();
        if ((opal$a = (opal$b = ((((opal$c = first_char['opal$==']("=")) !== false && opal$c !== nil) ? opal$c : ((opal$d = opal$scope.Compliance.opal$markdown_syntax(), opal$d !== false && opal$d !== nil ?first_char['opal$==']("#") : opal$d)))), opal$b !== false && opal$b !== nil ?(match = opal$scope.AtxSectionRx.opal$match(line1)) : opal$b)) !== false && opal$a !== nil) {
          return self.opal$single_line_section_level(match['opal$[]'](1))
          } else {
          return false
        };
      });

      opal$opal.defs(self, 'opal$is_two_line_section_title?', function(line1, line2) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, opal$f, self = this;
        if ((opal$a = (opal$b = (opal$c = (opal$d = (opal$e = ((opal$f = line1 !== false && line1 !== nil) ? line2 : opal$f), opal$e !== false && opal$e !== nil ?opal$scope.SECTION_LEVELS['opal$has_key?'](line2.opal$chr()) : opal$e), opal$d !== false && opal$d !== nil ?line2['opal$=~'](opal$scope.SetextSectionLineRx) : opal$d), opal$c !== false && opal$c !== nil ?line1['opal$=~'](opal$scope.SetextSectionTitleRx) : opal$c), opal$b !== false && opal$b !== nil ?(self.opal$line_length(line1)['opal$-'](self.opal$line_length(line2))).opal$abs()['opal$<='](1) : opal$b)) !== false && opal$a !== nil) {
          return self.opal$section_level(line2)
          } else {
          return false
        };
      });

      opal$opal.defs(self, 'opal$parse_section_title', function(reader, document) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, self = this, line1 = nil, sect_id = nil, sect_title = nil, sect_level = nil, sect_reftext = nil, single_line = nil, first_char = nil, match = nil, anchor_match = nil, line2 = nil, name_match = nil;
        line1 = reader.opal$read_line();
        sect_id = nil;
        sect_title = nil;
        sect_level = -1;
        sect_reftext = nil;
        single_line = true;
        first_char = line1.opal$chr();
        if ((opal$a = (opal$b = ((((opal$c = first_char['opal$==']("=")) !== false && opal$c !== nil) ? opal$c : ((opal$d = opal$scope.Compliance.opal$markdown_syntax(), opal$d !== false && opal$d !== nil ?first_char['opal$==']("#") : opal$d)))), opal$b !== false && opal$b !== nil ?(match = opal$scope.AtxSectionRx.opal$match(line1)) : opal$b)) !== false && opal$a !== nil) {
          sect_level = self.opal$single_line_section_level(match['opal$[]'](1));
          sect_title = match['opal$[]'](2);
          if ((opal$a = (opal$b = sect_title['opal$end_with?']("]]"), opal$b !== false && opal$b !== nil ?(anchor_match = opal$scope.InlineSectionAnchorRx.opal$match(sect_title)) : opal$b)) !== false && opal$a !== nil) {
            if ((opal$a = anchor_match['opal$[]'](2)['opal$nil?']()) !== false && opal$a !== nil) {
              sect_title = anchor_match['opal$[]'](1);
              sect_id = anchor_match['opal$[]'](3);
              sect_reftext = anchor_match['opal$[]'](4);}};
        } else if ((opal$a = opal$scope.Compliance.opal$underline_style_section_titles()) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = (opal$c = (opal$d = (opal$e = (line2 = reader.opal$peek_line(true)), opal$e !== false && opal$e !== nil ?opal$scope.SECTION_LEVELS['opal$has_key?'](line2.opal$chr()) : opal$e), opal$d !== false && opal$d !== nil ?line2['opal$=~'](opal$scope.SetextSectionLineRx) : opal$d), opal$c !== false && opal$c !== nil ?(name_match = opal$scope.SetextSectionTitleRx.opal$match(line1)) : opal$c), opal$b !== false && opal$b !== nil ?(self.opal$line_length(line1)['opal$-'](self.opal$line_length(line2))).opal$abs()['opal$<='](1) : opal$b)) !== false && opal$a !== nil) {
            sect_title = name_match['opal$[]'](1);
            if ((opal$a = (opal$b = sect_title['opal$end_with?']("]]"), opal$b !== false && opal$b !== nil ?(anchor_match = opal$scope.InlineSectionAnchorRx.opal$match(sect_title)) : opal$b)) !== false && opal$a !== nil) {
              if ((opal$a = anchor_match['opal$[]'](2)['opal$nil?']()) !== false && opal$a !== nil) {
                sect_title = anchor_match['opal$[]'](1);
                sect_id = anchor_match['opal$[]'](3);
                sect_reftext = anchor_match['opal$[]'](4);}};
            sect_level = self.opal$section_level(line2);
            single_line = false;
            reader.opal$advance();}};
        if (sect_level['opal$>='](0)) {
          sect_level = sect_level['opal$+'](document.opal$attr("leveloffset", 0).opal$to_i())};
        return [sect_id, sect_reftext, sect_title, sect_level, single_line];
      });

      opal$opal.defs(self, 'opal$line_length', function(line) {
        var opal$a, self = this;
        if ((opal$a = opal$scope.FORCE_UNICODE_LINE_LENGTH) !== false && opal$a !== nil) {
          return line.opal$scan(/./i).opal$length()
          } else {
          return line.opal$length()
        };
      });

      opal$opal.defs(self, 'opal$parse_header_metadata', function(reader, document) {
        var opal$a, opal$b, opal$c, TMP_16, opal$d, TMP_17, opal$e, self = this, metadata = nil, implicit_author = nil, implicit_authors = nil, author_metadata = nil, rev_metadata = nil, rev_line = nil, match = nil, author_line = nil, authors = nil, author_key = nil;
        if (document == null) {
          document = nil
        }
        self.opal$process_attribute_entries(reader, document);
        metadata = opal$hash2([], {});
        implicit_author = nil;
        implicit_authors = nil;
        if ((opal$a = (opal$b = reader['opal$has_more_lines?'](), opal$b !== false && opal$b !== nil ?(opal$c = reader['opal$next_line_empty?'](), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          author_metadata = self.opal$process_authors(reader.opal$read_line());
          if ((opal$a = author_metadata['opal$empty?']()) === false || opal$a === nil) {
            if (document !== false && document !== nil) {
              (opal$a = (opal$b = author_metadata).opal$each, opal$a._p = (TMP_16 = function(key, val){var self = TMP_16._s || this, opal$a, opal$b;if (key == null) key = nil;if (val == null) val = nil;
              if ((opal$a = document.opal$attributes()['opal$has_key?'](key)) !== false && opal$a !== nil) {
                  return nil
                  } else {
                  return document.opal$attributes()['opal$[]='](key, ((function() {if ((opal$a = (val['opal$is_a?'](((opal$b = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$b)))) !== false && opal$a !== nil) {
                    return document.opal$apply_header_subs(val)
                    } else {
                    return val
                  }; return nil; })()))
                }}, TMP_16._s = self, TMP_16), opal$a).call(opal$b);
              implicit_author = document.opal$attributes()['opal$[]']("author");
              implicit_authors = document.opal$attributes()['opal$[]']("authors");};
            metadata = author_metadata;};
          self.opal$process_attribute_entries(reader, document);
          rev_metadata = opal$hash2([], {});
          if ((opal$a = (opal$c = reader['opal$has_more_lines?'](), opal$c !== false && opal$c !== nil ?(opal$d = reader['opal$next_line_empty?'](), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$a !== nil) {
            rev_line = reader.opal$read_line();
            if ((opal$a = (match = opal$scope.RevisionInfoLineRx.opal$match(rev_line))) !== false && opal$a !== nil) {
              rev_metadata['opal$[]=']("revdate", match['opal$[]'](2).opal$strip());
              if ((opal$a = match['opal$[]'](1)['opal$nil?']()) === false || opal$a === nil) {
                rev_metadata['opal$[]=']("revnumber", match['opal$[]'](1).opal$rstrip())};
              if ((opal$a = match['opal$[]'](3)['opal$nil?']()) === false || opal$a === nil) {
                rev_metadata['opal$[]=']("revremark", match['opal$[]'](3).opal$rstrip())};
              } else {
              reader.opal$unshift_line(rev_line)
            };};
          if ((opal$a = rev_metadata['opal$empty?']()) === false || opal$a === nil) {
            if (document !== false && document !== nil) {
              (opal$a = (opal$c = rev_metadata).opal$each, opal$a._p = (TMP_17 = function(key, val){var self = TMP_17._s || this, opal$a;if (key == null) key = nil;if (val == null) val = nil;
              if ((opal$a = document.opal$attributes()['opal$has_key?'](key)) !== false && opal$a !== nil) {
                  return nil
                  } else {
                  return document.opal$attributes()['opal$[]='](key, document.opal$apply_header_subs(val))
                }}, TMP_17._s = self, TMP_17), opal$a).call(opal$c)};
            metadata.opal$update(rev_metadata);};
          self.opal$process_attribute_entries(reader, document);
          reader.opal$skip_blank_lines();};
        if (document !== false && document !== nil) {
          author_metadata = nil;
          if ((opal$a = (opal$d = document.opal$attributes()['opal$has_key?']("author"), opal$d !== false && opal$d !== nil ?(opal$e = ((author_line = document.opal$attributes()['opal$[]']("author")))['opal$=='](implicit_author), (opal$e === nil || opal$e === false)) : opal$d)) !== false && opal$a !== nil) {
            author_metadata = self.opal$process_authors(author_line, true, false)
          } else if ((opal$a = (opal$d = document.opal$attributes()['opal$has_key?']("authors"), opal$d !== false && opal$d !== nil ?(opal$e = ((author_line = document.opal$attributes()['opal$[]']("authors")))['opal$=='](implicit_authors), (opal$e === nil || opal$e === false)) : opal$d)) !== false && opal$a !== nil) {
            author_metadata = self.opal$process_authors(author_line, true)
            } else {
            authors = [];
            author_key = "author_" + (authors.opal$size()['opal$+'](1));
            while ((opal$d = document.opal$attributes()['opal$has_key?'](author_key)) !== false && opal$d !== nil) {
            authors['opal$<<'](document.opal$attributes()['opal$[]'](author_key));
            author_key = "author_" + (authors.opal$size()['opal$+'](1));};
            if (authors.opal$size()['opal$=='](1)) {
              author_metadata = self.opal$process_authors(authors['opal$[]'](0), true, false)
            } else if (authors.opal$size()['opal$>'](1)) {
              author_metadata = self.opal$process_authors(authors.opal$join("; "), true)};
          };
          if (author_metadata !== false && author_metadata !== nil) {
            document.opal$attributes().opal$update(author_metadata);
            if ((opal$a = (opal$d = (opal$e = document.opal$attributes()['opal$has_key?']("email"), (opal$e === nil || opal$e === false)), opal$d !== false && opal$d !== nil ?document.opal$attributes()['opal$has_key?']("email_1") : opal$d)) !== false && opal$a !== nil) {
              document.opal$attributes()['opal$[]=']("email", document.opal$attributes()['opal$[]']("email_1"))};};};
        return metadata;
      });

      opal$opal.defs(self, 'opal$process_authors', function(author_line, names_only, multiple) {
        var opal$a, opal$b, TMP_18, opal$c, TMP_19, self = this, author_metadata = nil, keys = nil, author_entries = nil;
        if (names_only == null) {
          names_only = false
        }
        if (multiple == null) {
          multiple = true
        }
        author_metadata = opal$hash2([], {});
        keys = ["author", "authorinitials", "firstname", "middlename", "lastname", "email"];
        author_entries = (function() {if (multiple !== false && multiple !== nil) {
          return (opal$a = (opal$b = (author_line.opal$split(";"))).opal$map, opal$a._p = (TMP_18 = function(line){var self = TMP_18._s || this;if (line == null) line = nil;
          return line.opal$strip()}, TMP_18._s = self, TMP_18), opal$a).call(opal$b)
          } else {
          return [author_line]
        }; return nil; })();
        (opal$a = (opal$c = author_entries).opal$each_with_index, opal$a._p = (TMP_19 = function(author_entry, idx){var self = TMP_19._s || this, opal$a, opal$b, TMP_20, opal$c, TMP_21, opal$d, opal$e, TMP_22, key_map = nil, segments = nil, match = nil, fname = nil, mname = nil, lname = nil;if (author_entry == null) author_entry = nil;if (idx == null) idx = nil;
        if ((opal$a = author_entry['opal$empty?']()) !== false && opal$a !== nil) {
            return nil;};
          key_map = opal$hash2([], {});
          if ((opal$a = idx['opal$zero?']()) !== false && opal$a !== nil) {
            (opal$a = (opal$b = keys).opal$each, opal$a._p = (TMP_20 = function(key){var self = TMP_20._s || this;if (key == null) key = nil;
            return key_map['opal$[]='](key.opal$to_sym(), key)}, TMP_20._s = self, TMP_20), opal$a).call(opal$b)
            } else {
            (opal$a = (opal$c = keys).opal$each, opal$a._p = (TMP_21 = function(key){var self = TMP_21._s || this;if (key == null) key = nil;
            return key_map['opal$[]='](key.opal$to_sym(), "" + (key) + "_" + (idx['opal$+'](1)))}, TMP_21._s = self, TMP_21), opal$a).call(opal$c)
          };
          segments = nil;
          if (names_only !== false && names_only !== nil) {
            segments = author_entry.opal$split(" ", 3)
          } else if ((opal$a = (match = opal$scope.AuthorInfoLineRx.opal$match(author_entry))) !== false && opal$a !== nil) {
            segments = match.opal$to_a();
            segments.opal$shift();};
          if ((opal$a = segments['opal$nil?']()) !== false && opal$a !== nil) {
            author_metadata['opal$[]='](key_map['opal$[]']("author"), author_metadata['opal$[]='](key_map['opal$[]']("firstname"), fname = author_entry.opal$strip().opal$tr_s(" ", " ")));
            author_metadata['opal$[]='](key_map['opal$[]']("authorinitials"), fname['opal$[]'](0, 1));
            } else {
            author_metadata['opal$[]='](key_map['opal$[]']("firstname"), fname = segments['opal$[]'](0).opal$tr("_", " "));
            author_metadata['opal$[]='](key_map['opal$[]']("author"), fname);
            author_metadata['opal$[]='](key_map['opal$[]']("authorinitials"), fname['opal$[]'](0, 1));
            if ((opal$a = (opal$d = (opal$e = segments['opal$[]'](1)['opal$nil?'](), (opal$e === nil || opal$e === false)), opal$d !== false && opal$d !== nil ?(opal$e = segments['opal$[]'](2)['opal$nil?'](), (opal$e === nil || opal$e === false)) : opal$d)) !== false && opal$a !== nil) {
              author_metadata['opal$[]='](key_map['opal$[]']("middlename"), mname = segments['opal$[]'](1).opal$tr("_", " "));
              author_metadata['opal$[]='](key_map['opal$[]']("lastname"), lname = segments['opal$[]'](2).opal$tr("_", " "));
              author_metadata['opal$[]='](key_map['opal$[]']("author"), [fname, mname, lname].opal$join(" "));
              author_metadata['opal$[]='](key_map['opal$[]']("authorinitials"), [fname['opal$[]'](0, 1), mname['opal$[]'](0, 1), lname['opal$[]'](0, 1)].opal$join());
            } else if ((opal$a = (opal$d = segments['opal$[]'](1)['opal$nil?'](), (opal$d === nil || opal$d === false))) !== false && opal$a !== nil) {
              author_metadata['opal$[]='](key_map['opal$[]']("lastname"), lname = segments['opal$[]'](1).opal$tr("_", " "));
              author_metadata['opal$[]='](key_map['opal$[]']("author"), [fname, lname].opal$join(" "));
              author_metadata['opal$[]='](key_map['opal$[]']("authorinitials"), [fname['opal$[]'](0, 1), lname['opal$[]'](0, 1)].opal$join());};
            if ((opal$a = (((opal$d = names_only) !== false && opal$d !== nil) ? opal$d : segments['opal$[]'](3)['opal$nil?']())) === false || opal$a === nil) {
              author_metadata['opal$[]='](key_map['opal$[]']("email"), segments['opal$[]'](3))};
          };
          author_metadata['opal$[]=']("authorcount", idx['opal$+'](1));
          if (idx['opal$=='](1)) {
            (opal$a = (opal$d = keys).opal$each, opal$a._p = (TMP_22 = function(key){var self = TMP_22._s || this, opal$a;if (key == null) key = nil;
            if ((opal$a = author_metadata['opal$has_key?'](key)) !== false && opal$a !== nil) {
                return author_metadata['opal$[]=']("" + (key) + "_1", author_metadata['opal$[]'](key))
                } else {
                return nil
              }}, TMP_22._s = self, TMP_22), opal$a).call(opal$d)};
          if ((opal$a = idx['opal$zero?']()) !== false && opal$a !== nil) {
            return author_metadata['opal$[]=']("authors", author_metadata['opal$[]'](key_map['opal$[]']("author")))
            } else {
            return author_metadata['opal$[]=']("authors", "" + (author_metadata['opal$[]']("authors")) + ", " + (author_metadata['opal$[]'](key_map['opal$[]']("author"))))
          };}, TMP_19._s = self, TMP_19), opal$a).call(opal$c);
        return author_metadata;
      });

      opal$opal.defs(self, 'opal$parse_block_metadata_lines', function(reader, parent, attributes, options) {
        var opal$a, opal$b, self = this;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        if (options == null) {
          options = opal$hash2([], {})
        }
        while ((opal$b = self.opal$parse_block_metadata_line(reader, parent, attributes, options)) !== false && opal$b !== nil) {
        reader.opal$advance();
        reader.opal$skip_blank_lines();};
        return attributes;
      });

      opal$opal.defs(self, 'opal$parse_block_metadata_line', function(reader, parent, attributes, options) {
        var opal$a, opal$b, opal$c, opal$d, self = this, next_line = nil, commentish = nil, match = nil, terminator = nil, in_square_brackets = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        if ((opal$a = reader['opal$has_more_lines?']()) === false || opal$a === nil) {
          return false};
        next_line = reader.opal$peek_line();
        if ((opal$a = (opal$b = (commentish = next_line['opal$start_with?']("//")), opal$b !== false && opal$b !== nil ?(match = opal$scope.CommentBlockRx.opal$match(next_line)) : opal$b)) !== false && opal$a !== nil) {
          terminator = match['opal$[]'](0);
          reader.opal$read_lines_until(opal$hash2(["skip_first_line", "preserve_last_line", "terminator", "skip_processing"], {"skip_first_line": true, "preserve_last_line": true, "terminator": terminator, "skip_processing": true}));
        } else if ((opal$a = ((opal$b = commentish !== false && commentish !== nil) ? opal$scope.CommentLineRx['opal$=~'](next_line) : opal$b)) === false || opal$a === nil) {
          if ((opal$a = (opal$b = (opal$c = (opal$d = options['opal$[]']("text"), (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?next_line['opal$start_with?'](":") : opal$c), opal$b !== false && opal$b !== nil ?(match = opal$scope.AttributeEntryRx.opal$match(next_line)) : opal$b)) !== false && opal$a !== nil) {
            self.opal$process_attribute_entry(reader, parent, attributes, match)
          } else if ((opal$a = (opal$b = (in_square_brackets = (opal$c = next_line['opal$start_with?']("["), opal$c !== false && opal$c !== nil ?next_line['opal$end_with?']("]") : opal$c)), opal$b !== false && opal$b !== nil ?(match = opal$scope.BlockAnchorRx.opal$match(next_line)) : opal$b)) !== false && opal$a !== nil) {
            if ((opal$a = match['opal$[]'](1)['opal$nil_or_empty?']()) === false || opal$a === nil) {
              attributes['opal$[]=']("id", match['opal$[]'](1));
              if ((opal$a = match['opal$[]'](2)['opal$nil?']()) === false || opal$a === nil) {
                attributes['opal$[]=']("reftext", match['opal$[]'](2))};}
          } else if ((opal$a = ((opal$b = in_square_brackets !== false && in_square_brackets !== nil) ? (match = opal$scope.BlockAttributeListRx.opal$match(next_line)) : opal$b)) !== false && opal$a !== nil) {
            parent.opal$document().opal$parse_attributes(match['opal$[]'](1), [], opal$hash2(["sub_input", "into"], {"sub_input": true, "into": attributes}))
          } else if ((opal$a = (opal$b = (opal$c = options['opal$[]']("text"), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(match = opal$scope.BlockTitleRx.opal$match(next_line)) : opal$b)) !== false && opal$a !== nil) {
            attributes['opal$[]=']("title", match['opal$[]'](1))
            } else {
            return false
          }};
        return true;
      });

      opal$opal.defs(self, 'opal$process_attribute_entries', function(reader, parent, attributes) {
        var opal$a, opal$b, self = this;
        if (attributes == null) {
          attributes = nil
        }
        reader.opal$skip_comment_lines();
        while ((opal$b = self.opal$process_attribute_entry(reader, parent, attributes)) !== false && opal$b !== nil) {
        reader.opal$advance();
        reader.opal$skip_comment_lines();};
      });

      opal$opal.defs(self, 'opal$process_attribute_entry', function(reader, parent, attributes, match) {
        var opal$a, opal$b, self = this, name = nil, value = nil, next_line = nil;
        if (attributes == null) {
          attributes = nil
        }
        if (match == null) {
          match = nil
        }
        (((opal$a = match) !== false && opal$a !== nil) ? opal$a : match = ((function() {if ((opal$b = reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
          return opal$scope.AttributeEntryRx.opal$match(reader.opal$peek_line())
          } else {
          return nil
        }; return nil; })()));
        if (match !== false && match !== nil) {
          name = match['opal$[]'](1);
          value = (((opal$a = match['opal$[]'](2)) !== false && opal$a !== nil) ? opal$a : "");
          if ((opal$a = value['opal$end_with?'](opal$scope.LINE_BREAK)) !== false && opal$a !== nil) {
            value = value.opal$chop().opal$rstrip();
            while ((opal$b = reader.opal$advance()) !== false && opal$b !== nil) {
            next_line = reader.opal$peek_line().opal$strip();
            if ((opal$b = next_line['opal$empty?']()) !== false && opal$b !== nil) {
              break;};
            if ((opal$b = next_line['opal$end_with?'](opal$scope.LINE_BREAK)) !== false && opal$b !== nil) {
              value = "" + (value) + " " + (next_line.opal$chop().opal$rstrip())
              } else {
              value = "" + (value) + " " + (next_line);
              break;;
            };};};
          self.opal$store_attribute(name, value, ((function() {if (parent !== false && parent !== nil) {
            return parent.opal$document()
            } else {
            return nil
          }; return nil; })()), attributes);
          return true;
          } else {
          return false
        };
      });

      opal$opal.defs(self, 'opal$store_attribute', function(name, value, doc, attrs) {
        var opal$a, opal$b, opal$c, self = this, accessible = nil;
        if (doc == null) {
          doc = nil
        }
        if (attrs == null) {
          attrs = nil
        }
        if ((opal$a = name['opal$end_with?']("!")) !== false && opal$a !== nil) {
          value = nil;
          name = name.opal$chop();
        } else if ((opal$a = name['opal$start_with?']("!")) !== false && opal$a !== nil) {
          value = nil;
          name = name['opal$[]'](opal$range(1, -1, false));};
        name = self.opal$sanitize_attribute_name(name);
        accessible = true;
        if (doc !== false && doc !== nil) {
          accessible = (function() {if ((opal$a = value['opal$nil?']()) !== false && opal$a !== nil) {
            return doc.opal$delete_attribute(name)
            } else {
            return doc.opal$set_attribute(name, value)
          }; return nil; })()};
        if ((opal$a = (((opal$b = (opal$c = accessible, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : attrs['opal$nil?']())) === false || opal$a === nil) {
          (opal$scope.Document)._scope.AttributeEntry.opal$new(name, value).opal$save_to(attrs)};
        return [name, value];
      });

      opal$opal.defs(self, 'opal$resolve_list_marker', function(list_type, marker, ordinal, validate, reader) {
        var opal$a, opal$b, opal$c, self = this;
        if (ordinal == null) {
          ordinal = 0
        }
        if (validate == null) {
          validate = false
        }
        if (reader == null) {
          reader = nil
        }
        if ((opal$a = ((opal$b = list_type['opal$==']("olist")) ? (opal$c = marker['opal$start_with?']("."), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          return self.opal$resolve_ordered_list_marker(marker, ordinal, validate, reader)
        } else if (list_type['opal$==']("colist")) {
          return "<1>"
          } else {
          return marker
        };
      });

      opal$opal.defs(self, 'opal$resolve_ordered_list_marker', function(marker, ordinal, validate, reader) {
        var opal$a, opal$b, TMP_23, opal$c, opal$d, self = this, number_style = nil, expected = nil, actual = nil, opal$case = nil;
        if (ordinal == null) {
          ordinal = 0
        }
        if (validate == null) {
          validate = false
        }
        if (reader == null) {
          reader = nil
        }
        number_style = (opal$a = (opal$b = opal$scope.ORDERED_LIST_STYLES).opal$detect, opal$a._p = (TMP_23 = function(s){var self = TMP_23._s || this;if (s == null) s = nil;
        return opal$scope.OrderedListMarkerRxMap['opal$[]'](s)['opal$=~'](marker)}, TMP_23._s = self, TMP_23), opal$a).call(opal$b);
        expected = actual = nil;
        opal$case = number_style;if ("arabic"['opal$==='](opal$case)) {if (validate !== false && validate !== nil) {
          expected = ordinal['opal$+'](1);
          actual = marker.opal$to_i();};
        marker = "1.";}else if ("loweralpha"['opal$==='](opal$case)) {if (validate !== false && validate !== nil) {
          expected = ("a"['opal$[]'](0).opal$ord()['opal$+'](ordinal)).opal$chr();
          actual = marker.opal$chomp(".");};
        marker = "a.";}else if ("upperalpha"['opal$==='](opal$case)) {if (validate !== false && validate !== nil) {
          expected = ("A"['opal$[]'](0).opal$ord()['opal$+'](ordinal)).opal$chr();
          actual = marker.opal$chomp(".");};
        marker = "A.";}else if ("lowerroman"['opal$==='](opal$case)) {if (validate !== false && validate !== nil) {
          expected = ordinal['opal$+'](1);
          actual = self.opal$roman_numeral_to_int(marker.opal$chomp(")"));};
        marker = "i)";}else if ("upperroman"['opal$==='](opal$case)) {if (validate !== false && validate !== nil) {
          expected = ordinal['opal$+'](1);
          actual = self.opal$roman_numeral_to_int(marker.opal$chomp(")"));};
        marker = "I)";};
        if ((opal$a = ((opal$c = validate !== false && validate !== nil) ? (opal$d = expected['opal$=='](actual), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$a !== nil) {
          self.opal$warn("asciidoctor: WARNING: " + (reader.opal$line_info()) + ": list item index: expected " + (expected) + ", got " + (actual))};
        return marker;
      });

      opal$opal.defs(self, 'opal$is_sibling_list_item?', function(line, list_type, sibling_trait) {
        var opal$a, opal$b, self = this, matcher = nil, expected_marker = nil, m = nil;
        if ((opal$a = sibling_trait['opal$is_a?'](((opal$b = opal$opal.Object._scope.Regexp) == null ? opal$opal.cm('Regexp') : opal$b))) !== false && opal$a !== nil) {
          matcher = sibling_trait;
          expected_marker = false;
          } else {
          matcher = opal$scope.ListRxMap['opal$[]'](list_type);
          expected_marker = sibling_trait;
        };
        if ((opal$a = (m = matcher.opal$match(line))) !== false && opal$a !== nil) {
          if (expected_marker !== false && expected_marker !== nil) {
            return expected_marker['opal$=='](self.opal$resolve_list_marker(list_type, m['opal$[]'](1)))
            } else {
            return true
          }
          } else {
          return false
        };
      });

      opal$opal.defs(self, 'opal$next_table', function(table_reader, parent, attributes) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, opal$f, TMP_24, self = this, table = nil, explicit_col_specs = nil, skipped = nil, parser_ctx = nil, loop_idx = nil, line = nil, next_line = nil, next_cell_spec = nil, seen = nil, m = nil, cell_text = nil, even_width = nil;
        table = opal$scope.Table.opal$new(parent, attributes);
        if ((opal$a = (attributes['opal$has_key?']("title"))) !== false && opal$a !== nil) {
          table['opal$title='](attributes.opal$delete("title"));
          table.opal$assign_caption(attributes.opal$delete("caption"));};
        if ((opal$a = attributes['opal$has_key?']("cols")) !== false && opal$a !== nil) {
          table.opal$create_columns(self.opal$parse_col_specs(attributes['opal$[]']("cols")));
          explicit_col_specs = true;
          } else {
          explicit_col_specs = false
        };
        skipped = table_reader.opal$skip_blank_lines();
        parser_ctx = (opal$scope.Table)._scope.ParserContext.opal$new(table_reader, table, attributes);
        loop_idx = -1;
        while ((opal$b = table_reader['opal$has_more_lines?']()) !== false && opal$b !== nil) {
        loop_idx = loop_idx['opal$+'](1);
        line = table_reader.opal$read_line();
        if ((opal$b = (opal$c = (opal$d = (opal$e = ((opal$f = skipped['opal$=='](0)) ? loop_idx['opal$zero?']() : opal$f), opal$e !== false && opal$e !== nil ?(opal$f = attributes['opal$has_key?']("options"), (opal$f === nil || opal$f === false)) : opal$e), opal$d !== false && opal$d !== nil ?(opal$e = ((next_line = table_reader.opal$peek_line()))['opal$nil?'](), (opal$e === nil || opal$e === false)) : opal$d), opal$c !== false && opal$c !== nil ?next_line['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          table['opal$has_header_option='](true);
          table.opal$set_option("header");};
        if (parser_ctx.opal$format()['opal$==']("psv")) {
          if ((opal$b = parser_ctx['opal$starts_with_delimiter?'](line)) !== false && opal$b !== nil) {
            line = line['opal$[]'](opal$range(1, -1, false));
            parser_ctx.opal$close_open_cell();
            } else {
            opal$b = opal$opal.to_ary(self.opal$parse_cell_spec(line, "start")), next_cell_spec = (opal$b[0] == null ? nil : opal$b[0]), line = (opal$b[1] == null ? nil : opal$b[1]);
            if ((opal$b = (opal$c = next_cell_spec['opal$nil?'](), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
              parser_ctx.opal$close_open_cell(next_cell_spec)};
          }};
        seen = false;
        while ((opal$c = (((opal$d = (opal$e = seen, (opal$e === nil || opal$e === false))) !== false && opal$d !== nil) ? opal$d : (opal$e = line['opal$empty?'](), (opal$e === nil || opal$e === false)))) !== false && opal$c !== nil) {
        seen = true;
        if ((opal$c = (m = parser_ctx.opal$match_delimiter(line))) !== false && opal$c !== nil) {
          if (parser_ctx.opal$format()['opal$==']("csv")) {
            if ((opal$c = parser_ctx['opal$buffer_has_unclosed_quotes?'](m.opal$pre_match())) !== false && opal$c !== nil) {
              line = parser_ctx.opal$skip_matched_delimiter(m);
              continue;;}
          } else if ((opal$c = m.opal$pre_match()['opal$end_with?']("\\")) !== false && opal$c !== nil) {
            line = parser_ctx.opal$skip_matched_delimiter(m, true);
            continue;;};
          if (parser_ctx.opal$format()['opal$==']("psv")) {
            opal$c = opal$opal.to_ary(self.opal$parse_cell_spec(m.opal$pre_match(), "end")), next_cell_spec = (opal$c[0] == null ? nil : opal$c[0]), cell_text = (opal$c[1] == null ? nil : opal$c[1]);
            parser_ctx.opal$push_cell_spec(next_cell_spec);
            parser_ctx['opal$buffer=']("" + (parser_ctx.opal$buffer()) + (cell_text));
            } else {
            parser_ctx['opal$buffer=']("" + (parser_ctx.opal$buffer()) + (m.opal$pre_match()))
          };
          line = m.opal$post_match();
          parser_ctx.opal$close_cell();
          } else {
          parser_ctx['opal$buffer=']("" + (parser_ctx.opal$buffer()) + (line) + (opal$scope.EOL));
          if (parser_ctx.opal$format()['opal$==']("csv")) {
            parser_ctx['opal$buffer=']("" + (parser_ctx.opal$buffer().opal$rstrip()) + " ")};
          line = "";
          if ((opal$c = (((opal$d = parser_ctx.opal$format()['opal$==']("psv")) !== false && opal$d !== nil) ? opal$d : (((opal$e = parser_ctx.opal$format()['opal$==']("csv")) ? parser_ctx['opal$buffer_has_unclosed_quotes?']() : opal$e)))) !== false && opal$c !== nil) {
            parser_ctx.opal$keep_cell_open()
            } else {
            parser_ctx.opal$close_cell(true)
          };
        };};
        if ((opal$b = parser_ctx['opal$cell_open?']()) === false || opal$b === nil) {
          skipped = table_reader.opal$skip_blank_lines()};
        if ((opal$b = (opal$c = table_reader['opal$has_more_lines?'](), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) {
          parser_ctx.opal$close_cell(true)};};
        (opal$a = "colcount", opal$b = table.opal$attributes(), (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, parser_ctx.opal$col_count())));
        if ((opal$a = (opal$b = explicit_col_specs, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          even_width = ((100.0)['opal$/'](parser_ctx.opal$col_count())).opal$floor();
          (opal$a = (opal$b = table.opal$columns()).opal$each, opal$a._p = (TMP_24 = function(c){var self = TMP_24._s || this;if (c == null) c = nil;
          return c.opal$assign_width(0, even_width)}, TMP_24._s = self, TMP_24), opal$a).call(opal$b);};
        table.opal$partition_header_footer(attributes);
        return table;
      });

      opal$opal.defs(self, 'opal$parse_col_specs', function(records) {
        var opal$a, opal$b, TMP_25, opal$c, TMP_26, self = this, specs = nil;
        if ((opal$a = opal$scope.DigitsRx['opal$=~'](records)) !== false && opal$a !== nil) {
          return (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$c)).opal$new, opal$a._p = (TMP_25 = function(){var self = TMP_25._s || this;
          return opal$hash2(["width"], {"width": 1})}, TMP_25._s = self, TMP_25), opal$a).call(opal$b, records.opal$to_i())};
        specs = [];
        (opal$a = (opal$c = records.opal$split(",")).opal$each, opal$a._p = (TMP_26 = function(record){var self = TMP_26._s || this, opal$a, opal$b, opal$c, TMP_27, m = nil, spec = nil, colspec = nil, rowspec = nil, repeat = nil;if (record == null) record = nil;
        if ((opal$a = (m = opal$scope.ColumnSpecRx.opal$match(record))) !== false && opal$a !== nil) {
            spec = opal$hash2([], {});
            if ((opal$a = m['opal$[]'](2)) !== false && opal$a !== nil) {
              opal$a = opal$opal.to_ary(m['opal$[]'](2).opal$split(".")), colspec = (opal$a[0] == null ? nil : opal$a[0]), rowspec = (opal$a[1] == null ? nil : opal$a[1]);
              if ((opal$a = (opal$b = (opal$c = colspec['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("h")['opal$has_key?'](colspec) : opal$b)) !== false && opal$a !== nil) {
                spec['opal$[]=']("halign", (opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("h")['opal$[]'](colspec))};
              if ((opal$a = (opal$b = (opal$c = rowspec['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("v")['opal$has_key?'](rowspec) : opal$b)) !== false && opal$a !== nil) {
                spec['opal$[]=']("valign", (opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("v")['opal$[]'](rowspec))};};
            spec['opal$[]=']("width", (function() {if ((opal$a = (opal$b = m['opal$[]'](3)['opal$nil?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              return m['opal$[]'](3).opal$to_i()
              } else {
              return 1
            }; return nil; })());
            if ((opal$a = (opal$b = m['opal$[]'](4), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.TEXT_STYLES['opal$has_key?'](m['opal$[]'](4)) : opal$b)) !== false && opal$a !== nil) {
              spec['opal$[]=']("style", (opal$scope.Table)._scope.TEXT_STYLES['opal$[]'](m['opal$[]'](4)))};
            repeat = (function() {if ((opal$a = (opal$b = m['opal$[]'](1)['opal$nil?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              return m['opal$[]'](1).opal$to_i()
              } else {
              return 1
            }; return nil; })();
            return (opal$a = (opal$b = (1)).opal$upto, opal$a._p = (TMP_27 = function(){var self = TMP_27._s || this;
            return specs['opal$<<'](spec.opal$dup())}, TMP_27._s = self, TMP_27), opal$a).call(opal$b, repeat);
            } else {
            return nil
          }}, TMP_26._s = self, TMP_26), opal$a).call(opal$c);
        return specs;
      });

      opal$opal.defs(self, 'opal$parse_cell_spec', function(line, pos) {
        var opal$a, opal$b, opal$c, self = this, spec = nil, rest = nil, m = nil, colspec = nil, rowspec = nil;
        if (pos == null) {
          pos = "start"
        }
        spec = ((function() {if (pos['opal$==']("end")) {
          return opal$hash2([], {})
          } else {
          return nil
        }; return nil; })());
        rest = line;
        if ((opal$a = (m = ((function() {if (pos['opal$==']("start")) {
          return opal$scope.CellSpecStartRx
          } else {
          return opal$scope.CellSpecEndRx
        }; return nil; })()).opal$match(line))) !== false && opal$a !== nil) {
          spec = opal$hash2([], {});
          if ((opal$a = m['opal$[]'](0)['opal$empty?']()) !== false && opal$a !== nil) {
            return [spec, line]};
          rest = ((function() {if (pos['opal$==']("start")) {
            return m.opal$post_match()
            } else {
            return m.opal$pre_match()
          }; return nil; })());
          if ((opal$a = m['opal$[]'](1)) !== false && opal$a !== nil) {
            opal$a = opal$opal.to_ary(m['opal$[]'](1).opal$split(".")), colspec = (opal$a[0] == null ? nil : opal$a[0]), rowspec = (opal$a[1] == null ? nil : opal$a[1]);
            colspec = (function() {if ((opal$a = colspec['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
              return 1
              } else {
              return colspec.opal$to_i()
            }; return nil; })();
            rowspec = (function() {if ((opal$a = rowspec['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
              return 1
              } else {
              return rowspec.opal$to_i()
            }; return nil; })();
            if (m['opal$[]'](2)['opal$==']("+")) {
              if ((opal$a = colspec['opal$=='](1)) === false || opal$a === nil) {
                spec['opal$[]=']("colspan", colspec)};
              if ((opal$a = rowspec['opal$=='](1)) === false || opal$a === nil) {
                spec['opal$[]=']("rowspan", rowspec)};
            } else if (m['opal$[]'](2)['opal$==']("*")) {
              if ((opal$a = colspec['opal$=='](1)) === false || opal$a === nil) {
                spec['opal$[]=']("repeatcol", colspec)}};};
          if ((opal$a = m['opal$[]'](3)) !== false && opal$a !== nil) {
            opal$a = opal$opal.to_ary(m['opal$[]'](3).opal$split(".")), colspec = (opal$a[0] == null ? nil : opal$a[0]), rowspec = (opal$a[1] == null ? nil : opal$a[1]);
            if ((opal$a = (opal$b = (opal$c = colspec['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("h")['opal$has_key?'](colspec) : opal$b)) !== false && opal$a !== nil) {
              spec['opal$[]=']("halign", (opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("h")['opal$[]'](colspec))};
            if ((opal$a = (opal$b = (opal$c = rowspec['opal$nil_or_empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("v")['opal$has_key?'](rowspec) : opal$b)) !== false && opal$a !== nil) {
              spec['opal$[]=']("valign", (opal$scope.Table)._scope.ALIGNMENTS['opal$[]']("v")['opal$[]'](rowspec))};};
          if ((opal$a = (opal$b = m['opal$[]'](4), opal$b !== false && opal$b !== nil ?(opal$scope.Table)._scope.TEXT_STYLES['opal$has_key?'](m['opal$[]'](4)) : opal$b)) !== false && opal$a !== nil) {
            spec['opal$[]=']("style", (opal$scope.Table)._scope.TEXT_STYLES['opal$[]'](m['opal$[]'](4)))};};
        return [spec, rest];
      });

      opal$opal.defs(self, 'opal$parse_style_attribute', function(attributes, reader) {
        var opal$a, opal$b, opal$c, TMP_28, TMP_29, opal$d, TMP_30, self = this, original_style = nil, raw_style = nil, type = nil, collector = nil, parsed = nil, save_current = nil, parsed_style = nil, options = nil, existing_opts = nil;
        if (reader == null) {
          reader = nil
        }
        original_style = attributes['opal$[]']("style");
        raw_style = attributes['opal$[]'](1);
        if ((opal$a = (((opal$b = (opal$c = raw_style, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : raw_style['opal$include?'](" "))) !== false && opal$a !== nil) {
          attributes['opal$[]=']("style", raw_style);
          return [raw_style, original_style];
          } else {
          type = "style";
          collector = [];
          parsed = opal$hash2([], {});
          save_current = (opal$a = (opal$b = self).opal$lambda, opal$a._p = (TMP_28 = function(){var self = TMP_28._s || this, opal$a, opal$b, opal$c, opal$case = nil;
          if ((opal$a = collector['opal$empty?']()) !== false && opal$a !== nil) {
              if ((opal$a = (opal$b = type['opal$==']("style"), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                return self.opal$warn("asciidoctor: WARNING:" + ((function() {if ((opal$a = reader['opal$nil?']()) !== false && opal$a !== nil) {
                  return nil
                  } else {
                  return " " + (reader.opal$prev_line_info()) + ":"
                }; return nil; })()) + " invalid empty " + (type) + " detected in style attribute")
                } else {
                return nil
              }
              } else {
              opal$case = type;if ("role"['opal$==='](opal$case) || "option"['opal$==='](opal$case)) {(opal$a = type, opal$b = parsed, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, [])));
              parsed['opal$[]'](type).opal$push(collector.opal$join());}else if ("id"['opal$==='](opal$case)) {if ((opal$a = parsed['opal$has_key?']("id")) !== false && opal$a !== nil) {
                self.opal$warn("asciidoctor: WARNING:" + ((function() {if ((opal$a = reader['opal$nil?']()) !== false && opal$a !== nil) {
                  return nil
                  } else {
                  return " " + (reader.opal$prev_line_info()) + ":"
                }; return nil; })()) + " multiple ids detected in style attribute")};
              parsed['opal$[]='](type, collector.opal$join());}else {parsed['opal$[]='](type, collector.opal$join())};
              return collector = [];
            }}, TMP_28._s = self, TMP_28), opal$a).call(opal$b);
          (opal$a = (opal$c = raw_style).opal$each_char, opal$a._p = (TMP_29 = function(c){var self = TMP_29._s || this, opal$a, opal$b, opal$c, opal$case = nil;if (c == null) c = nil;
          if ((opal$a = (((opal$b = (((opal$c = c['opal$=='](".")) !== false && opal$c !== nil) ? opal$c : c['opal$==']("#"))) !== false && opal$b !== nil) ? opal$b : c['opal$==']("%"))) !== false && opal$a !== nil) {
              save_current.opal$call();
              return (function() {opal$case = c;if ("."['opal$==='](opal$case)) {return type = "role"}else if ("#"['opal$==='](opal$case)) {return type = "id"}else if ("%"['opal$==='](opal$case)) {return type = "option"}else { return nil }})();
              } else {
              return collector.opal$push(c)
            }}, TMP_29._s = self, TMP_29), opal$a).call(opal$c);
          if (type['opal$==']("style")) {
            parsed_style = attributes['opal$[]=']("style", raw_style)
            } else {
            save_current.opal$call();
            if ((opal$a = parsed['opal$has_key?']("style")) !== false && opal$a !== nil) {
              parsed_style = attributes['opal$[]=']("style", parsed['opal$[]']("style"))
              } else {
              parsed_style = nil
            };
            if ((opal$a = parsed['opal$has_key?']("id")) !== false && opal$a !== nil) {
              attributes['opal$[]=']("id", parsed['opal$[]']("id"))};
            if ((opal$a = parsed['opal$has_key?']("role")) !== false && opal$a !== nil) {
              attributes['opal$[]=']("role", parsed['opal$[]']("role")['opal$*'](" "))};
            if ((opal$a = parsed['opal$has_key?']("option")) !== false && opal$a !== nil) {
              (opal$a = (opal$d = ((options = parsed['opal$[]']("option")))).opal$each, opal$a._p = (TMP_30 = function(option){var self = TMP_30._s || this;if (option == null) option = nil;
              return attributes['opal$[]=']("" + (option) + "-option", "")}, TMP_30._s = self, TMP_30), opal$a).call(opal$d);
              if ((opal$a = (existing_opts = attributes['opal$[]']("options"))) !== false && opal$a !== nil) {
                attributes['opal$[]=']("options", (options['opal$+'](existing_opts.opal$split(",")))['opal$*'](","))
                } else {
                attributes['opal$[]=']("options", options['opal$*'](","))
              };};
          };
          return [parsed_style, original_style];
        };
      });

      opal$opal.defs(self, 'opal$reset_block_indent!', function(lines, indent) {
        var opal$a, opal$b, opal$c, TMP_31, TMP_32, opal$d, TMP_33, self = this, tab_detected = nil, tab_expansion = nil, offsets = nil, offset = nil, padding = nil;
        if (indent == null) {
          indent = 0
        }
        if ((opal$a = (((opal$b = (opal$c = indent, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : lines['opal$empty?']())) !== false && opal$a !== nil) {
          return nil};
        tab_detected = false;
        tab_expansion = "    ";
        offsets = (opal$a = (opal$b = lines).opal$map, opal$a._p = (TMP_31 = function(line){var self = TMP_31._s || this, opal$a, flush_line = nil, offset = nil;if (line == null) line = nil;
        if ((opal$a = line.opal$chr().opal$lstrip()['opal$empty?']()) === false || opal$a === nil) {
            return (opal$breaker.opal$v = [], opal$breaker)};
          if ((opal$a = line['opal$include?'](opal$scope.TAB)) !== false && opal$a !== nil) {
            tab_detected = true;
            line = line.opal$gsub(opal$scope.TAB_PATTERN, tab_expansion);};
          if ((opal$a = ((flush_line = line.opal$lstrip()))['opal$empty?']()) !== false && opal$a !== nil) {
            return nil
          } else if (((offset = line.opal$length()['opal$-'](flush_line.opal$length())))['opal$=='](0)) {
            return (opal$breaker.opal$v = [], opal$breaker)
            } else {
            return offset
          };}, TMP_31._s = self, TMP_31), opal$a).call(opal$b);
        if ((opal$a = (((opal$c = offsets['opal$empty?']()) !== false && opal$c !== nil) ? opal$c : ((offsets = offsets.opal$compact()))['opal$empty?']())) === false || opal$a === nil) {
          if (((offset = offsets.opal$min()))['opal$>'](0)) {
            (opal$a = (opal$c = lines)['opal$map!'], opal$a._p = (TMP_32 = function(line){var self = TMP_32._s || this;if (line == null) line = nil;
            if (tab_detected !== false && tab_detected !== nil) {
                line = line.opal$gsub(opal$scope.TAB_PATTERN, tab_expansion)};
              return line['opal$[]'](opal$range(offset, -1, false)).opal$to_s();}, TMP_32._s = self, TMP_32), opal$a).call(opal$c)}};
        if (indent['opal$>'](0)) {
          padding = " "['opal$*'](indent);
          (opal$a = (opal$d = lines)['opal$map!'], opal$a._p = (TMP_33 = function(line){var self = TMP_33._s || this;if (line == null) line = nil;
          return "" + (padding) + (line)}, TMP_33._s = self, TMP_33), opal$a).call(opal$d);};
        return nil;
      });

      opal$opal.defs(self, 'opal$sanitize_attribute_name', function(name) {
        var self = this;
        return name.opal$gsub(opal$scope.InvalidAttributeNameCharsRx, "").opal$downcase();
      });

      return (opal$opal.defs(self, 'opal$roman_numeral_to_int', function(value) {
        var opal$a, opal$b, TMP_34, self = this, digits = nil, result = nil;
        value = value.opal$downcase();
        digits = opal$hash2(["i", "v", "x"], {"i": 1, "v": 5, "x": 10});
        result = 0;
        (opal$a = (opal$b = (opal$range(0, value.opal$length()['opal$-'](1), false))).opal$each, opal$a._p = (TMP_34 = function(i){var self = TMP_34._s || this, opal$a, opal$b, digit = nil;if (i == null) i = nil;
        digit = digits['opal$[]'](value['opal$[]'](opal$range(i, i, false)));
          if ((opal$a = ((opal$b = i['opal$+'](1)['opal$<'](value.opal$length())) ? digits['opal$[]'](value['opal$[]'](opal$range(i['opal$+'](1), i['opal$+'](1), false)))['opal$>'](digit) : opal$b)) !== false && opal$a !== nil) {
            return result = result['opal$-'](digit)
            } else {
            return result = result['opal$+'](digit)
          };}, TMP_34._s = self, TMP_34), opal$a).call(opal$b);
        return result;
      }), nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range, opal$gvars = opal$opal.gvars;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$PathResolver(){};
      var self = opal$PathResolver = opal$klass(opal$base, opal$super, 'PathResolver', opal$PathResolver);

      var def = opal$PathResolver._proto, opal$scope = opal$PathResolver._scope;
      def.file_separator = def._partition_path_web = def._partition_path_sys = def.working_dir = nil;
      opal$opal.cdecl(opal$scope, 'DOT', ".");

      opal$opal.cdecl(opal$scope, 'DOT_DOT', "..");

      opal$opal.cdecl(opal$scope, 'DOT_SLASH', "./");

      opal$opal.cdecl(opal$scope, 'SLASH', "/");

      opal$opal.cdecl(opal$scope, 'BACKSLASH', "\\");

      opal$opal.cdecl(opal$scope, 'DOUBLE_SLASH', "//");

      opal$opal.cdecl(opal$scope, 'WindowsRootRx', /^[a-zA-Z]:(?:\\|\/)/);

      self.opal$attr_accessor("file_separator");

      self.opal$attr_accessor("working_dir");

      def.opal$initialize = function(file_separator, working_dir) {
        var opal$a, opal$b, self = this;
        if (file_separator == null) {
          file_separator = nil
        }
        if (working_dir == null) {
          working_dir = nil
        }
        self.file_separator = (function() {if (file_separator !== false && file_separator !== nil) {
          return file_separator
          } else {
          return ((((opal$a = (((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b))._scope.ALT_SEPARATOR) !== false && opal$a !== nil) ? opal$a : (((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b))._scope.SEPARATOR))
        }; return nil; })();
        if (working_dir !== false && working_dir !== nil) {
          self.working_dir = (function() {if ((opal$a = (self['opal$is_root?'](working_dir))) !== false && opal$a !== nil) {
            return working_dir
            } else {
            return (((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(working_dir))
          }; return nil; })()
          } else {
          self.working_dir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(((opal$a = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$a).opal$pwd())
        };
        self._partition_path_sys = opal$hash2([], {});
        return self._partition_path_web = opal$hash2([], {});
      };

      def['opal$is_root?'] = function(path) {
        var opal$a, opal$b, self = this;
        if ((opal$a = path['opal$start_with?'](opal$scope.SLASH)) !== false && opal$a !== nil) {
          return true
        } else if ((opal$a = ((opal$b = self.file_separator['opal$=='](opal$scope.BACKSLASH)) ? opal$scope.WindowsRootRx['opal$=~'](path) : opal$b)) !== false && opal$a !== nil) {
          return true
          } else {
          return false
        };
      };

      def['opal$is_unc?'] = function(path) {
        var self = this;
        return path['opal$start_with?'](opal$scope.DOUBLE_SLASH);
      };

      def['opal$is_web_root?'] = function(path) {
        var self = this;
        return path['opal$start_with?'](opal$scope.SLASH);
      };

      def.opal$posixfy = function(path) {
        var opal$a, self = this;
        if ((opal$a = path['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          return ""
        } else if ((opal$a = path['opal$include?'](opal$scope.BACKSLASH)) !== false && opal$a !== nil) {
          return path.opal$tr(opal$scope.BACKSLASH, opal$scope.SLASH)
          } else {
          return path
        };
      };

      def.opal$expand_path = function(path) {
        var opal$a, self = this, path_segments = nil, path_root = nil, _ = nil;
        opal$a = opal$opal.to_ary(self.opal$partition_path(path)), path_segments = (opal$a[0] == null ? nil : opal$a[0]), path_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
        return self.opal$join_path(path_segments, path_root);
      };

      def.opal$partition_path = function(path, web_path) {
        var opal$a, self = this, result = nil, posix_path = nil, root = nil, path_segments = nil;
        if (web_path == null) {
          web_path = false
        }
        if ((opal$a = (result = (function() {if (web_path !== false && web_path !== nil) {
          return self._partition_path_web['opal$[]'](path)
          } else {
          return self._partition_path_sys['opal$[]'](path)
        }; return nil; })())) !== false && opal$a !== nil) {
          return result};
        posix_path = self.opal$posixfy(path);
        root = (function() {if (web_path !== false && web_path !== nil) {
          if ((opal$a = self['opal$is_web_root?'](posix_path)) !== false && opal$a !== nil) {
            return opal$scope.SLASH
          } else if ((opal$a = posix_path['opal$start_with?'](opal$scope.DOT_SLASH)) !== false && opal$a !== nil) {
            return opal$scope.DOT_SLASH
            } else {
            return nil
          }
        } else if ((opal$a = self['opal$is_root?'](posix_path)) !== false && opal$a !== nil) {
          if ((opal$a = self['opal$is_unc?'](posix_path)) !== false && opal$a !== nil) {
            return opal$scope.DOUBLE_SLASH
          } else if ((opal$a = posix_path['opal$start_with?'](opal$scope.SLASH)) !== false && opal$a !== nil) {
            return opal$scope.SLASH
            } else {
            return posix_path['opal$[]'](opal$range(0, (posix_path.opal$index(opal$scope.SLASH)), false))
          }
        } else if ((opal$a = posix_path['opal$start_with?'](opal$scope.DOT_SLASH)) !== false && opal$a !== nil) {
          return opal$scope.DOT_SLASH
          } else {
          return nil
        }; return nil; })();
        path_segments = posix_path.opal$split(opal$scope.SLASH);
        if (root['opal$=='](opal$scope.DOUBLE_SLASH)) {
          path_segments = path_segments['opal$[]'](opal$range(2, -1, false))
        } else if (root !== false && root !== nil) {
          path_segments.opal$shift()};
        path_segments.opal$delete(opal$scope.DOT);
        return ((function() {if (web_path !== false && web_path !== nil) {
          return self._partition_path_web
          } else {
          return self._partition_path_sys
        }; return nil; })())['opal$[]='](path, [path_segments, root, posix_path]);
      };

      def.opal$join_path = function(segments, root) {
        var self = this;
        if (root == null) {
          root = nil
        }
        if (root !== false && root !== nil) {
          return "" + (root) + (segments['opal$*'](opal$scope.SLASH))
          } else {
          return segments['opal$*'](opal$scope.SLASH)
        };
      };

      def.opal$system_path = function(target, start, jail, opts) {
        var opal$a, opal$b, opal$c, TMP_1, self = this, recover = nil, target_segments = nil, target_root = nil, _ = nil, resolved_target = nil, jail_segments = nil, jail_root = nil, start_segments = nil, start_root = nil, resolved_segments = nil, warned = nil;
        if (jail == null) {
          jail = nil
        }
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        recover = opts.opal$fetch("recover", true);
        if (jail !== false && jail !== nil) {
          if ((opal$a = self['opal$is_root?'](jail)) === false || opal$a === nil) {
            self.opal$raise(((opal$a = opal$opal.Object._scope.SecurityError) == null ? opal$opal.cm('SecurityError') : opal$a), "Jail is not an absolute path: " + (jail))};
          jail = self.opal$posixfy(jail);};
        if ((opal$a = target['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          target_segments = []
          } else {
          opal$a = opal$opal.to_ary(self.opal$partition_path(target)), target_segments = (opal$a[0] == null ? nil : opal$a[0]), target_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2])
        };
        if ((opal$a = target_segments['opal$empty?']()) !== false && opal$a !== nil) {
          if ((opal$a = start['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
            return (function() {if (jail !== false && jail !== nil) {
              return jail
              } else {
              return self.working_dir
            }; return nil; })()
          } else if ((opal$a = self['opal$is_root?'](start)) !== false && opal$a !== nil) {
            if ((opal$a = jail) === false || opal$a === nil) {
              return self.opal$expand_path(start)}
            } else {
            return self.opal$system_path(start, jail, jail)
          }};
        if ((opal$a = ((opal$b = target_root !== false && target_root !== nil) ? (opal$c = target_root['opal$=='](opal$scope.DOT_SLASH), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          resolved_target = self.opal$join_path(target_segments, target_root);
          if ((opal$a = (((opal$b = (opal$c = jail, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : (resolved_target['opal$start_with?'](jail)))) !== false && opal$a !== nil) {
            return resolved_target};};
        if ((opal$a = start['opal$nil_or_empty?']()) !== false && opal$a !== nil) {
          start = (function() {if (jail !== false && jail !== nil) {
            return jail
            } else {
            return self.working_dir
          }; return nil; })()
        } else if ((opal$a = self['opal$is_root?'](start)) !== false && opal$a !== nil) {
          start = self.opal$posixfy(start)
          } else {
          start = self.opal$system_path(start, jail, jail)
        };
        if (jail['opal$=='](start)) {
          opal$a = opal$opal.to_ary(self.opal$partition_path(jail)), jail_segments = (opal$a[0] == null ? nil : opal$a[0]), jail_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
          start_segments = jail_segments.opal$dup();
        } else if (jail !== false && jail !== nil) {
          if ((opal$a = start['opal$start_with?'](jail)) === false || opal$a === nil) {
            self.opal$raise(((opal$a = opal$opal.Object._scope.SecurityError) == null ? opal$opal.cm('SecurityError') : opal$a), "" + ((((opal$a = opts['opal$[]']("target_name")) !== false && opal$a !== nil) ? opal$a : "Start path")) + " " + (start) + " is outside of jail: " + (jail) + " (disallowed in safe mode)")};
          opal$a = opal$opal.to_ary(self.opal$partition_path(start)), start_segments = (opal$a[0] == null ? nil : opal$a[0]), start_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
          opal$a = opal$opal.to_ary(self.opal$partition_path(jail)), jail_segments = (opal$a[0] == null ? nil : opal$a[0]), jail_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
          } else {
          opal$a = opal$opal.to_ary(self.opal$partition_path(start)), start_segments = (opal$a[0] == null ? nil : opal$a[0]), start_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
          jail_root = start_root;
        };
        resolved_segments = start_segments.opal$dup();
        warned = false;
        (opal$a = (opal$b = target_segments).opal$each, opal$a._p = (TMP_1 = function(segment){var self = TMP_1._s || this, opal$a, opal$b;if (segment == null) segment = nil;
        if (segment['opal$=='](opal$scope.DOT_DOT)) {
            if (jail !== false && jail !== nil) {
              if (resolved_segments.opal$length()['opal$>'](jail_segments.opal$length())) {
                return resolved_segments.opal$pop()
              } else if ((opal$a = (opal$b = recover, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                return self.opal$raise(((opal$a = opal$opal.Object._scope.SecurityError) == null ? opal$opal.cm('SecurityError') : opal$a), "" + ((((opal$a = opts['opal$[]']("target_name")) !== false && opal$a !== nil) ? opal$a : "path")) + " " + (target) + " refers to location outside jail: " + (jail) + " (disallowed in safe mode)")
              } else if ((opal$a = (opal$b = warned, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                self.opal$warn("asciidoctor: WARNING: " + ((((opal$a = opts['opal$[]']("target_name")) !== false && opal$a !== nil) ? opal$a : "path")) + " has illegal reference to ancestor of jail, auto-recovering");
                return warned = true;
                } else {
                return nil
              }
              } else {
              return resolved_segments.opal$pop()
            }
            } else {
            return resolved_segments.opal$push(segment)
          }}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
        return self.opal$join_path(resolved_segments, jail_root);
      };

      def.opal$web_path = function(target, start) {
        var opal$a, opal$b, TMP_2, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, _ = nil, resolved_segments = nil;
        if (start == null) {
          start = nil
        }
        target = self.opal$posixfy(target);
        start = self.opal$posixfy(start);
        uri_prefix = nil;
        if ((opal$a = (((opal$b = start['opal$nil_or_empty?']()) !== false && opal$b !== nil) ? opal$b : (self['opal$is_web_root?'](target)))) === false || opal$a === nil) {
          target = "" + (start) + (opal$scope.SLASH) + (target);
          if ((opal$a = (opal$b = (target['opal$include?'](":")), opal$b !== false && opal$b !== nil ?opal$scope.UriSniffRx['opal$=~'](target) : opal$b)) !== false && opal$a !== nil) {
            uri_prefix = opal$gvars["~"]['opal$[]'](0);
            target = target['opal$[]'](opal$range(uri_prefix.opal$length(), -1, false));};};
        opal$a = opal$opal.to_ary(self.opal$partition_path(target, true)), target_segments = (opal$a[0] == null ? nil : opal$a[0]), target_root = (opal$a[1] == null ? nil : opal$a[1]), _ = (opal$a[2] == null ? nil : opal$a[2]);
        resolved_segments = [];
        (opal$a = (opal$b = target_segments).opal$each, opal$a._p = (TMP_2 = function(segment){var self = TMP_2._s || this, opal$a, opal$b, opal$c;if (segment == null) segment = nil;
        if (segment['opal$=='](opal$scope.DOT_DOT)) {
            if ((opal$a = resolved_segments['opal$empty?']()) !== false && opal$a !== nil) {
              if ((opal$a = ((opal$b = target_root !== false && target_root !== nil) ? (opal$c = target_root['opal$=='](opal$scope.DOT_SLASH), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
                return nil
                } else {
                return resolved_segments['opal$<<'](segment)
              }
            } else if (resolved_segments['opal$[]'](-1)['opal$=='](opal$scope.DOT_DOT)) {
              return resolved_segments['opal$<<'](segment)
              } else {
              return resolved_segments.opal$pop()
            }
            } else {
            return resolved_segments['opal$<<'](segment)
          }}, TMP_2._s = self, TMP_2), opal$a).call(opal$b);
        if (uri_prefix !== false && uri_prefix !== nil) {
          return "" + (uri_prefix) + (self.opal$join_path(resolved_segments, target_root))
          } else {
          return self.opal$join_path(resolved_segments, target_root)
        };
      };

      return (def.opal$relative_path = function(filename, base_directory) {
        var opal$a, opal$b, self = this, offset = nil;
        if ((opal$a = (opal$b = (self['opal$is_root?'](filename)), opal$b !== false && opal$b !== nil ?(self['opal$is_root?'](base_directory)) : opal$b)) !== false && opal$a !== nil) {
          offset = base_directory.opal$chomp(self.file_separator).opal$length()['opal$+'](1);
          return filename['opal$[]'](opal$range(offset, -1, false));
          } else {
          return filename
        };
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Reader(){};
      var self = opal$Reader = opal$klass(opal$base, opal$super, 'Reader', opal$Reader);

      var def = opal$Reader._proto, opal$scope = opal$Reader._scope, TMP_4;
      def.file = def.dir = def.lines = def.process_lines = def.look_ahead = def.eof = def.unescape_next_line = def.lineno = def.path = def.source_lines = nil;
      (function(opal$base, opal$super) {
        function opal$Cursor(){};
        var self = opal$Cursor = opal$klass(opal$base, opal$super, 'Cursor', opal$Cursor);

        var def = opal$Cursor._proto, opal$scope = opal$Cursor._scope;
        self.opal$attr_accessor("file");

        self.opal$attr_accessor("dir");

        self.opal$attr_accessor("path");

        self.opal$attr_accessor("lineno");

        def.opal$initialize = function(file, dir, path, lineno) {
          var self = this;
          if (dir == null) {
            dir = nil
          }
          if (path == null) {
            path = nil
          }
          if (lineno == null) {
            lineno = nil
          }
          self.file = file;
          self.dir = dir;
          self.path = path;
          return self.lineno = lineno;
        };

        def.opal$line_info = function() {
          var self = this;
          return "" + (self.opal$path()) + ": line " + (self.opal$lineno());
        };

        return opal$opal.defn(self, 'opal$to_s', def.opal$line_info);
      })(self, null);

      self.opal$attr_reader("file");

      self.opal$attr_reader("dir");

      self.opal$attr_reader("path");

      self.opal$attr_reader("lineno");

      self.opal$attr_reader("source_lines");

      self.opal$attr_accessor("process_lines");

      def.opal$initialize = function(data, cursor, opts) {
        var opal$a, opal$b, self = this;
        if (data == null) {
          data = nil
        }
        if (cursor == null) {
          cursor = nil
        }
        if (opts == null) {
          opts = opal$hash2(["normalize"], {"normalize": false})
        }
        if ((opal$a = (opal$b = cursor, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          self.file = self.dir = nil;
          self.path = "<stdin>";
          self.lineno = 1;
        } else if ((opal$a = cursor['opal$is_a?'](((opal$b = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$b))) !== false && opal$a !== nil) {
          self.file = cursor;
          self.dir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(self.file);
          self.path = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$basename(self.file);
          self.lineno = 1;
          } else {
          self.file = cursor.opal$file();
          self.dir = cursor.opal$dir();
          self.path = (((opal$a = cursor.opal$path()) !== false && opal$a !== nil) ? opal$a : "<stdin>");
          if ((opal$a = self.file) !== false && opal$a !== nil) {
            if ((opal$a = self.dir) === false || opal$a === nil) {
              self.dir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(self.file);
              if (self.dir['opal$=='](".")) {
                self.dir = nil};};
            if ((opal$a = cursor.opal$path()) === false || opal$a === nil) {
              self.path = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$basename(self.file)};};
          self.lineno = (((opal$a = cursor.opal$lineno()) !== false && opal$a !== nil) ? opal$a : 1);
        };
        self.lines = (function() {if (data !== false && data !== nil) {
          return (self.opal$prepare_lines(data, opts))
          } else {
          return []
        }; return nil; })();
        self.source_lines = self.lines.opal$dup();
        self.eof = self.lines['opal$empty?']();
        self.look_ahead = 0;
        self.process_lines = true;
        return self.unescape_next_line = false;
      };

      def.opal$prepare_lines = function(data, opts) {
        var opal$a, opal$b, self = this;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = data['opal$is_a?'](((opal$b = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$b))) !== false && opal$a !== nil) {
          if ((opal$a = opts['opal$[]']("normalize")) !== false && opal$a !== nil) {
            return opal$scope.Helpers.opal$normalize_lines_from_string(data)
            } else {
            return data.opal$split(opal$scope.EOL)
          }
        } else if ((opal$a = opts['opal$[]']("normalize")) !== false && opal$a !== nil) {
          return opal$scope.Helpers.opal$normalize_lines_array(data)
          } else {
          return data.opal$dup()
        };
      };

      def.opal$process_line = function(line) {
        var opal$a, self = this;
        if ((opal$a = self.process_lines) !== false && opal$a !== nil) {
          self.look_ahead = self.look_ahead['opal$+'](1)};
        return line;
      };

      def['opal$has_more_lines?'] = function() {
        var opal$a, opal$b, self = this;
        return (opal$a = ((((opal$b = self.eof) !== false && opal$b !== nil) ? opal$b : (self.eof = self.opal$peek_line()['opal$nil?']()))), (opal$a === nil || opal$a === false));
      };

      def['opal$next_line_empty?'] = function() {
        var self = this;
        return self.opal$peek_line()['opal$nil_or_empty?']();
      };

      def.opal$peek_line = function(direct) {
        var opal$a, opal$b, self = this, line = nil;
        if (direct == null) {
          direct = false
        }
        if ((opal$a = (((opal$b = direct) !== false && opal$b !== nil) ? opal$b : self.look_ahead['opal$>'](0))) !== false && opal$a !== nil) {
          if ((opal$a = self.unescape_next_line) !== false && opal$a !== nil) {
            return self.lines['opal$[]'](0)['opal$[]'](opal$range(1, -1, false))
            } else {
            return self.lines['opal$[]'](0)
          }
        } else if ((opal$a = (((opal$b = self.eof) !== false && opal$b !== nil) ? opal$b : self.lines['opal$empty?']())) !== false && opal$a !== nil) {
          self.eof = true;
          self.look_ahead = 0;
          return nil;
        } else if ((opal$a = (opal$b = (line = self.opal$process_line(self.lines['opal$[]'](0))), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return self.opal$peek_line()
          } else {
          return line
        };
      };

      def.opal$peek_lines = function(num, direct) {
        var opal$a, opal$b, TMP_1, opal$c, TMP_2, self = this, old_look_ahead = nil, result = nil;
        if (num == null) {
          num = 1
        }
        if (direct == null) {
          direct = true
        }
        old_look_ahead = self.look_ahead;
        result = [];
        (opal$a = (opal$b = num).opal$times, opal$a._p = (TMP_1 = function(){var self = TMP_1._s || this, opal$a, line = nil;
        if ((opal$a = (line = self.opal$read_line(direct))) !== false && opal$a !== nil) {
            return result['opal$<<'](line)
            } else {
            return (opal$breaker.opal$v = nil, opal$breaker)
          }}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
        if ((opal$a = result['opal$empty?']()) === false || opal$a === nil) {
          (opal$a = (opal$c = result).opal$reverse_each, opal$a._p = (TMP_2 = function(line){var self = TMP_2._s || this;if (line == null) line = nil;
          return self.opal$unshift(line)}, TMP_2._s = self, TMP_2), opal$a).call(opal$c);
          if (direct !== false && direct !== nil) {
            self.look_ahead = old_look_ahead};};
        return result;
      };

      def.opal$read_line = function(direct) {
        var opal$a, opal$b, opal$c, self = this;
        if (direct == null) {
          direct = false
        }
        if ((opal$a = (((opal$b = (((opal$c = direct) !== false && opal$c !== nil) ? opal$c : self.look_ahead['opal$>'](0))) !== false && opal$b !== nil) ? opal$b : self['opal$has_more_lines?']())) !== false && opal$a !== nil) {
          return self.opal$shift()
          } else {
          return nil
        };
      };

      def.opal$read_lines = function() {
        var opal$a, opal$b, self = this, lines = nil;
        lines = [];
        while ((opal$b = self['opal$has_more_lines?']()) !== false && opal$b !== nil) {
        lines['opal$<<'](self.opal$shift())};
        return lines;
      };

      opal$opal.defn(self, 'opal$readlines', def.opal$read_lines);

      def.opal$read = function() {
        var self = this;
        return self.opal$read_lines()['opal$*'](opal$scope.EOL);
      };

      def.opal$advance = function(direct) {
        var opal$a, opal$b, self = this;
        if (direct == null) {
          direct = true
        }
        return (opal$a = (opal$b = self.opal$read_line(direct), (opal$b === nil || opal$b === false)), (opal$a === nil || opal$a === false));
      };

      def.opal$unshift_line = function(line_to_restore) {
        var self = this;
        self.opal$unshift(line_to_restore);
        return nil;
      };

      opal$opal.defn(self, 'opal$restore_line', def.opal$unshift_line);

      def.opal$unshift_lines = function(lines_to_restore) {
        var opal$a, opal$b, TMP_3, self = this;
        (opal$a = (opal$b = lines_to_restore).opal$reverse_each, opal$a._p = (TMP_3 = function(line){var self = TMP_3._s || this;if (line == null) line = nil;
        return self.opal$unshift(line)}, TMP_3._s = self, TMP_3), opal$a).call(opal$b);
        return nil;
      };

      opal$opal.defn(self, 'opal$restore_lines', def.opal$unshift_lines);

      def.opal$replace_line = function(replacement) {
        var self = this;
        self.opal$advance();
        self.opal$unshift(replacement);
        return nil;
      };

      def.opal$skip_blank_lines = function() {
        var opal$a, opal$b, self = this, num_skipped = nil, next_line = nil;
        if ((opal$a = self['opal$eof?']()) !== false && opal$a !== nil) {
          return 0};
        num_skipped = 0;
        while ((opal$b = (next_line = self.opal$peek_line())) !== false && opal$b !== nil) {
        if ((opal$b = next_line['opal$empty?']()) !== false && opal$b !== nil) {
          self.opal$advance();
          num_skipped = num_skipped['opal$+'](1);
          } else {
          return num_skipped
        }};
        return num_skipped;
      };

      def.opal$skip_comment_lines = function(opts) {
        var opal$a, opal$b, opal$c, opal$d, self = this, comment_lines = nil, include_blank_lines = nil, next_line = nil, commentish = nil, match = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        if ((opal$a = self['opal$eof?']()) !== false && opal$a !== nil) {
          return []};
        comment_lines = [];
        include_blank_lines = opts['opal$[]']("include_blank_lines");
        while ((opal$b = (next_line = self.opal$peek_line())) !== false && opal$b !== nil) {
        if ((opal$b = ((opal$c = include_blank_lines !== false && include_blank_lines !== nil) ? next_line['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          comment_lines['opal$<<'](self.opal$shift())
        } else if ((opal$b = (opal$c = (commentish = next_line['opal$start_with?']("//")), opal$c !== false && opal$c !== nil ?(match = opal$scope.CommentBlockRx.opal$match(next_line)) : opal$c)) !== false && opal$b !== nil) {
          comment_lines['opal$<<'](self.opal$shift());
          (opal$b = comment_lines).opal$push.apply(opal$b, [].concat((self.opal$read_lines_until(opal$hash2(["terminator", "read_last_line", "skip_processing"], {"terminator": match['opal$[]'](0), "read_last_line": true, "skip_processing": true})))));
        } else if ((opal$c = ((opal$d = commentish !== false && commentish !== nil) ? opal$scope.CommentLineRx['opal$=~'](next_line) : opal$d)) !== false && opal$c !== nil) {
          comment_lines['opal$<<'](self.opal$shift())
          } else {
          break;
        }};
        return comment_lines;
      };

      def.opal$skip_line_comments = function() {
        var opal$a, opal$b, self = this, comment_lines = nil, next_line = nil;
        if ((opal$a = self['opal$eof?']()) !== false && opal$a !== nil) {
          return []};
        comment_lines = [];
        while ((opal$b = (next_line = self.opal$peek_line())) !== false && opal$b !== nil) {
        if ((opal$b = opal$scope.CommentLineRx['opal$=~'](next_line)) !== false && opal$b !== nil) {
          comment_lines['opal$<<'](self.opal$shift())
          } else {
          break;
        }};
        return comment_lines;
      };

      def.opal$terminate = function() {
        var self = this;
        self.lineno = self.lineno['opal$+'](self.lines.opal$size());
        self.lines.opal$clear();
        self.eof = true;
        self.look_ahead = 0;
        return nil;
      };

      def['opal$eof?'] = function() {
        var opal$a, self = this;
        return (opal$a = self['opal$has_more_lines?'](), (opal$a === nil || opal$a === false));
      };

      opal$opal.defn(self, 'opal$empty?', def['opal$eof?']);

      def.opal$read_lines_until = TMP_4 = function(options) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, self = this, opal$iter = TMP_4._p, opal$yield = opal$iter || nil, result = nil, restore_process_lines = nil, terminator = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_line_comments = nil, line_read = nil, line_restored = nil, complete = nil, line = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        TMP_4._p = null;
        result = [];
        if ((opal$a = options['opal$[]']("skip_first_line")) !== false && opal$a !== nil) {
          self.opal$advance()};
        if ((opal$a = (opal$b = self.process_lines, opal$b !== false && opal$b !== nil ?options['opal$[]']("skip_processing") : opal$b)) !== false && opal$a !== nil) {
          self.process_lines = false;
          restore_process_lines = true;
          } else {
          restore_process_lines = false
        };
        if ((opal$a = (terminator = options['opal$[]']("terminator"))) !== false && opal$a !== nil) {
          break_on_blank_lines = false;
          break_on_list_continuation = false;
          } else {
          break_on_blank_lines = options['opal$[]']("break_on_blank_lines");
          break_on_list_continuation = options['opal$[]']("break_on_list_continuation");
        };
        skip_line_comments = options['opal$[]']("skip_line_comments");
        line_read = false;
        line_restored = false;
        complete = false;
        while ((opal$b = (opal$c = (opal$d = complete, (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?(line = self.opal$read_line()) : opal$c)) !== false && opal$b !== nil) {
        complete = (function() {while ((opal$c = true) !== false && opal$c !== nil) {
        if ((opal$c = ((opal$d = terminator !== false && terminator !== nil) ? line['opal$=='](terminator) : opal$d)) !== false && opal$c !== nil) {
          return true};
        if ((opal$c = ((opal$d = break_on_blank_lines !== false && break_on_blank_lines !== nil) ? line['opal$empty?']() : opal$d)) !== false && opal$c !== nil) {
          return true};
        if ((opal$c = (opal$d = ((opal$e = break_on_list_continuation !== false && break_on_list_continuation !== nil) ? line_read : opal$e), opal$d !== false && opal$d !== nil ?line['opal$=='](opal$scope.LIST_CONTINUATION) : opal$d)) !== false && opal$c !== nil) {
          options['opal$[]=']("preserve_last_line", true);
          return true;};
        if ((opal$c = ((opal$d = (opal$yield !== nil)) ? ((((opal$e = opal$opal.opal$yield1(opal$yield, line)) === opal$breaker) ? opal$breaker.opal$v : opal$e)) : opal$d)) !== false && opal$c !== nil) {
          return true};
        return false;}; return nil; })();
        if (complete !== false && complete !== nil) {
          if ((opal$b = options['opal$[]']("read_last_line")) !== false && opal$b !== nil) {
            result['opal$<<'](line);
            line_read = true;};
          if ((opal$b = options['opal$[]']("preserve_last_line")) !== false && opal$b !== nil) {
            self.opal$restore_line(line);
            line_restored = true;};
        } else if ((opal$b = (opal$c = ((opal$d = skip_line_comments !== false && skip_line_comments !== nil) ? line['opal$start_with?']("//") : opal$d), opal$c !== false && opal$c !== nil ?opal$scope.CommentLineRx['opal$=~'](line) : opal$c)) === false || opal$b === nil) {
          result['opal$<<'](line);
          line_read = true;};};
        if (restore_process_lines !== false && restore_process_lines !== nil) {
          self.process_lines = true;
          if ((opal$a = ((opal$b = line_restored !== false && line_restored !== nil) ? (opal$c = terminator, (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
            self.look_ahead = self.look_ahead['opal$-'](1)};};
        return result;
      };

      def.opal$shift = function() {
        var opal$a, self = this;
        self.lineno = self.lineno['opal$+'](1);
        if ((opal$a = self.look_ahead['opal$=='](0)) === false || opal$a === nil) {
          self.look_ahead = self.look_ahead['opal$-'](1)};
        return self.lines.opal$shift();
      };

      def.opal$unshift = function(line) {
        var self = this;
        self.lineno = self.lineno['opal$-'](1);
        self.look_ahead = self.look_ahead['opal$+'](1);
        self.eof = false;
        return self.lines.opal$unshift(line);
      };

      def.opal$cursor = function() {
        var self = this;
        return opal$scope.Cursor.opal$new(self.file, self.dir, self.path, self.lineno);
      };

      def.opal$line_info = function() {
        var self = this;
        return "" + (self.path) + ": line " + (self.lineno);
      };

      opal$opal.defn(self, 'opal$next_line_info', def.opal$line_info);

      def.opal$prev_line_info = function() {
        var self = this;
        return "" + (self.path) + ": line " + (self.lineno['opal$-'](1));
      };

      def.opal$lines = function() {
        var self = this;
        return self.lines.opal$dup();
      };

      def.opal$string = function() {
        var self = this;
        return self.lines['opal$*'](opal$scope.EOL);
      };

      def.opal$source = function() {
        var self = this;
        return self.source_lines['opal$*'](opal$scope.EOL);
      };

      return (def.opal$to_s = function() {
        var self = this;
        return self.opal$line_info();
      }, nil);
    })(self, null);

    (function(opal$base, opal$super) {
      function opal$PreprocessorReader(){};
      var self = opal$PreprocessorReader = opal$klass(opal$base, opal$super, 'PreprocessorReader', opal$PreprocessorReader);

      var def = opal$PreprocessorReader._proto, opal$scope = opal$PreprocessorReader._scope, TMP_5, TMP_6, TMP_7, TMP_20;
      def.document = def.lineno = def.process_lines = def.look_ahead = def.skipping = def.include_stack = def.conditional_stack = def.path = def.include_processor_extensions = def.maxdepth = def.dir = def.lines = def.file = def.includes = def.unescape_next_line = nil;
      self.opal$attr_reader("include_stack");

      self.opal$attr_reader("includes");

      def.opal$initialize = TMP_5 = function(document, data, cursor) {
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_5._p, opal$yield = opal$iter || nil, include_depth_default = nil;
        if (data == null) {
          data = nil
        }
        if (cursor == null) {
          cursor = nil
        }
        TMP_5._p = null;
        self.document = document;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_5, null).apply(self, [data, cursor, opal$hash2(["normalize"], {"normalize": true})]);
        include_depth_default = document.opal$attributes().opal$fetch("max-include-depth", 64).opal$to_i();
        if (include_depth_default['opal$<'](0)) {
          include_depth_default = 0};
        self.maxdepth = opal$hash2(["abs", "rel"], {"abs": include_depth_default, "rel": include_depth_default});
        self.include_stack = [];
        self.includes = ((opal$a = "includes", opal$b = document.opal$references(), (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, []))));
        self.skipping = false;
        self.conditional_stack = [];
        return self.include_processor_extensions = nil;
      };

      def.opal$prepare_lines = TMP_6 = function(data, opts) {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_6._p, opal$yield = opal$iter || nil, result = nil, front_matter = nil, first = nil, last = nil, indent = nil;
        if (opts == null) {
          opts = opal$hash2([], {})
        }
        TMP_6._p = null;
        result = opal$opal.find_super_dispatcher(self, 'prepare_lines', TMP_6, opal$iter).apply(self, opal$zuper);
        if ((opal$a = (opal$b = self.document, opal$b !== false && opal$b !== nil ?(self.document.opal$attributes()['opal$has_key?']("skip-front-matter")) : opal$b)) !== false && opal$a !== nil) {
          if ((opal$a = (front_matter = self['opal$skip_front_matter!'](result))) !== false && opal$a !== nil) {
            self.document.opal$attributes()['opal$[]=']("front-matter", front_matter['opal$*'](opal$scope.EOL))}};
        if ((opal$a = opts.opal$fetch("condense", true)) !== false && opal$a !== nil) {
          while ((opal$b = (opal$c = (first = result['opal$[]'](0)), opal$c !== false && opal$c !== nil ?first['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          (opal$b = result.opal$shift(), opal$b !== false && opal$b !== nil ?self.lineno = self.lineno['opal$+'](1) : opal$b)};
          while ((opal$b = (opal$c = (last = result['opal$[]'](-1)), opal$c !== false && opal$c !== nil ?last['opal$empty?']() : opal$c)) !== false && opal$b !== nil) {
          result.opal$pop()};};
        if ((opal$a = (indent = opts.opal$fetch("indent", nil))) !== false && opal$a !== nil) {
          opal$scope.Parser['opal$reset_block_indent!'](result, indent.opal$to_i())};
        return result;
      };

      def.opal$process_line = function(line) {
        var opal$a, opal$b, opal$c, opal$d, self = this, match = nil, escaped = nil;
        if ((opal$a = self.process_lines) === false || opal$a === nil) {
          return line};
        if ((opal$a = line['opal$empty?']()) !== false && opal$a !== nil) {
          self.look_ahead = self.look_ahead['opal$+'](1);
          return "";};
        if ((opal$a = (opal$b = (opal$c = line['opal$end_with?']("]"), opal$c !== false && opal$c !== nil ?(opal$d = line['opal$start_with?']("["), (opal$d === nil || opal$d === false)) : opal$c), opal$b !== false && opal$b !== nil ?line['opal$include?']("::") : opal$b)) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = line['opal$include?']("if"), opal$b !== false && opal$b !== nil ?(match = opal$scope.ConditionalDirectiveRx.opal$match(line)) : opal$b)) !== false && opal$a !== nil) {
            if ((opal$a = line['opal$start_with?']("\\")) !== false && opal$a !== nil) {
              self.unescape_next_line = true;
              self.look_ahead = self.look_ahead['opal$+'](1);
              return line['opal$[]'](opal$range(1, -1, false));
            } else if ((opal$a = (opal$b = self).opal$preprocess_conditional_inclusion.apply(opal$b, [].concat(match.opal$captures()))) !== false && opal$a !== nil) {
              self.opal$advance();
              return nil;
              } else {
              self.look_ahead = self.look_ahead['opal$+'](1);
              return line;
            }
          } else if ((opal$a = self.skipping) !== false && opal$a !== nil) {
            self.opal$advance();
            return nil;
          } else if ((opal$a = (opal$c = ((((opal$d = (escaped = line['opal$start_with?']("\\include::"))) !== false && opal$d !== nil) ? opal$d : line['opal$start_with?']("include::"))), opal$c !== false && opal$c !== nil ?(match = opal$scope.IncludeDirectiveRx.opal$match(line)) : opal$c)) !== false && opal$a !== nil) {
            if (escaped !== false && escaped !== nil) {
              self.unescape_next_line = true;
              self.look_ahead = self.look_ahead['opal$+'](1);
              return line['opal$[]'](opal$range(1, -1, false));
            } else if ((opal$a = self.opal$preprocess_include(match['opal$[]'](1), match['opal$[]'](2).opal$strip())) !== false && opal$a !== nil) {
              return nil
              } else {
              self.look_ahead = self.look_ahead['opal$+'](1);
              return line;
            }
            } else {
            self.look_ahead = self.look_ahead['opal$+'](1);
            return line;
          }
        } else if ((opal$a = self.skipping) !== false && opal$a !== nil) {
          self.opal$advance();
          return nil;
          } else {
          self.look_ahead = self.look_ahead['opal$+'](1);
          return line;
        };
      };

      def.opal$peek_line = TMP_7 = function(direct) {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, self = this, opal$iter = TMP_7._p, opal$yield = opal$iter || nil, line = nil;
        if (direct == null) {
          direct = false
        }
        TMP_7._p = null;
        if ((opal$a = (line = opal$opal.find_super_dispatcher(self, 'peek_line', TMP_7, opal$iter).apply(self, opal$zuper))) !== false && opal$a !== nil) {
          return line
        } else if ((opal$a = self.include_stack['opal$empty?']()) !== false && opal$a !== nil) {
          return nil
          } else {
          self.opal$pop_include();
          return self.opal$peek_line(direct);
        };
      };

      def.opal$preprocess_conditional_inclusion = function(directive, target, delimiter, text) {
        var opal$a, opal$b, opal$c, opal$d, TMP_8, TMP_9, opal$e, TMP_10, TMP_11, opal$f, opal$g, self = this, stack_size = nil, pair = nil, skip = nil, opal$case = nil, expr_match = nil, lhs = nil, op = nil, rhs = nil, conditional_line = nil;
        if ((opal$a = (((opal$b = ((opal$c = ((((opal$d = directive['opal$==']("ifdef")) !== false && opal$d !== nil) ? opal$d : directive['opal$==']("ifndef"))), opal$c !== false && opal$c !== nil ?target['opal$empty?']() : opal$c))) !== false && opal$b !== nil) ? opal$b : (((opal$c = directive['opal$==']("endif")) ? text : opal$c)))) !== false && opal$a !== nil) {
          return false};
        target = target.opal$downcase();
        if (directive['opal$==']("endif")) {
          stack_size = self.conditional_stack.opal$size();
          if (stack_size['opal$>'](0)) {
            pair = self.conditional_stack['opal$[]'](-1);
            if ((opal$a = (((opal$b = target['opal$empty?']()) !== false && opal$b !== nil) ? opal$b : target['opal$=='](pair['opal$[]']("target")))) !== false && opal$a !== nil) {
              self.conditional_stack.opal$pop();
              self.skipping = (function() {if ((opal$a = self.conditional_stack['opal$empty?']()) !== false && opal$a !== nil) {
                return false
                } else {
                return self.conditional_stack['opal$[]'](-1)['opal$[]']("skipping")
              }; return nil; })();
              } else {
              self.opal$warn("asciidoctor: ERROR: " + (self.opal$line_info()) + ": mismatched macro: endif::" + (target) + "[], expected endif::" + (pair['opal$[]']("target")) + "[]")
            };
            } else {
            self.opal$warn("asciidoctor: ERROR: " + (self.opal$line_info()) + ": unmatched macro: endif::" + (target) + "[]")
          };
          return true;};
        skip = false;
        if ((opal$a = self.skipping) === false || opal$a === nil) {
          opal$case = directive;if ("ifdef"['opal$==='](opal$case)) {opal$case = delimiter;if (nil['opal$==='](opal$case)) {skip = (opal$a = self.document.opal$attributes()['opal$has_key?'](target), (opal$a === nil || opal$a === false))}else if (","['opal$==='](opal$case)) {skip = (opal$a = (opal$b = (opal$c = target.opal$split(",")).opal$detect, opal$b._p = (TMP_8 = function(name){var self = TMP_8._s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.opal$attributes()['opal$has_key?'](name)}, TMP_8._s = self, TMP_8), opal$b).call(opal$c), (opal$a === nil || opal$a === false))}else if ("+"['opal$==='](opal$case)) {skip = (opal$a = (opal$b = target.opal$split("+")).opal$detect, opal$a._p = (TMP_9 = function(name){var self = TMP_9._s || this, opal$a;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return (opal$a = self.document.opal$attributes()['opal$has_key?'](name), (opal$a === nil || opal$a === false))}, TMP_9._s = self, TMP_9), opal$a).call(opal$b)}}else if ("ifndef"['opal$==='](opal$case)) {opal$case = delimiter;if (nil['opal$==='](opal$case)) {skip = self.document.opal$attributes()['opal$has_key?'](target)}else if (","['opal$==='](opal$case)) {skip = (opal$a = (opal$d = (opal$e = target.opal$split(",")).opal$detect, opal$d._p = (TMP_10 = function(name){var self = TMP_10._s || this, opal$a;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return (opal$a = self.document.opal$attributes()['opal$has_key?'](name), (opal$a === nil || opal$a === false))}, TMP_10._s = self, TMP_10), opal$d).call(opal$e), (opal$a === nil || opal$a === false))}else if ("+"['opal$==='](opal$case)) {skip = (opal$a = (opal$d = target.opal$split("+")).opal$detect, opal$a._p = (TMP_11 = function(name){var self = TMP_11._s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.opal$attributes()['opal$has_key?'](name)}, TMP_11._s = self, TMP_11), opal$a).call(opal$d)}}else if ("ifeval"['opal$==='](opal$case)) {if ((opal$a = (((opal$f = (opal$g = target['opal$empty?'](), (opal$g === nil || opal$g === false))) !== false && opal$f !== nil) ? opal$f : (opal$g = (expr_match = opal$scope.EvalExpressionRx.opal$match(text.opal$strip())), (opal$g === nil || opal$g === false)))) !== false && opal$a !== nil) {
            return false};
          lhs = self.opal$resolve_expr_val(expr_match['opal$[]'](1));
          op = expr_match['opal$[]'](2);
          rhs = self.opal$resolve_expr_val(expr_match['opal$[]'](3));
          skip = (opal$a = (lhs.opal$send(op.opal$to_sym(), rhs)), (opal$a === nil || opal$a === false));}};
        if ((opal$a = (((opal$f = directive['opal$==']("ifeval")) !== false && opal$f !== nil) ? opal$f : (opal$g = text, (opal$g === nil || opal$g === false)))) !== false && opal$a !== nil) {
          if (skip !== false && skip !== nil) {
            self.skipping = true};
          self.conditional_stack['opal$<<'](opal$hash2(["target", "skip", "skipping"], {"target": target, "skip": skip, "skipping": self.skipping}));
        } else if ((opal$a = (((opal$f = self.skipping) !== false && opal$f !== nil) ? opal$f : skip)) === false || opal$a === nil) {
          conditional_line = self.opal$peek_line(true);
          self.opal$replace_line(text.opal$rstrip());
          self.opal$unshift(conditional_line);
          return true;};
        return true;
      };

      def.opal$preprocess_include = function(raw_target, raw_attributes) {
        var opal$a, opal$b, opal$c, opal$d, TMP_12, TMP_13, TMP_14, opal$e, TMP_16, opal$f, TMP_19, self = this, target = nil, extension = nil, abs_maxdepth = nil, target_type = nil, include_file = nil, path = nil, inc_lines = nil, tags = nil, attributes = nil, selected = nil, inc_line_offset = nil, inc_lineno = nil, active_tag = nil, tags_found = nil, missing_tags = nil;
        if ((opal$a = ((target = self.document.opal$sub_attributes(raw_target, opal$hash2(["attribute_missing"], {"attribute_missing": "drop-line"}))))['opal$empty?']()) !== false && opal$a !== nil) {
          if (self.document.opal$attributes().opal$fetch("attribute-missing", opal$scope.Compliance.opal$attribute_missing())['opal$==']("skip")) {
            self.opal$replace_line("Unresolved directive in " + (self.path) + " - include::" + (raw_target) + "[" + (raw_attributes) + "]");
            return true;
            } else {
            self.opal$advance();
            return true;
          }
        } else if ((opal$a = (opal$b = self['opal$include_processors?'](), opal$b !== false && opal$b !== nil ?(extension = (opal$c = (opal$d = self.include_processor_extensions).opal$find, opal$c._p = (TMP_12 = function(candidate){var self = TMP_12._s || this;if (candidate == null) candidate = nil;
        return candidate.opal$instance()['opal$handles?'](target)}, TMP_12._s = self, TMP_12), opal$c).call(opal$d)) : opal$b)) !== false && opal$a !== nil) {
          self.opal$advance();
          extension.opal$process_method()['opal$[]'](self, target, opal$scope.AttributeList.opal$new(raw_attributes).opal$parse());
          return true;
        } else if (self.document.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SECURE)) {
          self.opal$replace_line("link:" + (target) + "[]");
          return true;
        } else if ((opal$a = ((opal$b = ((abs_maxdepth = self.maxdepth['opal$[]']("abs")))['opal$>'](0)) ? self.include_stack.opal$size()['opal$>='](abs_maxdepth) : opal$b)) !== false && opal$a !== nil) {
          self.opal$warn("asciidoctor: ERROR: " + (self.opal$line_info()) + ": maximum include depth of " + (self.maxdepth['opal$[]']("rel")) + " exceeded");
          return false;
        } else if (abs_maxdepth['opal$>'](0)) {
          if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
            target_type = "file";
            include_file = path = ((function() {if ((opal$a = self.include_stack['opal$empty?']()) !== false && opal$a !== nil) {
              return target
              } else {
              return (opal$scope.File.opal$join(self.dir, target))
            }; return nil; })());
          } else if ((opal$a = (opal$b = target['opal$include?'](":"), opal$b !== false && opal$b !== nil ?opal$scope.UriSniffRx['opal$=~'](target) : opal$b)) !== false && opal$a !== nil) {
            if ((opal$a = self.document.opal$attributes()['opal$has_key?']("allow-uri-read")) === false || opal$a === nil) {
              self.opal$replace_line("link:" + (target) + "[]");
              return true;};
            target_type = "uri";
            include_file = path = target;
            if ((opal$a = self.document.opal$attributes()['opal$has_key?']("cache-uri")) !== false && opal$a !== nil) {
              opal$scope.Helpers.opal$require_library("open-uri/cached", "open-uri-cached")
            } else if ((opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              ((opal$a = opal$opal.Object._scope.OpenURI) == null ? opal$opal.cm('OpenURI') : opal$a)};
            } else {
            target_type = "file";
            include_file = self.document.opal$normalize_system_path(target, self.dir, nil, opal$hash2(["target_name"], {"target_name": "include file"}));
            if ((opal$a = ((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b)['opal$file?'](include_file)) === false || opal$a === nil) {
              self.opal$warn("asciidoctor: WARNING: " + (self.opal$line_info()) + ": include file not found: " + (include_file));
              self.opal$replace_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
              return true;};
            path = opal$scope.PathResolver.opal$new().opal$relative_path(include_file, self.document.opal$base_dir());
          };
          inc_lines = nil;
          tags = nil;
          attributes = opal$hash2([], {});
          if ((opal$a = (opal$b = raw_attributes['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
            attributes = opal$scope.AttributeList.opal$new(raw_attributes).opal$parse();
            if ((opal$a = attributes['opal$has_key?']("lines")) !== false && opal$a !== nil) {
              inc_lines = [];
              (opal$a = (opal$b = attributes['opal$[]']("lines").opal$split(opal$scope.DataDelimiterRx)).opal$each, opal$a._p = (TMP_13 = function(linedef){var self = TMP_13._s || this, opal$a, opal$b, opal$c, from = nil, to = nil;if (linedef == null) linedef = nil;
              if ((opal$a = linedef['opal$include?']("..")) !== false && opal$a !== nil) {
                  opal$a = opal$opal.to_ary((opal$b = (opal$c = linedef.opal$split("..")).opal$map, opal$b._p = "to_i".opal$to_proc(), opal$b).call(opal$c)), from = (opal$a[0] == null ? nil : opal$a[0]), to = (opal$a[1] == null ? nil : opal$a[1]);
                  if (to['opal$=='](-1)) {
                    inc_lines['opal$<<'](from);
                    return inc_lines['opal$<<']((1.0)['opal$/'](0.0));
                    } else {
                    return inc_lines.opal$concat(((opal$a = opal$opal.Object._scope.Range) == null ? opal$opal.cm('Range') : opal$a).opal$new(from, to).opal$to_a())
                  };
                  } else {
                  return inc_lines['opal$<<'](linedef.opal$to_i())
                }}, TMP_13._s = self, TMP_13), opal$a).call(opal$b);
              inc_lines = inc_lines.opal$sort().opal$uniq();
            } else if ((opal$a = attributes['opal$has_key?']("tag")) !== false && opal$a !== nil) {
              tags = [attributes['opal$[]']("tag")].opal$to_set()
            } else if ((opal$a = attributes['opal$has_key?']("tags")) !== false && opal$a !== nil) {
              tags = attributes['opal$[]']("tags").opal$split(opal$scope.DataDelimiterRx).opal$uniq().opal$to_set()};};
          if ((opal$a = (opal$c = inc_lines['opal$nil?'](), (opal$c === nil || opal$c === false))) !== false && opal$a !== nil) {
            if ((opal$a = (opal$c = inc_lines['opal$empty?'](), (opal$c === nil || opal$c === false))) !== false && opal$a !== nil) {
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              try {
              (opal$a = (opal$c = self).opal$open, opal$a._p = (TMP_14 = function(f){var self = TMP_14._s || this, opal$a, opal$b, TMP_15;if (f == null) f = nil;
                return (opal$a = (opal$b = f).opal$each_line, opal$a._p = (TMP_15 = function(l){var self = TMP_15._s || this, opal$a, opal$b, opal$c, take = nil;if (l == null) l = nil;
                  inc_lineno = inc_lineno['opal$+'](1);
                    take = inc_lines['opal$[]'](0);
                    if ((opal$a = (opal$b = take['opal$is_a?'](((opal$c = opal$opal.Object._scope.Float) == null ? opal$opal.cm('Float') : opal$c)), opal$b !== false && opal$b !== nil ?take['opal$infinite?']() : opal$b)) !== false && opal$a !== nil) {
                      selected.opal$push(l);
                      if (inc_line_offset['opal$=='](0)) {
                        return inc_line_offset = inc_lineno
                        } else {
                        return nil
                      };
                      } else {
                      if (f.opal$lineno()['opal$=='](take)) {
                        selected.opal$push(l);
                        if (inc_line_offset['opal$=='](0)) {
                          inc_line_offset = inc_lineno};
                        inc_lines.opal$shift();};
                      if ((opal$a = inc_lines['opal$empty?']()) !== false && opal$a !== nil) {
                        return (opal$breaker.opal$v = nil, opal$breaker)
                        } else {
                        return nil
                      };
                    };}, TMP_15._s = self, TMP_15), opal$a).call(opal$b)}, TMP_14._s = self, TMP_14), opal$a).call(opal$c, include_file, "r")
              } catch (opal$err) {if (true) {
                self.opal$warn("asciidoctor: WARNING: " + (self.opal$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                self.opal$replace_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                return true;
                }else { throw opal$err; }
              };
              self.opal$advance();
              self.opal$push_include(selected, include_file, path, inc_line_offset, attributes);}
          } else if ((opal$a = (opal$e = tags['opal$nil?'](), (opal$e === nil || opal$e === false))) !== false && opal$a !== nil) {
            if ((opal$a = (opal$e = tags['opal$empty?'](), (opal$e === nil || opal$e === false))) !== false && opal$a !== nil) {
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              active_tag = nil;
              tags_found = ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new();
              try {
              (opal$a = (opal$e = self).opal$open, opal$a._p = (TMP_16 = function(f){var self = TMP_16._s || this, opal$a, opal$b, TMP_17;if (f == null) f = nil;
                return (opal$a = (opal$b = f).opal$each_line, opal$a._p = (TMP_17 = function(l){var self = TMP_17._s || this, opal$a, opal$b, TMP_18;if (l == null) l = nil;
                  inc_lineno = inc_lineno['opal$+'](1);
                    if ((opal$a = opal$scope.FORCE_ENCODING) !== false && opal$a !== nil) {
                      l.opal$force_encoding((((opal$a = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$a))._scope.UTF_8)};
                    if ((opal$a = (opal$b = active_tag['opal$nil?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
                      if ((opal$a = l['opal$include?']("end::" + (active_tag) + "[]")) !== false && opal$a !== nil) {
                        return active_tag = nil
                        } else {
                        selected.opal$push(l);
                        if (inc_line_offset['opal$=='](0)) {
                          return inc_line_offset = inc_lineno
                          } else {
                          return nil
                        };
                      }
                      } else {
                      return (opal$a = (opal$b = tags).opal$each, opal$a._p = (TMP_18 = function(tag){var self = TMP_18._s || this, opal$a;if (tag == null) tag = nil;
                      if ((opal$a = l['opal$include?']("tag::" + (tag) + "[]")) !== false && opal$a !== nil) {
                          active_tag = tag;
                          tags_found['opal$<<'](tag);
                          return (opal$breaker.opal$v = nil, opal$breaker);
                          } else {
                          return nil
                        }}, TMP_18._s = self, TMP_18), opal$a).call(opal$b)
                    };}, TMP_17._s = self, TMP_17), opal$a).call(opal$b)}, TMP_16._s = self, TMP_16), opal$a).call(opal$e, include_file, "r")
              } catch (opal$err) {if (true) {
                self.opal$warn("asciidoctor: WARNING: " + (self.opal$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                self.opal$replace_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                return true;
                }else { throw opal$err; }
              };
              if ((opal$a = ((missing_tags = tags.opal$to_a()['opal$-'](tags_found.opal$to_a())))['opal$empty?']()) === false || opal$a === nil) {
                self.opal$warn("asciidoctor: WARNING: " + (self.opal$line_info()) + ": tag" + ((function() {if (missing_tags.opal$size()['opal$>'](1)) {
                  return "s"
                  } else {
                  return nil
                }; return nil; })()) + " '" + (missing_tags['opal$*'](",")) + "' not found in include " + (target_type) + ": " + (include_file))};
              self.opal$advance();
              self.opal$push_include(selected, include_file, path, inc_line_offset, attributes);}
            } else {
            try {
            self.opal$advance();
              self.opal$push_include((opal$a = (opal$f = self).opal$open, opal$a._p = (TMP_19 = function(f){var self = TMP_19._s || this;if (f == null) f = nil;
              return f.opal$read()}, TMP_19._s = self, TMP_19), opal$a).call(opal$f, include_file, "r"), include_file, path, 1, attributes);
            } catch (opal$err) {if (true) {
              self.opal$warn("asciidoctor: WARNING: " + (self.opal$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
              self.opal$replace_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
              return true;
              }else { throw opal$err; }
            }
          };
          return true;
          } else {
          return false
        };
      };

      def.opal$push_include = function(data, file, path, lineno, attributes) {
        var opal$a, self = this, depth = nil;
        if (file == null) {
          file = nil
        }
        if (path == null) {
          path = nil
        }
        if (lineno == null) {
          lineno = 1
        }
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        self.include_stack['opal$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);
        if (file !== false && file !== nil) {
          self.file = file;
          self.dir = opal$scope.File.opal$dirname(file);
          self.process_lines = opal$scope.ASCIIDOC_EXTENSIONS['opal$[]'](((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$extname(file));
          } else {
          self.file = nil;
          self.dir = ".";
          self.process_lines = true;
        };
        self.path = (function() {if (path !== false && path !== nil) {
          self.includes['opal$<<'](opal$scope.Helpers.opal$rootname(path));
          return path;
          } else {
          return "<stdin>"
        }; return nil; })();
        self.lineno = lineno;
        if ((opal$a = attributes['opal$has_key?']("depth")) !== false && opal$a !== nil) {
          depth = attributes['opal$[]']("depth").opal$to_i();
          if (depth['opal$<='](0)) {
            depth = 1};
          self.maxdepth = opal$hash2(["abs", "rel"], {"abs": (self.include_stack.opal$size()['opal$-'](1))['opal$+'](depth), "rel": depth});};
        self.lines = self.opal$prepare_lines(data, opal$hash2(["normalize", "condense", "indent"], {"normalize": true, "condense": false, "indent": attributes['opal$[]']("indent")}));
        if ((opal$a = self.lines['opal$empty?']()) !== false && opal$a !== nil) {
          self.opal$pop_include()
          } else {
          self.eof = false;
          self.look_ahead = 0;
        };
        return nil;
      };

      def.opal$pop_include = function() {
        var opal$a, self = this;
        if (self.include_stack.opal$size()['opal$>'](0)) {
          opal$a = opal$opal.to_ary(self.include_stack.opal$pop()), self.lines = (opal$a[0] == null ? nil : opal$a[0]), self.file = (opal$a[1] == null ? nil : opal$a[1]), self.dir = (opal$a[2] == null ? nil : opal$a[2]), self.path = (opal$a[3] == null ? nil : opal$a[3]), self.lineno = (opal$a[4] == null ? nil : opal$a[4]), self.maxdepth = (opal$a[5] == null ? nil : opal$a[5]), self.process_lines = (opal$a[6] == null ? nil : opal$a[6]);
          self.eof = self.lines['opal$empty?']();
          self.look_ahead = 0;};
        return nil;
      };

      def.opal$include_depth = function() {
        var self = this;
        return self.include_stack.opal$size();
      };

      def['opal$exceeded_max_depth?'] = function() {
        var opal$a, opal$b, self = this, abs_maxdepth = nil;
        if ((opal$a = ((opal$b = ((abs_maxdepth = self.maxdepth['opal$[]']("abs")))['opal$>'](0)) ? self.include_stack.opal$size()['opal$>='](abs_maxdepth) : opal$b)) !== false && opal$a !== nil) {
          return self.maxdepth['opal$[]']("rel")
          } else {
          return false
        };
      };

      def.opal$shift = TMP_20 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, self = this, opal$iter = TMP_20._p, opal$yield = opal$iter || nil;
        TMP_20._p = null;
        if ((opal$a = self.unescape_next_line) !== false && opal$a !== nil) {
          self.unescape_next_line = false;
          return opal$opal.find_super_dispatcher(self, 'shift', TMP_20, opal$iter).apply(self, opal$zuper)['opal$[]'](opal$range(1, -1, false));
          } else {
          return opal$opal.find_super_dispatcher(self, 'shift', TMP_20, opal$iter).apply(self, opal$zuper)
        };
      };

      def['opal$skip_front_matter!'] = function(data, increment_linenos) {
        var opal$a, opal$b, opal$c, opal$d, self = this, front_matter = nil, original_data = nil;
        if (increment_linenos == null) {
          increment_linenos = true
        }
        front_matter = nil;
        if (data['opal$[]'](0)['opal$==']("---")) {
          original_data = data.opal$dup();
          front_matter = [];
          data.opal$shift();
          if (increment_linenos !== false && increment_linenos !== nil) {
            self.lineno = self.lineno['opal$+'](1)};
          while ((opal$b = (opal$c = (opal$d = data['opal$empty?'](), (opal$d === nil || opal$d === false)), opal$c !== false && opal$c !== nil ?(opal$d = data['opal$[]'](0)['opal$==']("---"), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) {
          front_matter.opal$push(data.opal$shift());
          if (increment_linenos !== false && increment_linenos !== nil) {
            self.lineno = self.lineno['opal$+'](1)};};
          if ((opal$a = data['opal$empty?']()) !== false && opal$a !== nil) {
            (opal$a = data).opal$unshift.apply(opal$a, [].concat(original_data));
            if (increment_linenos !== false && increment_linenos !== nil) {
              self.lineno = 0};
            front_matter = nil;
            } else {
            data.opal$shift();
            if (increment_linenos !== false && increment_linenos !== nil) {
              self.lineno = self.lineno['opal$+'](1)};
          };};
        return front_matter;
      };

      def.opal$resolve_expr_val = function(str) {
        var opal$a, opal$b, opal$c, self = this, val = nil, type = nil;
        val = str;
        type = nil;
        if ((opal$a = (((opal$b = (opal$c = val['opal$start_with?']("\""), opal$c !== false && opal$c !== nil ?val['opal$end_with?']("\"") : opal$c)) !== false && opal$b !== nil) ? opal$b : (opal$c = val['opal$start_with?']("'"), opal$c !== false && opal$c !== nil ?val['opal$end_with?']("'") : opal$c))) !== false && opal$a !== nil) {
          type = "string";
          val = val['opal$[]'](opal$range(1, -1, true));};
        if ((opal$a = val['opal$include?']("{")) !== false && opal$a !== nil) {
          val = self.document.opal$sub_attributes(val)};
        if ((opal$a = type['opal$==']("string")) === false || opal$a === nil) {
          if ((opal$a = val['opal$empty?']()) !== false && opal$a !== nil) {
            val = nil
          } else if ((opal$a = val.opal$strip()['opal$empty?']()) !== false && opal$a !== nil) {
            val = " "
          } else if (val['opal$==']("true")) {
            val = true
          } else if (val['opal$==']("false")) {
            val = false
          } else if ((opal$a = val['opal$include?'](".")) !== false && opal$a !== nil) {
            val = val.opal$to_f()
            } else {
            val = val.opal$to_i()
          }};
        return val;
      };

      def['opal$include_processors?'] = function() {
        var opal$a, opal$b, self = this;
        if ((opal$a = (opal$b = self.include_processor_extensions, (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          if ((opal$a = (opal$b = self.document['opal$extensions?'](), opal$b !== false && opal$b !== nil ?self.document.opal$extensions()['opal$include_processors?']() : opal$b)) !== false && opal$a !== nil) {
            self.include_processor_extensions = self.document.opal$extensions().opal$include_processors();
            return true;
            } else {
            self.include_processor_extensions = false;
            return false;
          }
          } else {
          return (opal$a = self.include_processor_extensions['opal$=='](false), (opal$a === nil || opal$a === false))
        };
      };

      return (def.opal$to_s = function() {
        var opal$a, opal$b, TMP_21, self = this;
        return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {path: " + (self.path.opal$inspect()) + ", line #: " + (self.lineno) + ", include depth: " + (self.include_stack.opal$size()) + ", include stack: [" + ((opal$a = (opal$b = self.include_stack).opal$map, opal$a._p = (TMP_21 = function(inc){var self = TMP_21._s || this;if (inc == null) inc = nil;
        return inc.opal$to_s()}, TMP_21._s = self, TMP_21), opal$a).call(opal$b).opal$join(", ")) + "]}>";
      }, nil);
    })(self, opal$scope.Reader);
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Section(){};
      var self = opal$Section = opal$klass(opal$base, opal$super, 'Section', opal$Section);

      var def = opal$Section._proto, opal$scope = opal$Section._scope, TMP_1, TMP_2, TMP_3;
      def.level = def.document = def.parent = def.number = def.title = def.numbered = def.blocks = nil;
      self.opal$attr_accessor("index");

      self.opal$attr_accessor("number");

      self.opal$attr_accessor("sectname");

      self.opal$attr_accessor("special");

      self.opal$attr_accessor("numbered");

      def.opal$initialize = TMP_1 = function(parent, level, numbered) {
        var opal$a, opal$b, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil;
        if (parent == null) {
          parent = nil
        }
        if (level == null) {
          level = nil
        }
        if (numbered == null) {
          numbered = true
        }
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [parent, "section"]);
        if ((opal$a = level['opal$nil?']()) !== false && opal$a !== nil) {
          if (parent !== false && parent !== nil) {
            self.level = parent.opal$level()['opal$+'](1)
          } else if ((opal$a = self.level['opal$nil?']()) !== false && opal$a !== nil) {
            self.level = 1}
          } else {
          self.level = level
        };
        self.numbered = ((opal$a = numbered !== false && numbered !== nil) ? self.level['opal$>'](0) : opal$a);
        self.special = (opal$a = ((opal$b = parent !== false && parent !== nil) ? parent.opal$context()['opal$==']("section") : opal$b), opal$a !== false && opal$a !== nil ?parent.opal$special() : opal$a);
        self.index = 0;
        return self.number = 1;
      };

      opal$opal.defn(self, 'opal$name', def.opal$title);

      def.opal$generate_id = function() {
        var opal$a, opal$b, self = this, sep = nil, pre = nil, base_id = nil, gen_id = nil, cnt = nil;
        if ((opal$a = self.document.opal$attributes()['opal$has_key?']("sectids")) !== false && opal$a !== nil) {
          sep = (((opal$a = self.document.opal$attributes()['opal$[]']("idseparator")) !== false && opal$a !== nil) ? opal$a : "_");
          pre = (((opal$a = self.document.opal$attributes()['opal$[]']("idprefix")) !== false && opal$a !== nil) ? opal$a : "_");
          base_id = "" + (pre) + (self.opal$title().opal$downcase().opal$gsub(opal$scope.InvalidSectionIdCharsRx, sep).opal$tr_s(sep, sep).opal$chomp(sep));
          if ((opal$a = (opal$b = pre['opal$empty?'](), opal$b !== false && opal$b !== nil ?base_id['opal$start_with?'](sep) : opal$b)) !== false && opal$a !== nil) {
            base_id = base_id['opal$[]'](opal$range(1, -1, false));
            while ((opal$b = base_id['opal$start_with?'](sep)) !== false && opal$b !== nil) {
            base_id = base_id['opal$[]'](opal$range(1, -1, false))};};
          gen_id = base_id;
          cnt = 2;
          while ((opal$b = self.document.opal$references()['opal$[]']("ids")['opal$has_key?'](gen_id)) !== false && opal$b !== nil) {
          gen_id = "" + (base_id) + (sep) + (cnt);
          cnt = cnt['opal$+'](1);};
          return gen_id;
          } else {
          return nil
        };
      };

      def.opal$sectnum = function(delimiter, append) {
        var opal$a, opal$b, opal$c, opal$d, self = this;
        if (delimiter == null) {
          delimiter = "."
        }
        if (append == null) {
          append = nil
        }
        (((opal$a = append) !== false && opal$a !== nil) ? opal$a : append = ((function() {if (append['opal$=='](false)) {
          return ""
          } else {
          return delimiter
        }; return nil; })()));
        if ((opal$a = (opal$b = (opal$c = (opal$d = self.level, opal$d !== false && opal$d !== nil ?self.level['opal$>'](1) : opal$d), opal$c !== false && opal$c !== nil ?self.parent : opal$c), opal$b !== false && opal$b !== nil ?self.parent.opal$context()['opal$==']("section") : opal$b)) !== false && opal$a !== nil) {
          return "" + (self.parent.opal$sectnum(delimiter)) + (self.number) + (append)
          } else {
          return "" + (self.number) + (append)
        };
      };

      def['opal$<<'] = TMP_2 = function(block) {var opal$zuper = opal$slice.call(arguments, 0);
        var self = this, opal$iter = TMP_2._p, opal$yield = opal$iter || nil;
        TMP_2._p = null;
        opal$opal.find_super_dispatcher(self, '<<', TMP_2, opal$iter).apply(self, opal$zuper);
        if (block.opal$context()['opal$==']("section")) {
          return self.opal$assign_index(block)
          } else {
          return nil
        };
      };

      return (def.opal$to_s = TMP_3 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, opal$b, self = this, opal$iter = TMP_3._p, opal$yield = opal$iter || nil, qualified_title = nil;
        TMP_3._p = null;
        if ((opal$a = (opal$b = self.title['opal$=='](nil), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          qualified_title = (function() {if ((opal$a = self.numbered) !== false && opal$a !== nil) {
            return "" + (self.opal$sectnum()) + " " + (self.title)
            } else {
            return self.title
          }; return nil; })();
          return "#<" + (self.opal$class()) + "@" + (self.opal$object_id()) + " {level: " + (self.level) + ", title: " + (qualified_title.opal$inspect()) + ", blocks: " + (self.blocks.opal$size()) + "}>";
          } else {
          return opal$opal.find_super_dispatcher(self, 'to_s', TMP_3, opal$iter).apply(self, opal$zuper)
        };
      }, nil);
    })(self, opal$scope.AbstractBlock)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Stylesheets(){};
      var self = opal$Stylesheets = opal$klass(opal$base, opal$super, 'Stylesheets', opal$Stylesheets);

      var def = opal$Stylesheets._proto, opal$scope = opal$Stylesheets._scope, opal$a;
      def.primary_stylesheet_data = def.coderay_stylesheet_data = def.pygments_stylesheet_data = nil;
      opal$opal.cdecl(opal$scope, 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");

      opal$opal.cdecl(opal$scope, 'DEFAULT_PYGMENTS_STYLE', "pastie");

      opal$opal.cdecl(opal$scope, 'STYLESHEETS_DATA_PATH', ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$join(opal$scope.DATA_PATH, "stylesheets"));

      self.__instance__ = self.opal$new();

      opal$opal.defs(self, 'opal$instance', function() {
        var self = this;
        if (self.__instance__ == null) self.__instance__ = nil;

        return self.__instance__;
      });

      def.opal$primary_stylesheet_name = function() {
        var self = this;
        return opal$scope.DEFAULT_STYLESHEET_NAME;
      };

      def.opal$primary_stylesheet_data = function() {
        var opal$a, opal$b, self = this;
        return (((opal$a = self.primary_stylesheet_data) !== false && opal$a !== nil) ? opal$a : self.primary_stylesheet_data = ((opal$b = opal$opal.Object._scope.IO) == null ? opal$opal.cm('IO') : opal$b).opal$read(((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b).opal$join(opal$scope.STYLESHEETS_DATA_PATH, "asciidoctor-default.css")).opal$chomp());
      };

      def.opal$embed_primary_stylesheet = function() {
        var self = this;
        return "<style>\n" + (self.opal$primary_stylesheet_data()) + "\n</style>";
      };

      def.opal$write_primary_stylesheet = function(target_dir) {
        var opal$a, opal$b, TMP_1, opal$c, self = this;
        return (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_1 = function(f){var self = TMP_1._s || this;if (f == null) f = nil;
        return f.opal$write(self.opal$primary_stylesheet_data())}, TMP_1._s = self, TMP_1), opal$a).call(opal$b, ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c).opal$join(target_dir, self.opal$primary_stylesheet_name()), "w");
      };

      def.opal$coderay_stylesheet_name = function() {
        var self = this;
        return "coderay-asciidoctor.css";
      };

      def.opal$coderay_stylesheet_data = function() {
        var opal$a, opal$b, self = this;
        return (((opal$a = self.coderay_stylesheet_data) !== false && opal$a !== nil) ? opal$a : self.coderay_stylesheet_data = ((opal$b = opal$opal.Object._scope.IO) == null ? opal$opal.cm('IO') : opal$b).opal$read(((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b).opal$join(opal$scope.STYLESHEETS_DATA_PATH, "coderay-asciidoctor.css")).opal$chomp());
      };

      def.opal$embed_coderay_stylesheet = function() {
        var self = this;
        return "<style>\n" + (self.opal$coderay_stylesheet_data()) + "\n</style>";
      };

      def.opal$write_coderay_stylesheet = function(target_dir) {
        var opal$a, opal$b, TMP_2, opal$c, self = this;
        return (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_2 = function(f){var self = TMP_2._s || this;if (f == null) f = nil;
        return f.opal$write(self.opal$coderay_stylesheet_data())}, TMP_2._s = self, TMP_2), opal$a).call(opal$b, ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c).opal$join(target_dir, self.opal$coderay_stylesheet_name()), "w");
      };

      def.opal$pygments_stylesheet_name = function(style) {
        var opal$a, self = this;
        if (style == null) {
          style = nil
        }
        (((opal$a = style) !== false && opal$a !== nil) ? opal$a : style = opal$scope.DEFAULT_PYGMENTS_STYLE);
        return "pygments-" + (style) + ".css";
      };

      def.opal$pygments_stylesheet_data = function(style) {
        var opal$a, self = this;
        if (style == null) {
          style = nil
        }
        (((opal$a = style) !== false && opal$a !== nil) ? opal$a : style = opal$scope.DEFAULT_PYGMENTS_STYLE);
        return ((((opal$a = self.pygments_stylesheet_data) !== false && opal$a !== nil) ? opal$a : self.pygments_stylesheet_data = self.opal$load_pygments()));
      };

      def.opal$embed_pygments_stylesheet = function(style) {
        var self = this;
        if (style == null) {
          style = nil
        }
        return "<style>\n" + (self.opal$pygments_stylesheet_data(style)) + "\n</style>";
      };

      def.opal$write_pygments_stylesheet = function(target_dir, style) {
        var opal$a, opal$b, TMP_3, opal$c, self = this;
        if (style == null) {
          style = nil
        }
        return (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_3 = function(f){var self = TMP_3._s || this;if (f == null) f = nil;
        return f.opal$write(self.opal$pygments_stylesheet_data(style))}, TMP_3._s = self, TMP_3), opal$a).call(opal$b, ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c).opal$join(target_dir, self.opal$pygments_stylesheet_name(style)), "w");
      };

      return (def.opal$load_pygments = function() {
        var opal$a, self = this;
        if ((opal$a = (opal$opal.Object._scope.Pygments == null ? nil : 'constant')) === false || opal$a === nil) {
          opal$scope.Helpers.opal$require_library("pygments", "pygments.rb")};
        return opal$hash2([], {});
      }, nil);
    })(self, null)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$Table(){};
      var self = opal$Table = opal$klass(opal$base, opal$super, 'Table', opal$Table);

      var def = opal$Table._proto, opal$scope = opal$Table._scope, TMP_1;
      def.attributes = def.document = def.has_header_option = def.rows = nil;
      (function(opal$base, opal$super) {
        function opal$Rows(){};
        var self = opal$Rows = opal$klass(opal$base, opal$super, 'Rows', opal$Rows);

        var def = opal$Rows._proto, opal$scope = opal$Rows._scope;
        self.opal$attr_accessor("head", "foot", "body");

        def.opal$initialize = function(head, foot, body) {
          var self = this;
          if (head == null) {
            head = []
          }
          if (foot == null) {
            foot = []
          }
          if (body == null) {
            body = []
          }
          self.head = head;
          self.foot = foot;
          return self.body = body;
        };

        return opal$opal.defn(self, 'opal$[]', def.opal$send);
      })(self, null);

      opal$opal.cdecl(opal$scope, 'DEFAULT_DATA_FORMAT', "psv");

      opal$opal.cdecl(opal$scope, 'DATA_FORMATS', ["psv", "dsv", "csv"]);

      opal$opal.cdecl(opal$scope, 'DEFAULT_DELIMITERS', opal$hash2(["psv", "dsv", "csv"], {"psv": "|", "dsv": ":", "csv": ","}));

      opal$opal.cdecl(opal$scope, 'TEXT_STYLES', opal$hash2(["d", "s", "e", "m", "h", "l", "v", "a"], {"d": "none", "s": "strong", "e": "emphasis", "m": "monospaced", "h": "header", "l": "literal", "v": "verse", "a": "asciidoc"}));

      opal$opal.cdecl(opal$scope, 'ALIGNMENTS', opal$hash2(["h", "v"], {"h": opal$hash2(["<", ">", "^"], {"<": "left", ">": "right", "^": "center"}), "v": opal$hash2(["<", ">", "^"], {"<": "top", ">": "bottom", "^": "middle"})}));

      self.opal$attr_accessor("columns");

      self.opal$attr_accessor("rows");

      self.opal$attr_accessor("has_header_option");

      def.opal$initialize = TMP_1 = function(parent, attributes) {
        var opal$a, opal$b, opal$c, opal$d, self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil, pcwidth = nil, pcwidth_intval = nil;
        TMP_1._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [parent, "table"]);
        self.rows = opal$scope.Rows.opal$new();
        self.columns = [];
        self.has_header_option = attributes['opal$has_key?']("header-option");
        pcwidth = attributes['opal$[]']("width");
        pcwidth_intval = pcwidth.opal$to_i().opal$abs();
        if ((opal$a = (((opal$b = ((opal$c = pcwidth_intval['opal$=='](0)) ? (opal$d = pcwidth['opal$==']("0"), (opal$d === nil || opal$d === false)) : opal$c)) !== false && opal$b !== nil) ? opal$b : pcwidth_intval['opal$>'](100))) !== false && opal$a !== nil) {
          pcwidth_intval = 100};
        self.attributes['opal$[]=']("tablepcwidth", pcwidth_intval);
        if ((opal$a = self.document.opal$attributes()['opal$has_key?']("pagewidth")) !== false && opal$a !== nil) {
          return (opal$a = "tableabswidth", opal$b = self.attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, ((self.attributes['opal$[]']("tablepcwidth").opal$to_f()['opal$/'](100))['opal$*'](self.document.opal$attributes()['opal$[]']("pagewidth"))).opal$round())))
          } else {
          return nil
        };
      };

      def['opal$header_row?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.has_header_option, opal$a !== false && opal$a !== nil ?self.rows.opal$body()['opal$empty?']() : opal$a);
      };

      def.opal$create_columns = function(col_specs) {
        var opal$a, opal$b, TMP_2, opal$c, TMP_3, self = this, total_width = nil, cols = nil, even_width = nil;
        total_width = 0;
        cols = [];
        (opal$a = (opal$b = col_specs).opal$each, opal$a._p = (TMP_2 = function(col_spec){var self = TMP_2._s || this;if (col_spec == null) col_spec = nil;
        total_width = total_width['opal$+'](col_spec['opal$[]']("width"));
          return cols['opal$<<'](opal$scope.Column.opal$new(self, cols.opal$size(), col_spec));}, TMP_2._s = self, TMP_2), opal$a).call(opal$b);
        if ((opal$a = cols['opal$empty?']()) === false || opal$a === nil) {
          self.attributes['opal$[]=']("colcount", cols.opal$size());
          even_width = ((100.0)['opal$/'](cols.opal$size())).opal$floor();
          (opal$a = (opal$c = cols).opal$each, opal$a._p = (TMP_3 = function(c){var self = TMP_3._s || this;if (c == null) c = nil;
          return c.opal$assign_width(total_width, even_width)}, TMP_3._s = self, TMP_3), opal$a).call(opal$c);};
        self.columns = cols;
        return nil;
      };

      return (def.opal$partition_header_footer = function(attributes) {
        var opal$a, opal$b, TMP_4, opal$c, self = this, num_body_rows = nil, head = nil;
        self.attributes['opal$[]=']("rowcount", self.rows.opal$body().opal$size());
        num_body_rows = self.rows.opal$body().opal$size();
        if ((opal$a = ((opal$b = num_body_rows['opal$>'](0)) ? self.has_header_option : opal$b)) !== false && opal$a !== nil) {
          head = self.rows.opal$body().opal$shift();
          num_body_rows = num_body_rows['opal$-'](1);
          (opal$a = (opal$b = head).opal$each, opal$a._p = (TMP_4 = function(c){var self = TMP_4._s || this;if (c == null) c = nil;
          return c['opal$style='](nil)}, TMP_4._s = self, TMP_4), opal$a).call(opal$b);
          self.rows['opal$head=']([head]);};
        if ((opal$a = ((opal$c = num_body_rows['opal$>'](0)) ? attributes['opal$has_key?']("footer-option") : opal$c)) !== false && opal$a !== nil) {
          self.rows['opal$foot=']([self.rows.opal$body().opal$pop()])};
        return nil;
      }, nil);
    })(self, opal$scope.AbstractBlock);

    (function(opal$base, opal$super) {
      function opal$Column(){};
      var self = opal$Column = opal$klass(opal$base, opal$super, 'Column', opal$Column);

      var def = opal$Column._proto, opal$scope = opal$Column._scope, TMP_5;
      def.attributes = nil;
      self.opal$attr_accessor("style");

      def.opal$initialize = TMP_5 = function(table, index, attributes) {
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_5._p, opal$yield = opal$iter || nil;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        TMP_5._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_5, null).apply(self, [table, "column"]);
        self.style = attributes['opal$[]']("style");
        attributes['opal$[]=']("colnumber", index['opal$+'](1));
        (opal$a = "width", opal$b = attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, 1)));
        (opal$a = "halign", opal$b = attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, "left")));
        (opal$a = "valign", opal$b = attributes, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, "top")));
        return self.opal$update_attributes(attributes);
      };

      opal$opal.defn(self, 'opal$table', def.opal$parent);

      return (def.opal$assign_width = function(total_width, even_width) {
        var opal$a, self = this, width = nil;
        if (total_width['opal$>'](0)) {
          width = ((self.attributes['opal$[]']("width").opal$to_f()['opal$/'](total_width))['opal$*'](100)).opal$floor()
          } else {
          width = even_width
        };
        self.attributes['opal$[]=']("colpcwidth", width);
        if ((opal$a = self.opal$parent().opal$attributes()['opal$has_key?']("tableabswidth")) !== false && opal$a !== nil) {
          self.attributes['opal$[]=']("colabswidth", ((width.opal$to_f()['opal$/'](100))['opal$*'](self.opal$parent().opal$attributes()['opal$[]']("tableabswidth"))).opal$round())};
        return nil;
      }, nil);
    })(opal$scope.Table, opal$scope.AbstractNode);

    (function(opal$base, opal$super) {
      function opal$Cell(){};
      var self = opal$Cell = opal$klass(opal$base, opal$super, 'Cell', opal$Cell);

      var def = opal$Cell._proto, opal$scope = opal$Cell._scope, TMP_6, TMP_8;
      def.style = def.document = def.text = def.inner_document = def.colspan = def.rowspan = def.attributes = nil;
      self.opal$attr_accessor("style");

      self.opal$attr_accessor("colspan");

      self.opal$attr_accessor("rowspan");

      opal$opal.defn(self, 'opal$column', def.opal$parent);

      self.opal$attr_reader("inner_document");

      def.opal$initialize = TMP_6 = function(column, text, attributes, cursor) {
        var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_6._p, opal$yield = opal$iter || nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_lines = nil, processed_lines = nil;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        if (cursor == null) {
          cursor = nil
        }
        TMP_6._p = null;
        opal$opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [column, "cell"]);
        self.text = text;
        self.style = nil;
        self.colspan = nil;
        self.rowspan = nil;
        if (column !== false && column !== nil) {
          self.style = column.opal$attributes()['opal$[]']("style");
          self.opal$update_attributes(column.opal$attributes());};
        if (attributes !== false && attributes !== nil) {
          self.colspan = attributes.opal$delete("colspan");
          self.rowspan = attributes.opal$delete("rowspan");
          if ((opal$a = attributes['opal$has_key?']("style")) !== false && opal$a !== nil) {
            self.style = attributes['opal$[]']("style")};
          self.opal$update_attributes(attributes);};
        if ((opal$a = ((opal$b = self.style['opal$==']("asciidoc")) ? (opal$c = column.opal$table()['opal$header_row?'](), (opal$c === nil || opal$c === false)) : opal$b)) !== false && opal$a !== nil) {
          parent_doctitle = self.document.opal$attributes().opal$delete("doctitle");
          inner_document_lines = self.text.opal$split(opal$scope.EOL);
          if ((opal$a = (((opal$b = inner_document_lines['opal$empty?']()) !== false && opal$b !== nil) ? opal$b : (opal$c = inner_document_lines['opal$[]'](0)['opal$include?']("::"), (opal$c === nil || opal$c === false)))) === false || opal$a === nil) {
            unprocessed_lines = inner_document_lines['opal$[]'](0);
            processed_lines = opal$scope.PreprocessorReader.opal$new(self.document, unprocessed_lines).opal$readlines();
            if ((opal$a = (opal$b = processed_lines['opal$=='](unprocessed_lines), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
              inner_document_lines.opal$shift();
              (opal$a = inner_document_lines).opal$unshift.apply(opal$a, [].concat(processed_lines));};};
          self.inner_document = opal$scope.Document.opal$new(inner_document_lines, opal$hash2(["header_footer", "parent", "cursor"], {"header_footer": false, "parent": self.document, "cursor": cursor}));
          if ((opal$b = parent_doctitle['opal$nil?']()) !== false && opal$b !== nil) {
            return nil
            } else {
            return self.document.opal$attributes()['opal$[]=']("doctitle", parent_doctitle)
          };
          } else {
          return nil
        };
      };

      def.opal$text = function() {
        var self = this;
        return self.opal$apply_normal_subs(self.text).opal$strip();
      };

      def.opal$content = function() {
        var opal$a, opal$b, TMP_7, self = this;
        if (self.style['opal$==']("asciidoc")) {
          return self.inner_document.opal$convert()
          } else {
          return (opal$a = (opal$b = self.opal$text().opal$split(opal$scope.BlankLineRx)).opal$map, opal$a._p = (TMP_7 = function(p){var self = TMP_7._s || this, opal$a, opal$b, opal$c;
            if (self.style == null) self.style = nil;
if (p == null) p = nil;
          if ((opal$a = (((opal$b = (opal$c = self.style, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : self.style['opal$==']("header"))) !== false && opal$a !== nil) {
              return p
              } else {
              return opal$scope.Inline.opal$new(self.opal$parent(), "quoted", p, opal$hash2(["type"], {"type": self.style})).opal$convert()
            }}, TMP_7._s = self, TMP_7), opal$a).call(opal$b)
        };
      };

      return (def.opal$to_s = TMP_8 = function() {var opal$zuper = opal$slice.call(arguments, 0);
        var opal$a, self = this, opal$iter = TMP_8._p, opal$yield = opal$iter || nil;
        TMP_8._p = null;
        return "" + (opal$opal.find_super_dispatcher(self, 'to_s', TMP_8, opal$iter).apply(self, opal$zuper).opal$to_s()) + " - [text: " + (self.text) + ", colspan: " + ((((opal$a = self.colspan) !== false && opal$a !== nil) ? opal$a : 1)) + ", rowspan: " + ((((opal$a = self.rowspan) !== false && opal$a !== nil) ? opal$a : 1)) + ", attributes: " + (self.attributes) + "]";
      }, nil);
    })(opal$scope.Table, opal$scope.AbstractNode);

    (function(opal$base, opal$super) {
      function opal$ParserContext(){};
      var self = opal$ParserContext = opal$klass(opal$base, opal$super, 'ParserContext', opal$ParserContext);

      var def = opal$ParserContext._proto, opal$scope = opal$ParserContext._scope;
      def.format = def.delimiter = def.delimiter_re = def.buffer = def.cell_specs = def.cell_open = def.last_cursor = def.table = def.current_row = def.col_count = def.col_visits = def.active_rowspans = def.linenum = nil;
      self.opal$attr_accessor("table");

      self.opal$attr_accessor("format");

      self.opal$attr_reader("col_count");

      self.opal$attr_accessor("buffer");

      self.opal$attr_reader("delimiter");

      self.opal$attr_reader("delimiter_re");

      def.opal$initialize = function(reader, table, attributes) {
        var opal$a, opal$b, opal$c, opal$d, self = this;
        if (attributes == null) {
          attributes = opal$hash2([], {})
        }
        self.reader = reader;
        self.table = table;
        self.last_cursor = reader.opal$cursor();
        if ((opal$a = (self.format = attributes['opal$[]']("format"))) !== false && opal$a !== nil) {
          if ((opal$a = (opal$scope.Table)._scope.DATA_FORMATS['opal$include?'](self.format)) === false || opal$a === nil) {
            self.opal$raise("Illegal table format: " + (self.format))}
          } else {
          self.format = (opal$scope.Table)._scope.DEFAULT_DATA_FORMAT
        };
        if ((opal$a = (opal$b = ((opal$c = self.format['opal$==']("psv")) ? (opal$d = attributes['opal$has_key?']("separator"), (opal$d === nil || opal$d === false)) : opal$c), opal$b !== false && opal$b !== nil ?table.opal$document()['opal$nested?']() : opal$b)) !== false && opal$a !== nil) {
          self.delimiter = "!"
          } else {
          self.delimiter = (((opal$a = attributes['opal$[]']("separator")) !== false && opal$a !== nil) ? opal$a : (opal$scope.Table)._scope.DEFAULT_DELIMITERS['opal$[]'](self.format))
        };
        self.delimiter_re = (new RegExp("" + opal$scope.Regexp.opal$escape(self.delimiter)));
        self.col_count = (function() {if ((opal$a = table.opal$columns()['opal$empty?']()) !== false && opal$a !== nil) {
          return -1
          } else {
          return table.opal$columns().opal$size()
        }; return nil; })();
        self.buffer = "";
        self.cell_specs = [];
        self.cell_open = false;
        self.active_rowspans = [0];
        self.col_visits = 0;
        self.current_row = [];
        return self.linenum = -1;
      };

      def['opal$starts_with_delimiter?'] = function(line) {
        var self = this;
        return line['opal$start_with?'](self.delimiter);
      };

      def.opal$match_delimiter = function(line) {
        var self = this;
        return self.delimiter_re.opal$match(line);
      };

      def.opal$skip_matched_delimiter = function(match, escaped) {
        var self = this;
        if (escaped == null) {
          escaped = false
        }
        self.buffer = "" + (self.buffer) + ((function() {if (escaped !== false && escaped !== nil) {
          return match.opal$pre_match().opal$chop()
          } else {
          return match.opal$pre_match()
        }; return nil; })()) + (self.delimiter);
        return match.opal$post_match();
      };

      def['opal$buffer_has_unclosed_quotes?'] = function(append) {
        var opal$a, opal$b, opal$c, self = this, record = nil;
        if (append == null) {
          append = nil
        }
        record = ((("") + (self.buffer)) + (append)).opal$strip();
        return (opal$a = (opal$b = record['opal$start_with?']("\""), opal$b !== false && opal$b !== nil ?(opal$c = record['opal$start_with?']("\"\""), (opal$c === nil || opal$c === false)) : opal$b), opal$a !== false && opal$a !== nil ?(opal$b = record['opal$end_with?']("\""), (opal$b === nil || opal$b === false)) : opal$a);
      };

      def['opal$buffer_quoted?'] = function() {
        var opal$a, opal$b, self = this;
        self.buffer = self.buffer.opal$lstrip();
        return (opal$a = self.buffer['opal$start_with?']("\""), opal$a !== false && opal$a !== nil ?(opal$b = self.buffer['opal$start_with?']("\"\""), (opal$b === nil || opal$b === false)) : opal$a);
      };

      def.opal$take_cell_spec = function() {
        var self = this;
        return self.cell_specs.opal$shift();
      };

      def.opal$push_cell_spec = function(cell_spec) {
        var opal$a, self = this;
        if (cell_spec == null) {
          cell_spec = opal$hash2([], {})
        }
        self.cell_specs['opal$<<'](((((opal$a = cell_spec) !== false && opal$a !== nil) ? opal$a : opal$hash2([], {}))));
        return nil;
      };

      def.opal$keep_cell_open = function() {
        var self = this;
        self.cell_open = true;
        return nil;
      };

      def.opal$mark_cell_closed = function() {
        var self = this;
        self.cell_open = false;
        return nil;
      };

      def['opal$cell_open?'] = function() {
        var self = this;
        return self.cell_open;
      };

      def['opal$cell_closed?'] = function() {
        var opal$a, self = this;
        return (opal$a = self.cell_open, (opal$a === nil || opal$a === false));
      };

      def.opal$close_open_cell = function(next_cell_spec) {
        var opal$a, self = this;
        if (next_cell_spec == null) {
          next_cell_spec = opal$hash2([], {})
        }
        self.opal$push_cell_spec(next_cell_spec);
        if ((opal$a = self['opal$cell_open?']()) !== false && opal$a !== nil) {
          self.opal$close_cell(true)};
        self.opal$advance();
        return nil;
      };

      def.opal$close_cell = function(eol) {
        var opal$a, opal$b, opal$c, TMP_9, self = this, cell_text = nil, cell_spec = nil, repeat = nil;
        if (eol == null) {
          eol = false
        }
        cell_text = self.buffer.opal$strip();
        self.buffer = "";
        if (self.format['opal$==']("psv")) {
          cell_spec = self.opal$take_cell_spec();
          if ((opal$a = cell_spec['opal$nil?']()) !== false && opal$a !== nil) {
            self.opal$warn("asciidoctor: ERROR: " + (self.last_cursor.opal$line_info()) + ": table missing leading separator, recovering automatically");
            cell_spec = opal$hash2([], {});
            repeat = 1;
            } else {
            repeat = cell_spec.opal$fetch("repeatcol", 1);
            cell_spec.opal$delete("repeatcol");
          };
          } else {
          cell_spec = nil;
          repeat = 1;
          if (self.format['opal$==']("csv")) {
            if ((opal$a = (opal$b = (opal$c = cell_text['opal$empty?'](), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?cell_text['opal$include?']("\"") : opal$b)) !== false && opal$a !== nil) {
              if ((opal$a = (opal$b = cell_text['opal$start_with?']("\""), opal$b !== false && opal$b !== nil ?cell_text['opal$end_with?']("\"") : opal$b)) !== false && opal$a !== nil) {
                cell_text = cell_text['opal$[]'](opal$range(1, -1, true)).opal$strip()};
              cell_text = cell_text.opal$tr_s("\"", "\"");}};
        };
        (opal$a = (opal$b = (1)).opal$upto, opal$a._p = (TMP_9 = function(i){var self = TMP_9._s || this, opal$a, opal$b, opal$c, opal$d, opal$e, column = nil, cell = nil;
          if (self.col_count == null) self.col_count = nil;
          if (self.table == null) self.table = nil;
          if (self.current_row == null) self.current_row = nil;
          if (self.last_cursor == null) self.last_cursor = nil;
          if (self.reader == null) self.reader = nil;
          if (self.col_visits == null) self.col_visits = nil;
          if (self.linenum == null) self.linenum = nil;
if (i == null) i = nil;
        if (self.col_count['opal$=='](-1)) {
            self.table.opal$columns()['opal$<<']((opal$scope.Table)._scope.Column.opal$new(self.table, self.current_row.opal$size()['opal$+'](i)['opal$-'](1)));
            column = self.table.opal$columns()['opal$[]'](-1);
            } else {
            column = self.table.opal$columns()['opal$[]'](self.current_row.opal$size())
          };
          cell = (opal$scope.Table)._scope.Cell.opal$new(column, cell_text, cell_spec, self.last_cursor);
          self.last_cursor = self.reader.opal$cursor();
          if ((opal$a = (((opal$b = (opal$c = cell.opal$rowspan(), (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : cell.opal$rowspan()['opal$=='](1))) === false || opal$a === nil) {
            self.opal$activate_rowspan(cell.opal$rowspan(), ((((opal$a = cell.opal$colspan()) !== false && opal$a !== nil) ? opal$a : 1)))};
          self.col_visits = self.col_visits['opal$+'](((((opal$a = cell.opal$colspan()) !== false && opal$a !== nil) ? opal$a : 1)));
          self.current_row['opal$<<'](cell);
          if ((opal$a = (opal$b = self['opal$end_of_row?'](), opal$b !== false && opal$b !== nil ?((((opal$c = (((opal$d = (opal$e = self.col_count['opal$=='](-1), (opal$e === nil || opal$e === false))) !== false && opal$d !== nil) ? opal$d : self.linenum['opal$>'](0))) !== false && opal$c !== nil) ? opal$c : (((opal$d = eol !== false && eol !== nil) ? i['opal$=='](repeat) : opal$d)))) : opal$b)) !== false && opal$a !== nil) {
            return self.opal$close_row()
            } else {
            return nil
          };}, TMP_9._s = self, TMP_9), opal$a).call(opal$b, repeat);
        self.open_cell = false;
        return nil;
      };

      def.opal$close_row = function() {
        var opal$a, opal$b, opal$c, self = this;
        self.table.opal$rows().opal$body()['opal$<<'](self.current_row);
        if (self.col_count['opal$=='](-1)) {
          self.col_count = self.col_visits};
        self.col_visits = 0;
        self.current_row = [];
        self.active_rowspans.opal$shift();
        (opal$a = 0, opal$b = self.active_rowspans, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, 0)));
        return nil;
      };

      def.opal$activate_rowspan = function(rowspan, colspan) {
        var opal$a, opal$b, TMP_10, self = this;
        (opal$a = (opal$b = (1).opal$upto(rowspan['opal$-'](1))).opal$each, opal$a._p = (TMP_10 = function(i){var self = TMP_10._s || this, opal$a;
          if (self.active_rowspans == null) self.active_rowspans = nil;
if (i == null) i = nil;
        return self.active_rowspans['opal$[]='](i, ((((opal$a = self.active_rowspans['opal$[]'](i)) !== false && opal$a !== nil) ? opal$a : 0))['opal$+'](colspan))}, TMP_10._s = self, TMP_10), opal$a).call(opal$b);
        return nil;
      };

      def['opal$end_of_row?'] = function() {
        var opal$a, self = this;
        return (((opal$a = self.col_count['opal$=='](-1)) !== false && opal$a !== nil) ? opal$a : self.opal$effective_col_visits()['opal$=='](self.col_count));
      };

      def.opal$effective_col_visits = function() {
        var self = this;
        return self.col_visits['opal$+'](self.active_rowspans['opal$[]'](0));
      };

      return (def.opal$advance = function() {
        var self = this;
        return self.linenum = self.linenum['opal$+'](1);
      }, nil);
    })(opal$scope.Table, null);
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$DocBook5Converter(){};
      var self = opal$DocBook5Converter = opal$klass(opal$base, opal$super, 'DocBook5Converter', opal$DocBook5Converter);

      var def = opal$DocBook5Converter._proto, opal$scope = opal$DocBook5Converter._scope;
      def.opal$document = function(node) {
        var opal$a, self = this, result = nil, root_tag_name = nil, doctype_line = nil, lang_attribute = nil, footer_docinfo = nil;
        result = [];
        root_tag_name = node.opal$doctype();
        result['opal$<<']("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        if ((opal$a = (doctype_line = self.opal$doctype_declaration(root_tag_name))) !== false && opal$a !== nil) {
          result['opal$<<'](doctype_line)};
        if ((opal$a = node['opal$attr?']("toc")) !== false && opal$a !== nil) {
          result['opal$<<']("<?asciidoc-toc?>")};
        if ((opal$a = node['opal$attr?']("numbered")) !== false && opal$a !== nil) {
          result['opal$<<']("<?asciidoc-numbered?>")};
        lang_attribute = (function() {if ((opal$a = (node['opal$attr?']("nolang"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return " lang=\"" + (node.opal$attr("lang", "en")) + "\""
        }; return nil; })();
        result['opal$<<']("<" + (root_tag_name) + (self.opal$document_ns_attributes(node)) + (lang_attribute) + ">");
        result['opal$<<']((self.opal$document_info_element(node, root_tag_name)));
        if ((opal$a = node['opal$blocks?']()) !== false && opal$a !== nil) {
          result['opal$<<'](node.opal$content())};
        if ((opal$a = ((footer_docinfo = node.opal$docinfo("footer")))['opal$empty?']()) === false || opal$a === nil) {
          result['opal$<<'](footer_docinfo)};
        result['opal$<<']("</" + (root_tag_name) + ">");
        return result['opal$*'](opal$scope.EOL);
      };

      opal$opal.defn(self, 'opal$embedded', def.opal$content);

      def.opal$section = function(node) {
        var opal$a, opal$b, self = this, tag_name = nil;
        tag_name = (function() {if ((opal$a = node.opal$special()) !== false && opal$a !== nil) {
          if (node.opal$level()['opal$<='](1)) {
            return node.opal$sectname()
            } else {
            return "section"
          }
        } else if ((opal$a = ((opal$b = node.opal$document().opal$doctype()['opal$==']("book")) ? node.opal$level()['opal$<='](1) : opal$b)) !== false && opal$a !== nil) {
          return ((function() {if (node.opal$level()['opal$=='](0)) {
            return "part"
            } else {
            return "chapter"
          }; return nil; })())
          } else {
          return "section"
        }; return nil; })();
        return "<" + (tag_name) + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n<title>" + (node.opal$title()) + "</title>\n" + (node.opal$content()) + "\n</" + (tag_name) + ">";
      };

      def.opal$admonition = function(node) {
        var self = this, tag_name = nil;
        return "<" + (tag_name = node.opal$attr("name")) + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$title_tag(node)) + (self.opal$resolve_content(node)) + "\n</" + (tag_name) + ">";
      };

      opal$opal.defn(self, 'opal$audio', def.opal$skip);

      def.opal$colist = function(node) {
        var opal$a, opal$b, TMP_1, self = this, result = nil;
        result = [];
        result['opal$<<']("<calloutlist" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
        (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_1 = function(item){var self = TMP_1._s || this, opal$a;if (item == null) item = nil;
        result['opal$<<']("<callout arearefs=\"" + (item.opal$attr("coids")) + "\">");
          result['opal$<<']("<para>" + (item.opal$text()) + "</para>");
          if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
            result['opal$<<'](item.opal$content())};
          return result['opal$<<']("</callout>");}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
        result['opal$<<']("</calloutlist>");
        return result['opal$*'](opal$scope.EOL);
      };

      opal$opal.cdecl(opal$scope, 'DLIST_TAGS', opal$hash2(["labeled", "qanda", "glossary"], {"labeled": opal$hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}), "qanda": opal$hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": opal$hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})}));

      opal$scope.DLIST_TAGS['opal$default='](opal$scope.DLIST_TAGS['opal$[]']("labeled"));

      def.opal$dlist = function(node) {
        var opal$a, opal$b, TMP_2, opal$c, TMP_4, self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;
        result = [];
        if (node.opal$style()['opal$==']("horizontal")) {
          result['opal$<<']("<" + (tag_name = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
            return "table"
            } else {
            return "informaltable"
          }; return nil; })()) + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.opal$title_tag(node)) + "<tgroup cols=\"2\">\n<colspec colwidth=\"" + (node.opal$attr("labelwidth", 15)) + "*\"/>\n<colspec colwidth=\"" + (node.opal$attr("itemwidth", 85)) + "*\"/>\n<tbody valign=\"top\">");
          (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_2 = function(terms, dd){var self = TMP_2._s || this, opal$a, opal$b, TMP_3;if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['opal$<<']("<row>\n<entry>");
            (opal$a = (opal$b = [].concat(terms)).opal$each, opal$a._p = (TMP_3 = function(dt){var self = TMP_3._s || this;if (dt == null) dt = nil;
            return result['opal$<<']("<simpara>" + (dt.opal$text()) + "</simpara>")}, TMP_3._s = self, TMP_3), opal$a).call(opal$b);
            result['opal$<<']("</entry>\n<entry>");
            if ((opal$a = dd['opal$nil?']()) === false || opal$a === nil) {
              if ((opal$a = dd['opal$text?']()) !== false && opal$a !== nil) {
                result['opal$<<']("<simpara>" + (dd.opal$text()) + "</simpara>")};
              if ((opal$a = dd['opal$blocks?']()) !== false && opal$a !== nil) {
                result['opal$<<'](dd.opal$content())};};
            return result['opal$<<']("</entry>\n</row>");}, TMP_2._s = self, TMP_2), opal$a).call(opal$b);
          result['opal$<<']("</tbody>\n</tgroup>\n</" + (tag_name) + ">");
          } else {
          tags = opal$scope.DLIST_TAGS['opal$[]'](node.opal$style());
          list_tag = tags['opal$[]']("list");
          entry_tag = tags['opal$[]']("entry");
          label_tag = tags['opal$[]']("label");
          term_tag = tags['opal$[]']("term");
          item_tag = tags['opal$[]']("item");
          if (list_tag !== false && list_tag !== nil) {
            result['opal$<<']("<" + (list_tag) + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">");
            if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
              result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};};
          (opal$a = (opal$c = node.opal$items()).opal$each, opal$a._p = (TMP_4 = function(terms, dd){var self = TMP_4._s || this, opal$a, opal$b, TMP_5;if (terms == null) terms = nil;if (dd == null) dd = nil;
          result['opal$<<']("<" + (entry_tag) + ">");
            if (label_tag !== false && label_tag !== nil) {
              result['opal$<<']("<" + (label_tag) + ">")};
            (opal$a = (opal$b = [].concat(terms)).opal$each, opal$a._p = (TMP_5 = function(dt){var self = TMP_5._s || this;if (dt == null) dt = nil;
            return result['opal$<<']("<" + (term_tag) + ">" + (dt.opal$text()) + "</" + (term_tag) + ">")}, TMP_5._s = self, TMP_5), opal$a).call(opal$b);
            if (label_tag !== false && label_tag !== nil) {
              result['opal$<<']("</" + (label_tag) + ">")};
            result['opal$<<']("<" + (item_tag) + ">");
            if ((opal$a = dd['opal$nil?']()) === false || opal$a === nil) {
              if ((opal$a = dd['opal$text?']()) !== false && opal$a !== nil) {
                result['opal$<<']("<simpara>" + (dd.opal$text()) + "</simpara>")};
              if ((opal$a = dd['opal$blocks?']()) !== false && opal$a !== nil) {
                result['opal$<<'](dd.opal$content())};};
            result['opal$<<']("</" + (item_tag) + ">");
            return result['opal$<<']("</" + (entry_tag) + ">");}, TMP_4._s = self, TMP_4), opal$a).call(opal$c);
          if (list_tag !== false && list_tag !== nil) {
            result['opal$<<']("</" + (list_tag) + ">")};
        };
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$example = function(node) {
        var opal$a, self = this;
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<example" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n<title>" + (node.opal$title()) + "</title>\n" + (self.opal$resolve_content(node)) + "\n</example>"
          } else {
          return "<informalexample" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$resolve_content(node)) + "\n</informalexample>"
        };
      };

      def.opal$floating_title = function(node) {
        var self = this;
        return "<bridgehead" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + " renderas=\"sect" + (node.opal$level()) + "\">" + (node.opal$title()) + "</bridgehead>";
      };

      def.opal$image = function(node) {
        var opal$a, self = this, width_attribute = nil, depth_attribute = nil, swidth_attribute = nil, scale_attribute = nil, align_attribute = nil;
        width_attribute = (function() {if ((opal$a = (node['opal$attr?']("width"))) !== false && opal$a !== nil) {
          return " contentwidth=\"" + (node.opal$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((opal$a = (node['opal$attr?']("height"))) !== false && opal$a !== nil) {
          return " contentdepth=\"" + (node.opal$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        swidth_attribute = (function() {if ((opal$a = (node['opal$attr?']("scaledwidth"))) !== false && opal$a !== nil) {
          return " width=\"" + (node.opal$attr("scaledwidth")) + "\" scalefit=\"1\""
          } else {
          return nil
        }; return nil; })();
        scale_attribute = (function() {if ((opal$a = (node['opal$attr?']("scale"))) !== false && opal$a !== nil) {
          return " scale=\"" + (node.opal$attr("scale")) + "\""
          } else {
          return nil
        }; return nil; })();
        align_attribute = (function() {if ((opal$a = (node['opal$attr?']("align"))) !== false && opal$a !== nil) {
          return " align=\"" + (node.opal$attr("align")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<figure" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$title_tag(node)) + "<mediaobject>\n<imageobject>\n<imagedata fileref=\"" + (node.opal$image_uri(node.opal$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (swidth_attribute) + (scale_attribute) + (align_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.opal$attr("alt")) + "</phrase></textobject>\n</mediaobject>\n</figure>";
      };

      def.opal$listing = function(node) {
        var opal$a, opal$b, self = this, informal = nil, listing_attributes = nil, numbering = nil, listing_content = nil;
        informal = (opal$a = node['opal$title?'](), (opal$a === nil || opal$a === false));
        listing_attributes = (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext()));
        if ((opal$a = ((opal$b = node.opal$style()['opal$==']("source")) ? (node['opal$attr?']("language")) : opal$b)) !== false && opal$a !== nil) {
          numbering = (function() {if ((opal$a = (node['opal$attr?']("linenums"))) !== false && opal$a !== nil) {
            return "numbered"
            } else {
            return "unnumbered"
          }; return nil; })();
          listing_content = "<programlisting" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + " language=\"" + (node.opal$attr("language")) + "\" linenumbering=\"" + (numbering) + "\">" + (node.opal$content()) + "</programlisting>";
          } else {
          listing_content = "<screen" + ((function() {if (informal !== false && informal !== nil) {
            return listing_attributes
            } else {
            return nil
          }; return nil; })()) + ">" + (node.opal$content()) + "</screen>"
        };
        if (informal !== false && informal !== nil) {
          return listing_content
          } else {
          return "<formalpara" + (listing_attributes) + ">\n<title>" + (node.opal$title()) + "</title>\n<para>\n" + (listing_content) + "\n</para>\n</formalpara>"
        };
      };

      def.opal$literal = function(node) {
        var opal$a, self = this;
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<formalpara" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n<title>" + (node.opal$title()) + "</title>\n<para>\n<literallayout class=\"monospaced\">" + (node.opal$content()) + "</literallayout>\n</para>\n</formalpara>"
          } else {
          return "<literallayout" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + " class=\"monospaced\">" + (node.opal$content()) + "</literallayout>"
        };
      };

      def.opal$math = function(node) {
        var opal$a, self = this, equation = nil, equation_data = nil;
        equation = node.opal$content().opal$strip();
        if (node.opal$style()['opal$==']("latexmath")) {
          equation_data = "<alt><![CDATA[" + (equation) + "]]></alt>\n<mediaobject><textobject><phrase></phrase></textobject></mediaobject>"
          } else {
          equation_data = "<mediaobject><textobject><phrase><![CDATA[" + (equation) + "]]></phrase></textobject></mediaobject>"
        };
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<equation" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n<title>" + (node.opal$title()) + "</title>\n" + (equation_data) + "\n</equation>"
          } else {
          return "<informalequation" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (equation_data) + "\n</informalequation>"
        };
      };

      def.opal$olist = function(node) {
        var opal$a, opal$b, TMP_6, self = this, result = nil, num_attribute = nil;
        result = [];
        num_attribute = (function() {if ((opal$a = node.opal$style()) !== false && opal$a !== nil) {
          return " numeration=\"" + (node.opal$style()) + "\""
          } else {
          return nil
        }; return nil; })();
        result['opal$<<']("<orderedlist" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + (num_attribute) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
        (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_6 = function(item){var self = TMP_6._s || this, opal$a;if (item == null) item = nil;
        result['opal$<<']("<listitem>");
          result['opal$<<']("<simpara>" + (item.opal$text()) + "</simpara>");
          if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
            result['opal$<<'](item.opal$content())};
          return result['opal$<<']("</listitem>");}, TMP_6._s = self, TMP_6), opal$a).call(opal$b);
        result['opal$<<']("</orderedlist>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$open = function(node) {
        var opal$a, opal$b, opal$c, self = this, opal$case = nil;
        return (function() {opal$case = node.opal$style();if ("abstract"['opal$==='](opal$case)) {if ((opal$a = ((opal$b = node.opal$parent()['opal$=='](node.opal$document())) ? node.opal$document()['opal$attr?']("doctype", "book") : opal$b)) !== false && opal$a !== nil) {
          self.opal$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
          return "";
          } else {
          return "<abstract>\n" + (self.opal$title_tag(node)) + (self.opal$resolve_content(node)) + "\n</abstract>"
        }}else if ("partintro"['opal$==='](opal$case)) {if ((opal$a = (opal$b = ((opal$c = node.opal$level()['opal$=='](0)) ? node.opal$parent().opal$context()['opal$==']("section") : opal$c), opal$b !== false && opal$b !== nil ?node.opal$document().opal$doctype()['opal$==']("book") : opal$b)) !== false && opal$a !== nil) {
          return "<partintro" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$title_tag(node)) + (self.opal$resolve_content(node)) + "\n</partintro>"
          } else {
          self.opal$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content.");
          return "";
        }}else {return node.opal$content()}})();
      };

      def.opal$page_break = function(node) {
        var self = this;
        return "<simpara><?asciidoc-pagebreak?></simpara>";
      };

      def.opal$paragraph = function(node) {
        var opal$a, self = this;
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "<formalpara" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n<title>" + (node.opal$title()) + "</title>\n<para>" + (node.opal$content()) + "</para>\n</formalpara>"
          } else {
          return "<simpara" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">" + (node.opal$content()) + "</simpara>"
        };
      };

      def.opal$preamble = function(node) {
        var self = this;
        if (node.opal$document().opal$doctype()['opal$==']("book")) {
          return "<preface" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$title_tag(node, false)) + (node.opal$content()) + "\n</preface>"
          } else {
          return node.opal$content()
        };
      };

      def.opal$quote = function(node) {
        var opal$a, opal$b, self = this, result = nil;
        result = [];
        result['opal$<<']("<blockquote" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
        if ((opal$a = (((opal$b = (node['opal$attr?']("attribution"))) !== false && opal$b !== nil) ? opal$b : (node['opal$attr?']("citetitle")))) !== false && opal$a !== nil) {
          result['opal$<<']("<attribution>");
          if ((opal$a = node['opal$attr?']("attribution")) !== false && opal$a !== nil) {
            result['opal$<<']((node.opal$attr("attribution")))};
          if ((opal$a = node['opal$attr?']("citetitle")) !== false && opal$a !== nil) {
            result['opal$<<']("<citetitle>" + (node.opal$attr("citetitle")) + "</citetitle>")};
          result['opal$<<']("</attribution>");};
        result['opal$<<']((self.opal$resolve_content(node)));
        result['opal$<<']("</blockquote>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$thematic_break = function(node) {
        var self = this;
        return "<simpara><?asciidoc-hr?></simpara>";
      };

      def.opal$sidebar = function(node) {
        var self = this;
        return "<sidebar" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">\n" + (self.opal$title_tag(node)) + (self.opal$resolve_content(node)) + "\n</sidebar>";
      };

      opal$opal.cdecl(opal$scope, 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);

      opal$opal.cdecl(opal$scope, 'TABLE_SECTIONS', ["head", "foot", "body"]);

      def.opal$table = function(node) {
        var opal$a, opal$b, TMP_7, opal$c, TMP_8, opal$d, TMP_9, opal$e, opal$f, TMP_14, self = this, result = nil, pgwide_attribute = nil, tag_name = nil, width = nil;
        result = [];
        pgwide_attribute = (function() {if ((opal$a = (node['opal$option?']("pgwide"))) !== false && opal$a !== nil) {
          return " pgwide=\"1\""
          } else {
          return nil
        }; return nil; })();
        result['opal$<<']("<" + (tag_name = (function() {if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          return "table"
          } else {
          return "informaltable"
        }; return nil; })()) + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + (pgwide_attribute) + " frame=\"" + (node.opal$attr("frame", "all")) + "\" rowsep=\"" + ((function() {if ((opal$a = ["none", "cols"]['opal$include?'](node.opal$attr("grid"))) !== false && opal$a !== nil) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\" colsep=\"" + ((function() {if ((opal$a = ["none", "rows"]['opal$include?'](node.opal$attr("grid"))) !== false && opal$a !== nil) {
          return 0
          } else {
          return 1
        }; return nil; })()) + "\">");
        if (tag_name['opal$==']("table")) {
          result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
        if ((opal$a = (width = (function() {if ((opal$b = (node['opal$attr?']("width"))) !== false && opal$b !== nil) {
          return (node.opal$attr("width"))
          } else {
          return nil
        }; return nil; })())) !== false && opal$a !== nil) {
          (opal$a = (opal$b = opal$scope.TABLE_PI_NAMES).opal$each, opal$a._p = (TMP_7 = function(pi_name){var self = TMP_7._s || this;if (pi_name == null) pi_name = nil;
          return result['opal$<<']("<?" + (pi_name) + " table-width=\"" + (width) + "\"?>")}, TMP_7._s = self, TMP_7), opal$a).call(opal$b)};
        result['opal$<<']("<tgroup cols=\"" + (node.opal$attr("colcount")) + "\">");
        (opal$a = (opal$c = node.opal$columns()).opal$each, opal$a._p = (TMP_8 = function(col){var self = TMP_8._s || this;if (col == null) col = nil;
        return result['opal$<<']("<colspec colname=\"col_" + (col.opal$attr("colnumber")) + "\" colwidth=\"" + (col.opal$attr((function() {if (width !== false && width !== nil) {
            return "colabswidth"
            } else {
            return "colpcwidth"
          }; return nil; })())) + "*\"/>")}, TMP_8._s = self, TMP_8), opal$a).call(opal$c);
        (opal$a = (opal$d = (opal$e = (opal$f = opal$scope.TABLE_SECTIONS).opal$select, opal$e._p = (TMP_14 = function(tblsec){var self = TMP_14._s || this, opal$a;if (tblsec == null) tblsec = nil;
        return (opal$a = node.opal$rows()['opal$[]'](tblsec)['opal$empty?'](), (opal$a === nil || opal$a === false))}, TMP_14._s = self, TMP_14), opal$e).call(opal$f)).opal$each, opal$a._p = (TMP_9 = function(tblsec){var self = TMP_9._s || this, opal$a, opal$b, TMP_10;if (tblsec == null) tblsec = nil;
        result['opal$<<']("<t" + (tblsec) + ">");
          (opal$a = (opal$b = node.opal$rows()['opal$[]'](tblsec)).opal$each, opal$a._p = (TMP_10 = function(row){var self = TMP_10._s || this, opal$a, opal$b, TMP_11;if (row == null) row = nil;
          result['opal$<<']("<row>");
            (opal$a = (opal$b = row).opal$each, opal$a._p = (TMP_11 = function(cell){var self = TMP_11._s || this, opal$a, opal$b, TMP_12, opal$c, TMP_13, halign_attribute = nil, valign_attribute = nil, colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, opal$case = nil, entry_end = nil;if (cell == null) cell = nil;
            halign_attribute = (function() {if ((opal$a = (cell['opal$attr?']("halign"))) !== false && opal$a !== nil) {
                return " align=\"" + (cell.opal$attr("halign")) + "\""
                } else {
                return nil
              }; return nil; })();
              valign_attribute = (function() {if ((opal$a = (cell['opal$attr?']("valign"))) !== false && opal$a !== nil) {
                return " valign=\"" + (cell.opal$attr("valign")) + "\""
                } else {
                return nil
              }; return nil; })();
              colspan_attribute = (function() {if ((opal$a = cell.opal$colspan()) !== false && opal$a !== nil) {
                return " namest=\"col_" + (colnum = cell.opal$column().opal$attr("colnumber")) + "\" nameend=\"col_" + (colnum['opal$+'](cell.opal$colspan())['opal$-'](1)) + "\""
                } else {
                return nil
              }; return nil; })();
              rowspan_attribute = (function() {if ((opal$a = cell.opal$rowspan()) !== false && opal$a !== nil) {
                return " morerows=\"" + (cell.opal$rowspan()['opal$-'](1)) + "\""
                } else {
                return nil
              }; return nil; })();
              entry_start = "<entry" + (halign_attribute) + (valign_attribute) + (colspan_attribute) + (rowspan_attribute) + ">";
              cell_content = (function() {if (tblsec['opal$==']("head")) {
                return cell.opal$text()
                } else {
                return (function() {opal$case = cell.opal$style();if ("asciidoc"['opal$==='](opal$case)) {return cell.opal$content()}else if ("verse"['opal$==='](opal$case)) {return "<literallayout>" + (cell.opal$text()) + "</literallayout>"}else if ("literal"['opal$==='](opal$case)) {return "<literallayout class=\"monospaced\">" + (cell.opal$text()) + "</literallayout>"}else if ("header"['opal$==='](opal$case)) {return (opal$a = (opal$b = cell.opal$content()).opal$map, opal$a._p = (TMP_12 = function(text){var self = TMP_12._s || this;if (text == null) text = nil;
                return "<simpara><emphasis role=\"strong\">" + (text) + "</emphasis></simpara>"}, TMP_12._s = self, TMP_12), opal$a).call(opal$b).opal$join()}else {return (opal$a = (opal$c = cell.opal$content()).opal$map, opal$a._p = (TMP_13 = function(text){var self = TMP_13._s || this;if (text == null) text = nil;
                return "<simpara>" + (text) + "</simpara>"}, TMP_13._s = self, TMP_13), opal$a).call(opal$c).opal$join()}})()
              }; return nil; })();
              entry_end = (function() {if ((opal$a = (node.opal$document()['opal$attr?']("cellbgcolor"))) !== false && opal$a !== nil) {
                return "<?dbfo bgcolor=\"" + (node.opal$document().opal$attr("cellbgcolor")) + "\"?></entry>"
                } else {
                return "</entry>"
              }; return nil; })();
              return result['opal$<<']("" + (entry_start) + (cell_content) + (entry_end));}, TMP_11._s = self, TMP_11), opal$a).call(opal$b);
            return result['opal$<<']("</row>");}, TMP_10._s = self, TMP_10), opal$a).call(opal$b);
          return result['opal$<<']("</t" + (tblsec) + ">");}, TMP_9._s = self, TMP_9), opal$a).call(opal$d);
        result['opal$<<']("</tgroup>");
        result['opal$<<']("</" + (tag_name) + ">");
        return result['opal$*'](opal$scope.EOL);
      };

      opal$opal.defn(self, 'opal$toc', def.opal$skip);

      def.opal$ulist = function(node) {
        var opal$a, opal$b, TMP_15, opal$c, TMP_16, self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;
        result = [];
        if (node.opal$style()['opal$==']("bibliography")) {
          result['opal$<<']("<bibliodiv" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">");
          if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
            result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
          (opal$a = (opal$b = node.opal$items()).opal$each, opal$a._p = (TMP_15 = function(item){var self = TMP_15._s || this, opal$a;if (item == null) item = nil;
          result['opal$<<']("<bibliomixed>");
            result['opal$<<']("<bibliomisc>" + (item.opal$text()) + "</bibliomisc>");
            if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
              result['opal$<<'](item.opal$content())};
            return result['opal$<<']("</bibliomixed>");}, TMP_15._s = self, TMP_15), opal$a).call(opal$b);
          result['opal$<<']("</bibliodiv>");
          } else {
          mark_type = (function() {if ((opal$a = (checklist = node['opal$option?']("checklist"))) !== false && opal$a !== nil) {
            return "none"
            } else {
            return node.opal$style()
          }; return nil; })();
          mark_attribute = (function() {if (mark_type !== false && mark_type !== nil) {
            return " mark=\"" + (mark_type) + "\""
            } else {
            return nil
          }; return nil; })();
          result['opal$<<']("<itemizedlist" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + (mark_attribute) + ">");
          if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
            result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
          (opal$a = (opal$c = node.opal$items()).opal$each, opal$a._p = (TMP_16 = function(item){var self = TMP_16._s || this, opal$a, opal$b, text_marker = nil;if (item == null) item = nil;
          text_marker = (function() {if ((opal$a = ((opal$b = checklist !== false && checklist !== nil) ? (item['opal$attr?']("checkbox")) : opal$b)) !== false && opal$a !== nil) {
              if ((opal$a = (item['opal$attr?']("checked"))) !== false && opal$a !== nil) {
                return "&#10003; "
                } else {
                return "&#10063; "
              }
              } else {
              return nil
            }; return nil; })();
            result['opal$<<']("<listitem>");
            result['opal$<<']("<simpara>" + (text_marker) + (item.opal$text()) + "</simpara>");
            if ((opal$a = item['opal$blocks?']()) !== false && opal$a !== nil) {
              result['opal$<<'](item.opal$content())};
            return result['opal$<<']("</listitem>");}, TMP_16._s = self, TMP_16), opal$a).call(opal$c);
          result['opal$<<']("</itemizedlist>");
        };
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$verse = function(node) {
        var opal$a, opal$b, self = this, result = nil;
        result = [];
        result['opal$<<']("<blockquote" + (self.opal$common_attributes(node.opal$id(), node.opal$role(), node.opal$reftext())) + ">");
        if ((opal$a = node['opal$title?']()) !== false && opal$a !== nil) {
          result['opal$<<']("<title>" + (node.opal$title()) + "</title>")};
        if ((opal$a = (((opal$b = (node['opal$attr?']("attribution"))) !== false && opal$b !== nil) ? opal$b : (node['opal$attr?']("citetitle")))) !== false && opal$a !== nil) {
          result['opal$<<']("<attribution>");
          if ((opal$a = node['opal$attr?']("attribution")) !== false && opal$a !== nil) {
            result['opal$<<']((node.opal$attr("attribution")))};
          if ((opal$a = node['opal$attr?']("citetitle")) !== false && opal$a !== nil) {
            result['opal$<<']("<citetitle>" + (node.opal$attr("citetitle")) + "</citetitle>")};
          result['opal$<<']("</attribution>");};
        result['opal$<<']("<literallayout>" + (node.opal$content()) + "</literallayout>");
        result['opal$<<']("</blockquote>");
        return result['opal$*'](opal$scope.EOL);
      };

      opal$opal.defn(self, 'opal$video', def.opal$skip);

      def.opal$inline_anchor = function(node) {
        var opal$a, self = this, opal$case = nil, linkend = nil, text = nil;
        return (function() {opal$case = node.opal$type();if ("ref"['opal$==='](opal$case)) {return "<anchor" + (self.opal$common_attributes(node.opal$target(), nil, node.opal$text())) + "/>"}else if ("xref"['opal$==='](opal$case)) {if ((opal$a = node['opal$attr?']("path", nil)) !== false && opal$a !== nil) {
          linkend = (((opal$a = (node.opal$attr("fragment"))) !== false && opal$a !== nil) ? opal$a : node.opal$target());
          if ((opal$a = (text = node.opal$text())) !== false && opal$a !== nil) {
            return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "<xref linkend=\"" + (linkend) + "\"/>"
          };
          } else {
          return "<link xlink:href=\"" + (self.opal$target()) + "\">" + ((((opal$a = node.opal$text()) !== false && opal$a !== nil) ? opal$a : (node.opal$attr("path")))) + "</link>"
        }}else if ("link"['opal$==='](opal$case)) {return "<link xlink:href=\"" + (node.opal$target()) + "\">" + (node.opal$text()) + "</link>"}else if ("bibref"['opal$==='](opal$case)) {return "<anchor" + (self.opal$common_attributes(self.opal$target(), nil, "[" + (node.opal$target()) + "]")) + "/>[" + (node.opal$target()) + "]"}else {return self.opal$warn("asciidoctor: WARNING: unknown anchor type: " + (node.opal$type().opal$inspect()))}})();
      };

      def.opal$inline_break = function(node) {
        var self = this;
        return "" + (node.opal$text()) + "<?asciidoc-br?>";
      };

      def.opal$inline_button = function(node) {
        var self = this;
        return "<guibutton>" + (node.opal$text()) + "</guibutton>";
      };

      def.opal$inline_callout = function(node) {
        var self = this;
        return "<co" + (self.opal$common_attributes(node.opal$id())) + "/>";
      };

      def.opal$inline_footnote = function(node) {
        var self = this;
        if (node.opal$type()['opal$==']("xref")) {
          return "<footnoteref linkend=\"" + (node.opal$target()) + "\"/>"
          } else {
          return "<footnote" + (self.opal$common_attributes(node.opal$id())) + "><simpara>" + (node.opal$text()) + "</simpara></footnote>"
        };
      };

      def.opal$inline_image = function(node) {
        var opal$a, self = this, width_attribute = nil, depth_attribute = nil;
        width_attribute = (function() {if ((opal$a = (node['opal$attr?']("width"))) !== false && opal$a !== nil) {
          return " contentwidth=\"" + (node.opal$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        depth_attribute = (function() {if ((opal$a = (node['opal$attr?']("height"))) !== false && opal$a !== nil) {
          return " contentdepth=\"" + (node.opal$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<inlinemediaobject>\n<imageobject>\n<imagedata fileref=\"" + ((function() {if (node.opal$type()['opal$==']("icon")) {
          return (node.opal$icon_uri(node.opal$target()))
          } else {
          return (node.opal$image_uri(node.opal$target()))
        }; return nil; })()) + "\"" + (width_attribute) + (depth_attribute) + "/>\n</imageobject>\n<textobject><phrase>" + (node.opal$attr("alt")) + "</phrase></textobject>\n</inlinemediaobject>";
      };

      def.opal$inline_indexterm = function(node) {
        var self = this, terms = nil, result = nil, numterms = nil;
        if (node.opal$type()['opal$==']("visible")) {
          return "<indexterm><primary>" + (node.opal$text()) + "</primary></indexterm>" + (node.opal$text())
          } else {
          terms = node.opal$attr("terms");
          result = [];
          if (((numterms = terms.opal$size()))['opal$>'](2)) {
            result['opal$<<']("<indexterm>\n<primary>" + (terms['opal$[]'](0)) + "</primary><secondary>" + (terms['opal$[]'](1)) + "</secondary><tertiary>" + (terms['opal$[]'](2)) + "</tertiary>\n</indexterm>")};
          if (numterms['opal$>'](1)) {
            result['opal$<<']("<indexterm>\n<primary>" + (terms['opal$[]'](-2)) + "</primary><secondary>" + (terms['opal$[]'](-1)) + "</secondary>\n</indexterm>")};
          result['opal$<<']("<indexterm>\n<primary>" + (terms['opal$[]'](-1)) + "</primary>\n</indexterm>");
          return result['opal$*'](opal$scope.EOL);
        };
      };

      def.opal$inline_kbd = function(node) {
        var opal$a, opal$b, TMP_17, self = this, keys = nil, key_combo = nil;
        if (((keys = node.opal$attr("keys"))).opal$size()['opal$=='](1)) {
          return "<keycap>" + (keys['opal$[]'](0)) + "</keycap>"
          } else {
          key_combo = (opal$a = (opal$b = keys).opal$map, opal$a._p = (TMP_17 = function(key){var self = TMP_17._s || this;if (key == null) key = nil;
          return "<keycap>" + (key) + "</keycap>"}, TMP_17._s = self, TMP_17), opal$a).call(opal$b).opal$join();
          return "<keycombo>" + (key_combo) + "</keycombo>";
        };
      };

      def.opal$inline_menu = function(node) {
        var opal$a, opal$b, TMP_18, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;
        menu = node.opal$attr("menu");
        if ((opal$a = (opal$b = ((submenus = node.opal$attr("submenus")))['opal$empty?'](), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          submenu_path = (opal$a = (opal$b = submenus).opal$map, opal$a._p = (TMP_18 = function(submenu){var self = TMP_18._s || this;if (submenu == null) submenu = nil;
          return "<guisubmenu>" + (submenu) + "</guisubmenu> "}, TMP_18._s = self, TMP_18), opal$a).call(opal$b).opal$join().opal$chop();
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> " + (submenu_path) + " <guimenuitem>" + (node.opal$attr("menuitem")) + "</guimenuitem></menuchoice>";
        } else if ((opal$a = (menuitem = node.opal$attr("menuitem"))) !== false && opal$a !== nil) {
          return "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
          } else {
          return "<guimenu>" + (menu) + "</guimenu>"
        };
      };

      opal$opal.cdecl(opal$scope, 'QUOTED_TAGS', opal$hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single"], {"emphasis": ["<emphasis>", "</emphasis>"], "strong": ["<emphasis role=\"strong\">", "</emphasis>"], "monospaced": ["<literal>", "</literal>"], "superscript": ["<superscript>", "</superscript>"], "subscript": ["<subscript>", "</subscript>"], "double": ["&#8220;", "&#8221;"], "single": ["&#8216;", "&#8217;"]}));

      opal$scope.QUOTED_TAGS['opal$default=']([nil, nil]);

      def.opal$inline_quoted = function(node) {
        var opal$a, self = this, type = nil, open = nil, close = nil, text = nil, quoted_text = nil, role = nil;
        if (((type = node.opal$type()))['opal$==']("latexmath")) {
          return "<inlineequation>\n<alt><![CDATA[" + (node.opal$text()) + "]]></alt>\n<inlinemediaobject><textobject><phrase><![CDATA[" + (node.opal$text()) + "]]></phrase></textobject></inlinemediaobject>\n</inlineequation>"
          } else {
          opal$a = opal$opal.to_ary(opal$scope.QUOTED_TAGS['opal$[]'](type)), open = (opal$a[0] == null ? nil : opal$a[0]), close = (opal$a[1] == null ? nil : opal$a[1]);
          text = node.opal$text();
          quoted_text = (function() {if ((opal$a = (role = node.opal$role())) !== false && opal$a !== nil) {
            return "" + (open) + "<phrase role=\"" + (role) + "\">" + (text) + "</phrase>" + (close)
            } else {
            return "" + (open) + (text) + (close)
          }; return nil; })();
          if ((opal$a = node.opal$id()) !== false && opal$a !== nil) {
            return "<anchor" + (self.opal$common_attributes(node.opal$id(), nil, text)) + "/>" + (quoted_text)
            } else {
            return quoted_text
          };
        };
      };

      def.opal$author_element = function(doc, index) {
        var opal$a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;
        if (index == null) {
          index = nil
        }
        firstname_key = (function() {if (index !== false && index !== nil) {
          return "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil) {
          return "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil) {
          return "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil) {
          return "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['opal$<<']("<author>");
        result['opal$<<']("<personname>");
        if ((opal$a = doc['opal$attr?'](firstname_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<firstname>" + (doc.opal$attr(firstname_key)) + "</firstname>")};
        if ((opal$a = doc['opal$attr?'](middlename_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<othername>" + (doc.opal$attr(middlename_key)) + "</othername>")};
        if ((opal$a = doc['opal$attr?'](lastname_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<surname>" + (doc.opal$attr(lastname_key)) + "</surname>")};
        result['opal$<<']("</personname>");
        if ((opal$a = doc['opal$attr?'](email_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<email>" + (doc.opal$attr(email_key)) + "</email>")};
        result['opal$<<']("</author>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$common_attributes = function(id, role, reftext) {
        var self = this, res = nil;
        if (role == null) {
          role = nil
        }
        if (reftext == null) {
          reftext = nil
        }
        res = (function() {if (id !== false && id !== nil) {
          return " xml:id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      };

      def.opal$doctype_declaration = function(root_tag_name) {
        var self = this;
        return "";
      };

      def.opal$document_info_element = function(doc, info_tag_prefix, use_info_tag_prefix) {
        var opal$a, opal$b, TMP_19, opal$c, opal$d, self = this, result = nil, authorcount = nil, header_docinfo = nil;
        if (use_info_tag_prefix == null) {
          use_info_tag_prefix = false
        }
        if ((opal$a = use_info_tag_prefix) === false || opal$a === nil) {
          info_tag_prefix = ""};
        result = [];
        result['opal$<<']("<" + (info_tag_prefix) + "info>");
        if ((opal$a = doc.opal$notitle()) === false || opal$a === nil) {
          result['opal$<<'](((function() {if ((opal$a = doc['opal$header?']()) !== false && opal$a !== nil) {
            return (self.opal$document_title_tags(doc.opal$header().opal$title()))
            } else {
            return "<title>" + (doc.opal$attr("untitled-label")) + "</title>"
          }; return nil; })()))};
        result['opal$<<']("<date>" + ((function() {if ((opal$a = (doc['opal$attr?']("revdate"))) !== false && opal$a !== nil) {
          return (doc.opal$attr("revdate"))
          } else {
          return (doc.opal$attr("docdate"))
        }; return nil; })()) + "</date>");
        if ((opal$a = doc['opal$has_header?']()) !== false && opal$a !== nil) {
          if ((opal$a = doc['opal$attr?']("author")) !== false && opal$a !== nil) {
            if (((authorcount = (doc.opal$attr("authorcount")).opal$to_i()))['opal$<'](2)) {
              result['opal$<<']((self.opal$author_element(doc)));
              if ((opal$a = doc['opal$attr?']("authorinitials")) !== false && opal$a !== nil) {
                result['opal$<<']("<authorinitials>" + (doc.opal$attr("authorinitials")) + "</authorinitials>")};
              } else {
              result['opal$<<']("<authorgroup>");
              (opal$a = (opal$b = authorcount).opal$times, opal$a._p = (TMP_19 = function(index){var self = TMP_19._s || this;if (index == null) index = nil;
              return result['opal$<<']((self.opal$author_element(doc, index['opal$+'](1))))}, TMP_19._s = self, TMP_19), opal$a).call(opal$b);
              result['opal$<<']("</authorgroup>");
            }};
          if ((opal$a = (opal$c = (doc['opal$attr?']("revdate")), opal$c !== false && opal$c !== nil ?((((opal$d = (doc['opal$attr?']("revnumber"))) !== false && opal$d !== nil) ? opal$d : (doc['opal$attr?']("revremark")))) : opal$c)) !== false && opal$a !== nil) {
            result['opal$<<']("<revhistory>\n<revision>");
            if ((opal$a = doc['opal$attr?']("revnumber")) !== false && opal$a !== nil) {
              result['opal$<<']("<revnumber>" + (doc.opal$attr("revnumber")) + "</revnumber>")};
            if ((opal$a = doc['opal$attr?']("revdate")) !== false && opal$a !== nil) {
              result['opal$<<']("<date>" + (doc.opal$attr("revdate")) + "</date>")};
            if ((opal$a = doc['opal$attr?']("authorinitials")) !== false && opal$a !== nil) {
              result['opal$<<']("<authorinitials>" + (doc.opal$attr("authorinitials")) + "</authorinitials>")};
            if ((opal$a = doc['opal$attr?']("revremark")) !== false && opal$a !== nil) {
              result['opal$<<']("<revremark>" + (doc.opal$attr("revremark")) + "</revremark>")};
            result['opal$<<']("</revision>\n</revhistory>");};
          if ((opal$a = ((header_docinfo = doc.opal$docinfo("header")))['opal$empty?']()) === false || opal$a === nil) {
            result['opal$<<'](header_docinfo)};
          if ((opal$a = doc['opal$attr?']("orgname")) !== false && opal$a !== nil) {
            result['opal$<<']("<orgname>" + (doc.opal$attr("orgname")) + "</orgname>")};};
        result['opal$<<']("</" + (info_tag_prefix) + "info>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$document_ns_attributes = function(doc) {
        var self = this;
        return " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"5.0\"";
      };

      def.opal$document_title_tags = function(title) {
        var opal$a, self = this, _ = nil, subtitle = nil;
        if ((opal$a = title['opal$include?'](": ")) !== false && opal$a !== nil) {
          opal$a = opal$opal.to_ary(title.opal$rpartition(": ")), title = (opal$a[0] == null ? nil : opal$a[0]), _ = (opal$a[1] == null ? nil : opal$a[1]), subtitle = (opal$a[2] == null ? nil : opal$a[2]);
          return "<title>" + (title) + "</title>\n<subtitle>" + (subtitle) + "</subtitle>";
          } else {
          return "<title>" + (title) + "</title>"
        };
      };

      def.opal$resolve_content = function(node) {
        var self = this;
        if (node.opal$content_model()['opal$==']("compound")) {
          return node.opal$content()
          } else {
          return "<simpara>" + (node.opal$content()) + "</simpara>"
        };
      };

      return (def.opal$title_tag = function(node, optional) {
        var opal$a, opal$b, opal$c, self = this;
        if (optional == null) {
          optional = true
        }
        if ((opal$a = (((opal$b = (opal$c = optional, (opal$c === nil || opal$c === false))) !== false && opal$b !== nil) ? opal$b : node['opal$title?']())) !== false && opal$a !== nil) {
          return "<title>" + (node.opal$title()) + "</title>\n"
          } else {
          return nil
        };
      }, nil);
    })(opal$scope.Converter, (opal$scope.Converter)._scope.BuiltIn)
    
  })(self)
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass;
  ;
  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;
    (function(opal$base, opal$super) {
      function opal$DocBook45Converter(){};
      var self = opal$DocBook45Converter = opal$klass(opal$base, opal$super, 'DocBook45Converter', opal$DocBook45Converter);

      var def = opal$DocBook45Converter._proto, opal$scope = opal$DocBook45Converter._scope, TMP_1;
      def.opal$inline_anchor = function(node) {
        var opal$a, self = this, target = nil, opal$case = nil, linkend = nil, text = nil;
        target = node.opal$target();
        return (function() {opal$case = node.opal$type();if ("ref"['opal$==='](opal$case)) {return "<anchor" + (self.opal$common_attributes(target, nil, node.opal$text())) + "/>"}else if ("xref"['opal$==='](opal$case)) {if ((opal$a = node['opal$attr?']("path", nil)) !== false && opal$a !== nil) {
          linkend = (((opal$a = (node.opal$attr("fragment"))) !== false && opal$a !== nil) ? opal$a : target);
          if ((opal$a = (text = node.opal$text())) !== false && opal$a !== nil) {
            return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
            } else {
            return "<xref linkend=\"" + (linkend) + "\"/>"
          };
          } else {
          text = (((opal$a = node.opal$text()) !== false && opal$a !== nil) ? opal$a : (node.opal$attr("path")));
          return "<ulink url=\"" + (target) + "\">" + (text) + "</ulink>";
        }}else if ("link"['opal$==='](opal$case)) {return "<ulink url=\"" + (target) + "\">" + (node.opal$text()) + "</ulink>"}else if ("bibref"['opal$==='](opal$case)) {return "<anchor" + (self.opal$common_attributes(target, nil, "[" + (target) + "]")) + "/>[" + (target) + "]"}else { return nil }})();
      };

      def.opal$author_element = function(doc, index) {
        var opal$a, self = this, firstname_key = nil, middlename_key = nil, lastname_key = nil, email_key = nil, result = nil;
        if (index == null) {
          index = nil
        }
        firstname_key = (function() {if (index !== false && index !== nil) {
          return "firstname_" + (index)
          } else {
          return "firstname"
        }; return nil; })();
        middlename_key = (function() {if (index !== false && index !== nil) {
          return "middlename_" + (index)
          } else {
          return "middlename"
        }; return nil; })();
        lastname_key = (function() {if (index !== false && index !== nil) {
          return "lastname_" + (index)
          } else {
          return "lastname"
        }; return nil; })();
        email_key = (function() {if (index !== false && index !== nil) {
          return "email_" + (index)
          } else {
          return "email"
        }; return nil; })();
        result = [];
        result['opal$<<']("<author>");
        if ((opal$a = doc['opal$attr?'](firstname_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<firstname>" + (doc.opal$attr(firstname_key)) + "</firstname>")};
        if ((opal$a = doc['opal$attr?'](middlename_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<othername>" + (doc.opal$attr(middlename_key)) + "</othername>")};
        if ((opal$a = doc['opal$attr?'](lastname_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<surname>" + (doc.opal$attr(lastname_key)) + "</surname>")};
        if ((opal$a = doc['opal$attr?'](email_key)) !== false && opal$a !== nil) {
          result['opal$<<']("<email>" + (doc.opal$attr(email_key)) + "</email>")};
        result['opal$<<']("</author>");
        return result['opal$*'](opal$scope.EOL);
      };

      def.opal$common_attributes = function(id, role, reftext) {
        var self = this, res = nil;
        if (role == null) {
          role = nil
        }
        if (reftext == null) {
          reftext = nil
        }
        res = (function() {if (id !== false && id !== nil) {
          return " id=\"" + (id) + "\""
          } else {
          return ""
        }; return nil; })();
        if (role !== false && role !== nil) {
          res = "" + (res) + " role=\"" + (role) + "\""};
        if (reftext !== false && reftext !== nil) {
          res = "" + (res) + " xreflabel=\"" + (reftext) + "\""};
        return res;
      };

      def.opal$doctype_declaration = function(root_tag_name) {
        var self = this;
        return "<!DOCTYPE " + (root_tag_name) + " PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">";
      };

      def.opal$document_info_element = TMP_1 = function(doc, info_tag_prefix) {
        var self = this, opal$iter = TMP_1._p, opal$yield = opal$iter || nil;
        TMP_1._p = null;
        return opal$opal.find_super_dispatcher(self, 'document_info_element', TMP_1, null).apply(self, [doc, info_tag_prefix, true]);
      };

      return (def.opal$document_ns_attributes = function(doc) {
        var opal$a, self = this;
        if ((opal$a = (doc['opal$attr?']("noxmlns"))) !== false && opal$a !== nil) {
          return nil
          } else {
          return " xmlns=\"http://docbook.org/ns/docbook\""
        };
      }, nil);
    })(opal$scope.Converter, (opal$scope.Converter)._scope.DocBook5Converter)
    
  })(self);
})(Opal);
/* Generated by Opal 0.5.5 */
(function(opal$opal) {
  var opal$a, opal$b, self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$gvars = opal$opal.gvars, opal$module = opal$opal.module, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range;
  if ((opal$a = (opal$scope.RUBY_ENGINE != null)) === false || opal$a === nil) {
    opal$opal.cdecl(opal$scope, 'RUBY_ENGINE', "unknown")};
  opal$opal.cdecl(opal$scope, 'RUBY_ENGINE_OPAL', (opal$scope.RUBY_ENGINE['opal$==']("opal")));
  opal$opal.cdecl(opal$scope, 'RUBY_ENGINE_JRUBY', (opal$scope.RUBY_ENGINE['opal$==']("jruby")));
  opal$opal.cdecl(opal$scope, 'RUBY_MIN_VERSION_1_9', (opal$scope.RUBY_VERSION['opal$>=']("1.9")));
  ;
  if ((opal$a = opal$scope.RUBY_ENGINE_OPAL) !== false && opal$a !== nil) {
    ;
    ;
    ;
    ;};
  opal$gvars[":"].opal$unshift(opal$scope.File.opal$dirname("asciidoctor"));
  (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope, opal$a, opal$b, opal$c, TMP_1;
    if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) === false || opal$a === nil) {
      ;

      ;

      ;

      ;};

    (function(opal$base) {
      var self = opal$module(opal$base, 'SafeMode');

      var def = self._proto, opal$scope = self._scope;
      opal$opal.cdecl(opal$scope, 'UNSAFE', 0);

      opal$opal.cdecl(opal$scope, 'SAFE', 1);

      opal$opal.cdecl(opal$scope, 'SERVER', 10);

      opal$opal.cdecl(opal$scope, 'SECURE', 20);
      
    })(self);

    (function(opal$base) {
      var self = opal$module(opal$base, 'Compliance');

      var def = self._proto, opal$scope = self._scope;
      self.keys = [].opal$to_set();

      (function(self) {
        var opal$scope = self._scope, def = self._proto;
        return self.opal$attr("keys")
      })(self.opal$singleton_class());

      opal$opal.defs(self, 'opal$define', function(key, value) {
        var opal$a, opal$b, self = this;
        if (self.keys == null) self.keys = nil;

        if ((opal$a = (((opal$b = key['opal$==']("keys")) !== false && opal$b !== nil) ? opal$b : (self['opal$respond_to?'](key)))) !== false && opal$a !== nil) {
          self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a), "Illegal key name: " + (key))};
        self.opal$instance_variable_set("@" + (key), value);
        (function(self) {
          var opal$scope = self._scope, def = self._proto;
          return self
        })(self.opal$singleton_class()).opal$send("attr_accessor", key);
        return self.keys['opal$<<'](key);
      });

      self.opal$define("block_terminates_paragraph", true);

      self.opal$define("strict_verbatim_paragraphs", true);

      self.opal$define("underline_style_section_titles", true);

      self.opal$define("unwrap_standalone_preamble", true);

      self.opal$define("attribute_missing", "skip");

      self.opal$define("attribute_undefined", "drop-line");

      self.opal$define("markdown_syntax", true);
      
    })(self);

    opal$opal.cdecl(opal$scope, 'ROOT_PATH', ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path("asciidoctor"))));

    opal$opal.cdecl(opal$scope, 'LIB_PATH', ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$join(opal$scope.ROOT_PATH, "lib"));

    opal$opal.cdecl(opal$scope, 'DATA_PATH', ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$join(opal$scope.ROOT_PATH, "data"));

    opal$opal.cdecl(opal$scope, 'USER_HOME', (function() {try {return ((opal$a = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$a).opal$home() } catch (opal$err) { return (((opal$a = ((opal$b = opal$opal.Object._scope.ENV) == null ? opal$opal.cm('ENV') : opal$b)['opal$[]']("HOME")) !== false && opal$a !== nil) ? opal$a : ((opal$b = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$b).opal$pwd()) }})());

    opal$opal.cdecl(opal$scope, 'COERCE_ENCODING', (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c), (opal$b === nil || opal$b === false)), opal$a !== false && opal$a !== nil ?((opal$b = opal$opal.Object._scope.RUBY_MIN_VERSION_1_9) == null ? opal$opal.cm('RUBY_MIN_VERSION_1_9') : opal$b) : opal$a));

    opal$opal.cdecl(opal$scope, 'FORCE_ENCODING', (opal$a = opal$scope.COERCE_ENCODING, opal$a !== false && opal$a !== nil ?(opal$b = ((opal$c = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$c).opal$default_external()['opal$==']((((opal$c = opal$opal.Object._scope.Encoding) == null ? opal$opal.cm('Encoding') : opal$c))._scope.UTF_8), (opal$b === nil || opal$b === false)) : opal$a));

    opal$opal.cdecl(opal$scope, 'BOM_BYTES_UTF_8', "xefxbbxbf".opal$bytes().opal$to_a());

    opal$opal.cdecl(opal$scope, 'BOM_BYTES_UTF_16LE', "xffxfe".opal$bytes().opal$to_a());

    opal$opal.cdecl(opal$scope, 'BOM_BYTES_UTF_16BE', "xfexff".opal$bytes().opal$to_a());

    opal$opal.cdecl(opal$scope, 'FORCE_UNICODE_LINE_LENGTH', (opal$a = ((opal$b = opal$opal.Object._scope.RUBY_MIN_VERSION_1_9) == null ? opal$opal.cm('RUBY_MIN_VERSION_1_9') : opal$b), (opal$a === nil || opal$a === false)));

    opal$opal.cdecl(opal$scope, 'SUPPORTS_GSUB_RESULT_HASH', (opal$a = ((opal$b = opal$opal.Object._scope.RUBY_MIN_VERSION_1_9) == null ? opal$opal.cm('RUBY_MIN_VERSION_1_9') : opal$b), opal$a !== false && opal$a !== nil ?(opal$b = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c), (opal$b === nil || opal$b === false)) : opal$a));

    opal$opal.cdecl(opal$scope, 'EOL', "\n");

    opal$opal.cdecl(opal$scope, 'NULL', (function() {if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
      return (0).opal$chr()
      } else {
      return "0"
    }; return nil; })());

    opal$opal.cdecl(opal$scope, 'TAB', "\t");

    opal$opal.cdecl(opal$scope, 'TAB_PATTERN', /\t/);

    opal$opal.cdecl(opal$scope, 'DEFAULT_DOCTYPE', "article");

    opal$opal.cdecl(opal$scope, 'DEFAULT_BACKEND', "html5");

    opal$opal.cdecl(opal$scope, 'DEFAULT_STYLESHEET_KEYS', ["", "DEFAULT"].opal$to_set());

    opal$opal.cdecl(opal$scope, 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");

    opal$opal.cdecl(opal$scope, 'BACKEND_ALIASES', opal$hash2(["html", "docbook"], {"html": "html5", "docbook": "docbook5"}));

    opal$opal.cdecl(opal$scope, 'DEFAULT_PAGE_WIDTHS', opal$hash2(["docbook"], {"docbook": 425}));

    opal$opal.cdecl(opal$scope, 'DEFAULT_EXTENSIONS', opal$hash2(["html", "docbook", "pdf", "epub", "asciidoc"], {"html": ".html", "docbook": ".xml", "pdf": ".pdf", "epub": ".epub", "asciidoc": ".adoc"}));

    opal$opal.cdecl(opal$scope, 'ASCIIDOC_EXTENSIONS', opal$hash2([".asciidoc", ".adoc", ".ad", ".asc", ".txt"], {".asciidoc": true, ".adoc": true, ".ad": true, ".asc": true, ".txt": true}));

    opal$opal.cdecl(opal$scope, 'SECTION_LEVELS', opal$hash2(["=", "-", "~", "^", "+"], {"=": 0, "-": 1, "~": 2, "^": 3, "+": 4}));

    opal$opal.cdecl(opal$scope, 'ADMONITION_STYLES', ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].opal$to_set());

    opal$opal.cdecl(opal$scope, 'PARAGRAPH_STYLES', ["comment", "example", "literal", "listing", "normal", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].opal$to_set());

    opal$opal.cdecl(opal$scope, 'VERBATIM_STYLES', ["literal", "listing", "source", "verse"].opal$to_set());

    opal$opal.cdecl(opal$scope, 'DELIMITED_BLOCKS', opal$hash2(["--", "----", "....", "====", "****", "____", "\"\"", "++++", "|===", ",===", ":===", "!===", "////", "```", "~~~"], {"--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].opal$to_set()], "----": ["listing", ["literal", "source"].opal$to_set()], "....": ["literal", ["listing", "source"].opal$to_set()], "====": ["example", ["admonition"].opal$to_set()], "****": ["sidebar", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], "____": ["quote", ["verse"].opal$to_set()], "\"\"": ["quote", ["verse"].opal$to_set()], "++++": ["pass", ["math", "latexmath", "asciimath"].opal$to_set()], "|===": ["table", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], ",===": ["table", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], ":===": ["table", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], "!===": ["table", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], "////": ["comment", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], "```": ["fenced_code", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()], "~~~": ["fenced_code", ((opal$a = opal$opal.Object._scope.Set) == null ? opal$opal.cm('Set') : opal$a).opal$new()]}));

    opal$opal.cdecl(opal$scope, 'DELIMITED_BLOCK_LEADERS', (opal$a = (opal$b = opal$scope.DELIMITED_BLOCKS.opal$keys()).opal$map, opal$a._p = (TMP_1 = function(key){var self = TMP_1._s || this;if (key == null) key = nil;
    return key['opal$[]'](opal$range(0, 1, false))}, TMP_1._s = self, TMP_1), opal$a).call(opal$b).opal$to_set());

    opal$opal.cdecl(opal$scope, 'LAYOUT_BREAK_LINES', opal$hash2(["'", "-", "*", "_", "<"], {"'": "thematic_break", "-": "thematic_break", "*": "thematic_break", "_": "thematic_break", "<": "page_break"}));

    opal$opal.cdecl(opal$scope, 'NESTABLE_LIST_CONTEXTS', ["ulist", "olist", "dlist"]);

    opal$opal.cdecl(opal$scope, 'ORDERED_LIST_STYLES', ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]);

    opal$opal.cdecl(opal$scope, 'ORDERED_LIST_KEYWORDS', opal$hash2(["loweralpha", "lowerroman", "upperalpha", "upperroman"], {"loweralpha": "a", "lowerroman": "i", "upperalpha": "A", "upperroman": "I"}));

    opal$opal.cdecl(opal$scope, 'LIST_CONTINUATION', "+");

    opal$opal.cdecl(opal$scope, 'LINE_BREAK', " +");

    opal$opal.cdecl(opal$scope, 'BLOCK_MATH_DELIMITERS', opal$hash2(["asciimath", "latexmath"], {"asciimath": ["\\opal$", "\\opal$"], "latexmath": ["\\[", "\\]"]}));

    opal$opal.cdecl(opal$scope, 'INLINE_MATH_DELIMITERS', opal$hash2(["asciimath", "latexmath"], {"asciimath": ["\\opal$", "\\opal$"], "latexmath": ["\\(", "\\)"]}));

    opal$opal.cdecl(opal$scope, 'FLEXIBLE_ATTRIBUTES', ["numbered"]);

    if ((opal$a = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c)) !== false && opal$a !== nil) {
      opal$opal.cdecl(opal$scope, 'CC_ALPHA', "a-zA-Z");

      opal$opal.cdecl(opal$scope, 'CC_ALNUM', "a-zA-Z0-9");

      opal$opal.cdecl(opal$scope, 'CC_BLANK', "[ \\t]");

      opal$opal.cdecl(opal$scope, 'CC_GRAPH', "[x21-x7E]");

      opal$opal.cdecl(opal$scope, 'CC_EOL', "(?=\\n|opal$)");
      } else {
      opal$opal.cdecl(opal$scope, 'CC_ALPHA', "[:alpha:]");

      opal$opal.cdecl(opal$scope, 'CC_ALNUM', "[:alnum:]");

      opal$opal.cdecl(opal$scope, 'CC_BLANK', "[[:blank:]]");

      opal$opal.cdecl(opal$scope, 'CC_GRAPH', "[[:graph:]]");

      opal$opal.cdecl(opal$scope, 'CC_EOL', "opal$");
    };

    opal$opal.cdecl(opal$scope, 'AuthorInfoLineRx', /^(\w[\w\-'.]*)(?: +(\w[\w\-'.]*))?(?: +(\w[\w\-'.]*))?(?: +<([^>]+)>)?opal$/);

    opal$opal.cdecl(opal$scope, 'RevisionInfoLineRx', /^(?:\D*(.*?),)?(?:\s*(?!:)(.*?))(?:\s*(?!^):\s*(.*))?opal$/);

    opal$opal.cdecl(opal$scope, 'ManpageTitleVolnumRx', /^(.*)\((.*)\)opal$/);

    opal$opal.cdecl(opal$scope, 'ManpageNamePurposeRx', (new RegExp("^(.*?)" + opal$scope.CC_BLANK + "+-" + opal$scope.CC_BLANK + "+(.*)opal$")));

    opal$opal.cdecl(opal$scope, 'ConditionalDirectiveRx', /^\\?(ifdef|ifndef|ifeval|endif)::(\S*?(?:([,\+])\S+?)?)\[(.+)?\]opal$/);

    opal$opal.cdecl(opal$scope, 'EvalExpressionRx', (new RegExp("^(\\S.*?)" + opal$scope.CC_BLANK + "*(==|!=|<=|>=|<|>)" + opal$scope.CC_BLANK + "*(\\S.*)opal$")));

    opal$opal.cdecl(opal$scope, 'IncludeDirectiveRx', /^\\?include::([^\[]+)\[(.*?)\]opal$/);

    opal$opal.cdecl(opal$scope, 'AttributeEntryRx', (new RegExp("^:(!?\\w.*?):(?:" + opal$scope.CC_BLANK + "+(.*))?opal$")));

    opal$opal.cdecl(opal$scope, 'InvalidAttributeNameCharsRx', /[^\w\-]/);

    opal$opal.cdecl(opal$scope, 'AttributeEntryPassMacroRx', /^pass:([a-z,]*)\[(.*)\]opal$/);

    opal$opal.cdecl(opal$scope, 'AttributeReferenceRx', /(\\)?\{((set|counter2?):.+?|\w+(?:[\-]\w+)*)(\\)?\}/);

    opal$opal.cdecl(opal$scope, 'BlockAnchorRx', (new RegExp("^\\[\\[(?:|([" + opal$scope.CC_ALPHA + ":_][\\w:.-]*)(?:," + opal$scope.CC_BLANK + "*(\\S.*))?)\\]\\]opal$")));

    opal$opal.cdecl(opal$scope, 'BlockAttributeListRx', (new RegExp("^\\[(|" + opal$scope.CC_BLANK + "*[\\w\\{,.#\"'%].*)\\]opal$")));

    opal$opal.cdecl(opal$scope, 'BlockAttributeLineRx', (new RegExp("^\\[(|" + opal$scope.CC_BLANK + "*[\\w\\{,.#\"'%].*|\\[(?:|[" + opal$scope.CC_ALPHA + ":_][\\w:.-]*(?:," + opal$scope.CC_BLANK + "*\\S.*)?)\\])\\]opal$")));

    opal$opal.cdecl(opal$scope, 'BlockTitleRx', /^\.([^\s.].*)opal$/);

    opal$opal.cdecl(opal$scope, 'AdmonitionParagraphRx', (new RegExp("^(" + opal$scope.ADMONITION_STYLES.opal$to_a()['opal$*']("|") + "):" + opal$scope.CC_BLANK)));

    opal$opal.cdecl(opal$scope, 'LiteralParagraphRx', (new RegExp("^(" + opal$scope.CC_BLANK + "+.*)opal$")));

    opal$opal.cdecl(opal$scope, 'CommentBlockRx', /^\/{4,}opal$/);

    opal$opal.cdecl(opal$scope, 'CommentLineRx', /^\/\/(?:[^\/]|opal$)/);

    opal$opal.cdecl(opal$scope, 'AtxSectionRx', (new RegExp("^((?:=|#){1,6})" + opal$scope.CC_BLANK + "+(\\S.*?)(?:" + opal$scope.CC_BLANK + "+\\1)?opal$")));

    opal$opal.cdecl(opal$scope, 'SetextSectionTitleRx', /^((?=.*\w+.*)[^.].*?)opal$/);

    opal$opal.cdecl(opal$scope, 'SetextSectionLineRx', /^(?:=|-|~|\^|\+)+opal$/);

    opal$opal.cdecl(opal$scope, 'InlineSectionAnchorRx', (new RegExp("^(.*?)" + opal$scope.CC_BLANK + "+(\\\\)?\\[\\[([" + opal$scope.CC_ALPHA + ":_][\\w:.-]*)(?:," + opal$scope.CC_BLANK + "*(\\S.*?))?\\]\\]opal$")));

    opal$opal.cdecl(opal$scope, 'InvalidSectionIdCharsRx', /&(?:[a-zA-Z]{2,}|#\d{2,5}|#x[a-fA-F0-9]{2,4});|\W+?/);

    opal$opal.cdecl(opal$scope, 'FloatingTitleStyleRx', /^(?:float|discrete)\b/);

    opal$opal.cdecl(opal$scope, 'AnyListRx', (new RegExp("^(?:<?\\d+>" + opal$scope.CC_BLANK + "+" + opal$scope.CC_GRAPH + "|" + opal$scope.CC_BLANK + "*(?:-|(?:\\*|\\.){1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + opal$scope.CC_BLANK + "+" + opal$scope.CC_GRAPH + "|" + opal$scope.CC_BLANK + "*.*?(?::{2,4}|;;)(?:" + opal$scope.CC_BLANK + "+" + opal$scope.CC_GRAPH + "|opal$))")));

    opal$opal.cdecl(opal$scope, 'UnorderedListRx', (new RegExp("^" + opal$scope.CC_BLANK + "*(-|\\*{1,5})" + opal$scope.CC_BLANK + "+(.*)opal$")));

    opal$opal.cdecl(opal$scope, 'OrderedListRx', (new RegExp("^" + opal$scope.CC_BLANK + "*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + opal$scope.CC_BLANK + "+(.*)opal$")));

    opal$opal.cdecl(opal$scope, 'OrderedListMarkerRxMap', opal$hash2(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], {"arabic": /\d+[.>]/, "loweralpha": /[a-z]\./, "lowerroman": /[ivx]+\)/, "upperalpha": /[A-Z]\./, "upperroman": /[IVX]+\)/}));

    opal$opal.cdecl(opal$scope, 'DefinitionListRx', (new RegExp("^(?!\\/\\/)" + opal$scope.CC_BLANK + "*(.*?)(:{2,4}|;;)(?:" + opal$scope.CC_BLANK + "+(.*))?opal$")));

    opal$opal.cdecl(opal$scope, 'DefinitionListSiblingRx', opal$hash2(["::", ":::", "::::", ";;"], {"::": (new RegExp("^(?!\\/\\/)" + opal$scope.CC_BLANK + "*((?:.*[^:])?)(::)(?:" + opal$scope.CC_BLANK + "+(.*))?opal$")), ":::": (new RegExp("^(?!\\/\\/)" + opal$scope.CC_BLANK + "*((?:.*[^:])?)(:::)(?:" + opal$scope.CC_BLANK + "+(.*))?opal$")), "::::": (new RegExp("^(?!\\/\\/)" + opal$scope.CC_BLANK + "*((?:.*[^:])?)(::::)(?:" + opal$scope.CC_BLANK + "+(.*))?opal$")), ";;": (new RegExp("^(?!\\/\\/)" + opal$scope.CC_BLANK + "*(.*)(;;)(?:" + opal$scope.CC_BLANK + "+(.*))?opal$"))}));

    opal$opal.cdecl(opal$scope, 'CalloutListRx', (new RegExp("^<?(\\d+)>" + opal$scope.CC_BLANK + "+(.*)")));

    opal$opal.cdecl(opal$scope, 'CalloutConvertRx', (new RegExp("(?:(?:\\/\\/|#|;;) ?)?(\\\\)?&lt;!?(--|)(\\d+)\\2&gt;(?=(?: ?\\\\?&lt;!?\\2\\d+\\2&gt;)*" + opal$scope.CC_EOL + ")")));

    opal$opal.cdecl(opal$scope, 'CalloutQuickScanRx', (new RegExp("\\\\?<!?(--|)(\\d+)\\1>(?=(?: ?\\\\?<!?\\1\\d+\\1>)*" + opal$scope.CC_EOL + ")")));

    opal$opal.cdecl(opal$scope, 'CalloutScanRx', (new RegExp("(?:(?:\\/\\/|#|;;) ?)?(\\\\)?<!?(--|)(\\d+)\\2>(?=(?: ?\\\\?<!?\\2\\d+\\2>)*" + opal$scope.CC_EOL + ")")));

    opal$opal.cdecl(opal$scope, 'ListRxMap', opal$hash2(["ulist", "olist", "dlist", "colist"], {"ulist": opal$scope.UnorderedListRx, "olist": opal$scope.OrderedListRx, "dlist": opal$scope.DefinitionListRx, "colist": opal$scope.CalloutListRx}));

    opal$opal.cdecl(opal$scope, 'ColumnSpecRx', /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?)?([a-z])?opal$/);

    opal$opal.cdecl(opal$scope, 'CellSpecStartRx', (new RegExp("^" + opal$scope.CC_BLANK + "*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?\\|")));

    opal$opal.cdecl(opal$scope, 'CellSpecEndRx', (new RegExp("" + opal$scope.CC_BLANK + "+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?opal$")));

    opal$opal.cdecl(opal$scope, 'GenericBlockMacroRx', /^(\w[\w\-]*)::(\S*?)\[((?:\\\]|[^\]])*?)\]opal$/);

    opal$opal.cdecl(opal$scope, 'MediaBlockMacroRx', /^(image|video|audio)::(\S+?)\[((?:\\\]|[^\]])*?)\]opal$/);

    opal$opal.cdecl(opal$scope, 'TocBlockMacroRx', /^toc::\[(.*?)\]opal$/);

    opal$opal.cdecl(opal$scope, 'InlineAnchorRx', (new RegExp("\\\\?(?:\\[\\[([" + opal$scope.CC_ALPHA + ":_][\\w:.-]*)(?:," + opal$scope.CC_BLANK + "*(\\S.*?))?\\]\\]|anchor:(\\S+)\\[(.*?[^\\\\])?\\])")));

    opal$opal.cdecl(opal$scope, 'InlineBiblioAnchorRx', /\\?\[\[\[([\w:][\w:.-]*?)\]\]\]/);

    opal$opal.cdecl(opal$scope, 'EmailInlineMacroRx', (new RegExp("([\\\\>:\\/])?\\w[\\w.%+-]*@[" + opal$scope.CC_ALNUM + "][" + opal$scope.CC_ALNUM + ".-]*\\.[" + opal$scope.CC_ALPHA + "]{2,4}\\b")));

    opal$opal.cdecl(opal$scope, 'FootnoteInlineMacroRx', /\\?(footnote(?:ref)?):\[(.*?[^\\])\]/i);

    opal$opal.cdecl(opal$scope, 'ImageInlineMacroRx', /\\?(?:image|icon):([^:\[][^\[]*)\[((?:\\\]|[^\]])*?)\]/);

    opal$opal.cdecl(opal$scope, 'IndextermInlineMacroRx', /\\?(?:(indexterm2?):\[(.*?[^\\])\]|\(\((.+?)\)\)(?!\)))/i);

    opal$opal.cdecl(opal$scope, 'KbdBtnInlineMacroRx', /\\?(?:kbd|btn):\[((?:\\\]|[^\]])+?)\]/);

    opal$opal.cdecl(opal$scope, 'KbdDelimiterRx', (new RegExp("(?:\\+|,)(?=" + opal$scope.CC_BLANK + "*[^\\1])")));

    opal$opal.cdecl(opal$scope, 'LinkInlineRx', /(^|link:|&lt;|[\s>\(\)\[\];])(\\?(?:https?|file|ftp|irc):\/\/[^\s\[\]<]*[^\s.,\[\]<])(?:\[((?:\\\]|[^\]])*?)\])?/);

    opal$opal.cdecl(opal$scope, 'LinkInlineMacroRx', /\\?(?:link|mailto):([^\s\[]+)(?:\[((?:\\\]|[^\]])*?)\])/);

    opal$opal.cdecl(opal$scope, 'MathInlineMacroRx', /\\?((?:latex|ascii)?math):([a-z,]*)\[(.*?[^\\])\]/i);

    opal$opal.cdecl(opal$scope, 'MenuInlineMacroRx', (new RegExp("\\\\?menu:(\\w|\\w.*?\\S)\\[" + opal$scope.CC_BLANK + "*(.+?)?\\]")));

    opal$opal.cdecl(opal$scope, 'MenuInlineRx', (new RegExp("\\\\?\"(\\w[^\"]*?" + opal$scope.CC_BLANK + "*&gt;" + opal$scope.CC_BLANK + "*[^\" \\t][^\"]*)\"")));

    opal$opal.cdecl(opal$scope, 'PassInlineLiteralRx', /(^|[^`\w])(?:\[([^\]]+?)\])?(\\?`([^`\s]|[^`\s].*?\S)`)(?![`\w])/i);

    opal$opal.cdecl(opal$scope, 'PassInlineMacroRx', /\\?(?:(\+{3}|opal\${2})(.*?)\1|pass:([a-z,]*)\[(.*?[^\\])\])/i);

    opal$opal.cdecl(opal$scope, 'XrefInlineMacroRx', /\\?(?:&lt;&lt;([\w":].*?)&gt;&gt;|xref:([\w":].*?)\[(.*?)\])/i);

    opal$opal.cdecl(opal$scope, 'LineBreakRx', (function() {if ((opal$a = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c)) !== false && opal$a !== nil) {
      return /^(.*?)[ \t]\+opal$/m;
      } else {
      return /^(.*)[[:blank:]]\+opal$/
    }; return nil; })());

    opal$opal.cdecl(opal$scope, 'LayoutBreakLineRx', /^('|<){3,}opal$/);

    opal$opal.cdecl(opal$scope, 'LayoutBreakLinePlusRx', /^(?:'|<){3,}opal$|^ {0,3}([-\*_])( *)\1\2\1opal$/);

    opal$opal.cdecl(opal$scope, 'BlankLineRx', (new RegExp("^" + opal$scope.CC_BLANK + "*\\n")));

    opal$opal.cdecl(opal$scope, 'DataDelimiterRx', /,|;/);

    opal$opal.cdecl(opal$scope, 'DigitsRx', /^\d+opal$/);

    opal$opal.cdecl(opal$scope, 'DoubleQuotedRx', /^("|)(.*)\1opal$/);

    opal$opal.cdecl(opal$scope, 'DoubleQuotedMultiRx', /^("|)(.*)\1opal$/i);

    opal$opal.cdecl(opal$scope, 'TrailingDigitsRx', /\d+opal$/);

    opal$opal.cdecl(opal$scope, 'EscapedSpaceRx', (new RegExp("\\\\(" + opal$scope.CC_BLANK + ")")));

    opal$opal.cdecl(opal$scope, 'SpaceDelimiterRx', (new RegExp("([^\\\\])" + opal$scope.CC_BLANK + "+")));

    opal$opal.cdecl(opal$scope, 'UriSniffRx', (new RegExp("^[" + opal$scope.CC_ALPHA + "][" + opal$scope.CC_ALNUM + ".+-]*:/{0,2}")));

    opal$opal.cdecl(opal$scope, 'UriTerminator', /[);:]opal$/);

    opal$opal.cdecl(opal$scope, 'XmlSanitizeRx', /<[^>]+>/);

    opal$opal.cdecl(opal$scope, 'INTRINSIC_ATTRIBUTES', opal$hash2(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "apostrophe", "backslash", "backtick", "empty", "sp", "space", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "amp", "lt", "gt"], {"startsb": "[", "endsb": "]", "vbar": "|", "caret": "^", "asterisk": "*", "tilde": "~", "plus": "&#43;", "apostrophe": "'", "backslash": "\\", "backtick": "`", "empty": "", "sp": " ", "space": " ", "two-colons": "::", "two-semicolons": ";;", "nbsp": "&#160;", "deg": "&#176;", "zwsp": "&#8203;", "quot": "&#34;", "apos": "&#39;", "lsquo": "&#8216;", "rsquo": "&#8217;", "ldquo": "&#8220;", "rdquo": "&#8221;", "wj": "&#8288;", "brvbar": "&#166;", "amp": "&", "lt": "<", "gt": ">"}));

    opal$opal.cdecl(opal$scope, 'QUOTE_SUBS', [["strong", "unconstrained", /\\?(?:\[([^\]]+?)\])?\*\*(.+?)\*\*/i], ["strong", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?\*(\S|\S.*?\S)\*(?=\W|opal$)/i], ["double", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?``(\S|\S.*?\S)''(?=\W|opal$)/i], ["emphasis", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?'(\S|\S.*?\S)'(?=\W|opal$)/i], ["single", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?`(\S|\S.*?\S)'(?=\W|opal$)/i], ["monospaced", "unconstrained", /\\?(?:\[([^\]]+?)\])?\+\+(.+?)\+\+/i], ["monospaced", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?\+(\S|\S.*?\S)\+(?=\W|opal$)/i], ["emphasis", "unconstrained", /\\?(?:\[([^\]]+?)\])?__(.+?)__/i], ["emphasis", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?_(\S|\S.*?\S)_(?=\W|opal$)/i], ["none", "unconstrained", /\\?(?:\[([^\]]+?)\])?##(.+?)##/i], ["none", "constrained", /(^|[^\w;:}])(?:\[([^\]]+?)\])?#(\S|\S.*?\S)#(?=\W|opal$)/i], ["superscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?\^(.+?)\^/i], ["subscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?~(.+?)~/i]]);

    opal$opal.cdecl(opal$scope, 'REPLACEMENTS', [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(^|\n| |\\)--( |\n|opal$)/, "&#8201;&#8212;&#8201;", "none"], [/(\w)\\?--(?=\w)/, "&#8212;", "leading"], [/\\?\.\.\./, "&#8230;", "leading"], [(new RegExp("([" + opal$scope.CC_ALPHA + "])\\\\?'(?!')")), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z]+|#\d{2,5}|#x[a-fA-F0-9]{2,4});)/, "", "bounding"]]);

    (function(self) {
      var opal$scope = self._scope, def = self._proto;
      self._proto.opal$load = function(input, options) {
        var opal$a, opal$b, opal$c, opal$d, TMP_2, TMP_3, TMP_4, opal$e, self = this, timings = nil, attributes = nil, attrs = nil, capture_1 = nil, original_attrs = nil, lines = nil, input_mtime = nil, input_path = nil, docdate = nil, doctime = nil, doc = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        if ((opal$a = (timings = options['opal$[]']("timings"))) !== false && opal$a !== nil) {
          timings.opal$start("read")};
        attributes = options['opal$[]=']("attributes", (function() {if ((opal$a = (opal$b = (attrs = options['opal$[]']("attributes")), (opal$b === nil || opal$b === false))) !== false && opal$a !== nil) {
          return opal$hash2([], {})
        } else if ((opal$a = (((opal$b = (attrs['opal$is_a?'](((opal$c = opal$opal.Object._scope.Hash) == null ? opal$opal.cm('Hash') : opal$c)))) !== false && opal$b !== nil) ? opal$b : ((opal$c = ((opal$d = opal$opal.Object._scope.RUBY_ENGINE_JRUBY) == null ? opal$opal.cm('RUBY_ENGINE_JRUBY') : opal$d), opal$c !== false && opal$c !== nil ?(attrs['opal$is_a?'](((((opal$d = opal$opal.Object._scope.Java) == null ? opal$opal.cm('Java') : opal$d))._scope.JavaUtil)._scope.Map)) : opal$c)))) !== false && opal$a !== nil) {
          return attrs.opal$dup()
        } else if ((opal$a = attrs['opal$is_a?'](((opal$b = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$b))) !== false && opal$a !== nil) {
          return (opal$a = (opal$b = attrs).opal$inject, opal$a._p = (TMP_2 = function(accum, entry){var self = TMP_2._s || this, opal$a, k = nil, v = nil;if (accum == null) accum = nil;if (entry == null) entry = nil;
          opal$a = opal$opal.to_ary(entry.opal$split("=", 2)), k = (opal$a[0] == null ? nil : opal$a[0]), v = (opal$a[1] == null ? nil : opal$a[1]);
            accum['opal$[]='](k, (((opal$a = v) !== false && opal$a !== nil) ? opal$a : ""));
            return accum;}, TMP_2._s = self, TMP_2), opal$a).call(opal$b, opal$hash2([], {}))
        } else if ((opal$a = attrs['opal$is_a?'](((opal$c = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$c))) !== false && opal$a !== nil) {
          capture_1 = (function() {if ((opal$a = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c)) !== false && opal$a !== nil) {
            return "opal$1"
            } else {
            return "1"
          }; return nil; })();
          attrs = attrs.opal$gsub(opal$scope.SpaceDelimiterRx, "" + (capture_1) + (opal$scope.NULL)).opal$gsub(opal$scope.EscapedSpaceRx, capture_1);
          return (opal$a = (opal$c = attrs.opal$split(opal$scope.NULL)).opal$inject, opal$a._p = (TMP_3 = function(accum, entry){var self = TMP_3._s || this, opal$a, k = nil, v = nil;if (accum == null) accum = nil;if (entry == null) entry = nil;
          opal$a = opal$opal.to_ary(entry.opal$split("=", 2)), k = (opal$a[0] == null ? nil : opal$a[0]), v = (opal$a[1] == null ? nil : opal$a[1]);
            accum['opal$[]='](k, (((opal$a = v) !== false && opal$a !== nil) ? opal$a : ""));
            return accum;}, TMP_3._s = self, TMP_3), opal$a).call(opal$c, opal$hash2([], {}));
        } else if ((opal$a = (opal$d = (attrs['opal$respond_to?']("keys")), opal$d !== false && opal$d !== nil ?(attrs['opal$respond_to?']("[]")) : opal$d)) !== false && opal$a !== nil) {
          original_attrs = attrs;
          attrs = opal$hash2([], {});
          (opal$a = (opal$d = original_attrs.opal$keys()).opal$each, opal$a._p = (TMP_4 = function(key){var self = TMP_4._s || this;if (key == null) key = nil;
          return attrs['opal$[]='](key, original_attrs['opal$[]'](key))}, TMP_4._s = self, TMP_4), opal$a).call(opal$d);
          return attrs;
          } else {
          return self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a), "illegal type for attributes option: " + (attrs.opal$class().opal$ancestors()))
        }; return nil; })());
        lines = nil;
        if ((opal$a = input['opal$is_a?'](((opal$e = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$e))) !== false && opal$a !== nil) {
          lines = input.opal$readlines();
          input_mtime = input.opal$mtime();
          input = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$new(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(input.opal$path()));
          input_path = input.opal$path();
          attributes['opal$[]=']("docfile", input_path);
          attributes['opal$[]=']("docdir", ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(input_path));
          attributes['opal$[]=']("docname", ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$basename(input_path, (((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$extname(input_path))));
          attributes['opal$[]=']("docdate", docdate = input_mtime.opal$strftime("%Y-%m-%d"));
          attributes['opal$[]=']("doctime", doctime = input_mtime.opal$strftime("%H:%M:%S %Z"));
          attributes['opal$[]=']("docdatetime", "" + (docdate) + " " + (doctime));
        } else if ((opal$a = input['opal$respond_to?']("readlines")) !== false && opal$a !== nil) {
          try {input.opal$rewind() } catch (opal$err) { nil };
          lines = input.opal$readlines();
        } else if ((opal$a = input['opal$is_a?'](((opal$e = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$e))) !== false && opal$a !== nil) {
          lines = input.opal$lines().opal$entries()
        } else if ((opal$a = input['opal$is_a?'](((opal$e = opal$opal.Object._scope.Array) == null ? opal$opal.cm('Array') : opal$e))) !== false && opal$a !== nil) {
          lines = input.opal$dup()
          } else {
          self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a), "Unsupported input type: " + (input.opal$class()))
        };
        if (timings !== false && timings !== nil) {
          timings.opal$record("read");
          timings.opal$start("parse");};
        if ((opal$a = options['opal$key?']("parse")) === false || opal$a === nil) {
          options['opal$[]=']("parse", true)};
        doc = opal$scope.Document.opal$new(lines, options);
        if (timings !== false && timings !== nil) {
          timings.opal$record("parse")};
        return doc;
      };
      self._proto.opal$load_file = function(filename, options) {
        var opal$a, self = this;
        if (options == null) {
          options = opal$hash2([], {})
        }
        return self.opal$load(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$new((((opal$a = filename) !== false && opal$a !== nil) ? opal$a : "")), options);
      };
      self._proto.opal$convert = function(input, options) {
        var opal$a, opal$b, opal$c, opal$d, opal$e, opal$f, TMP_5, self = this, to_file = nil, to_dir = nil, mkdirs = nil, timings = nil, opal$case = nil, write_to_same_dir = nil, stream_output = nil, write_to_target = nil, doc = nil, infile = nil, outfile = nil, outdir = nil, working_dir = nil, jail = nil, output = nil, copy_asciidoctor_stylesheet = nil, stylesheet = nil, copy_user_stylesheet = nil, copy_coderay_stylesheet = nil, copy_pygments_stylesheet = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dst = nil, stylesheet_content = nil;
        if (options == null) {
          options = opal$hash2([], {})
        }
        to_file = options.opal$delete("to_file");
        to_dir = options.opal$delete("to_dir");
        mkdirs = (((opal$a = options.opal$delete("mkdirs")) !== false && opal$a !== nil) ? opal$a : false);
        timings = options['opal$[]']("timings");
        opal$case = to_file;if (true['opal$==='](opal$case) || nil['opal$==='](opal$case)) {write_to_same_dir = (opal$a = (opal$b = to_dir, (opal$b === nil || opal$b === false)), opal$a !== false && opal$a !== nil ?(input['opal$is_a?'](((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b))) : opal$a);
        stream_output = false;
        write_to_target = to_dir;
        to_file = nil;}else if (false['opal$==='](opal$case)) {write_to_same_dir = false;
        stream_output = false;
        write_to_target = false;
        to_file = nil;}else {write_to_same_dir = false;
        stream_output = to_file['opal$respond_to?']("write");
        write_to_target = (function() {if (stream_output !== false && stream_output !== nil) {
          return false
          } else {
          return to_file
        }; return nil; })();};
        if ((opal$a = (opal$b = (opal$c = options['opal$key?']("header_footer"), (opal$c === nil || opal$c === false)), opal$b !== false && opal$b !== nil ?((((opal$c = write_to_same_dir) !== false && opal$c !== nil) ? opal$c : write_to_target)) : opal$b)) !== false && opal$a !== nil) {
          options['opal$[]=']("header_footer", true)};
        doc = self.opal$load(input, options);
        if (to_file['opal$==']("/dev/null")) {
          return doc
        } else if (write_to_same_dir !== false && write_to_same_dir !== nil) {
          infile = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(input.opal$path());
          outfile = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$join(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(infile), "" + (doc.opal$attributes()['opal$[]']("docname")) + (doc.opal$attributes()['opal$[]']("outfilesuffix")));
          if (outfile['opal$=='](infile)) {
            self.opal$raise(((opal$a = opal$opal.Object._scope.IOError) == null ? opal$opal.cm('IOError') : opal$a), "Input file and output file are the same!")};
          outdir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(outfile);
        } else if (write_to_target !== false && write_to_target !== nil) {
          working_dir = (function() {if ((opal$a = options['opal$has_key?']("base_dir")) !== false && opal$a !== nil) {
            return ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(options['opal$[]']("base_dir"))
            } else {
            return ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$expand_path(((opal$a = opal$opal.Object._scope.Dir) == null ? opal$opal.cm('Dir') : opal$a).opal$pwd())
          }; return nil; })();
          jail = (function() {if (doc.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SAFE)) {
            return working_dir
            } else {
            return nil
          }; return nil; })();
          if (to_dir !== false && to_dir !== nil) {
            outdir = doc.opal$normalize_system_path(to_dir, working_dir, jail, opal$hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            if (to_file !== false && to_file !== nil) {
              outfile = doc.opal$normalize_system_path(to_file, outdir, nil, opal$hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
              outdir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(outfile);
              } else {
              outfile = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$join(outdir, "" + (doc.opal$attributes()['opal$[]']("docname")) + (doc.opal$attributes()['opal$[]']("outfilesuffix")))
            };
          } else if (to_file !== false && to_file !== nil) {
            outfile = doc.opal$normalize_system_path(to_file, working_dir, jail, opal$hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            outdir = ((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$dirname(outfile);};
          if ((opal$a = ((opal$b = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$b)['opal$directory?'](outdir)) === false || opal$a === nil) {
            if (mkdirs !== false && mkdirs !== nil) {
              ((opal$a = opal$opal.Object._scope.FileUtils) == null ? opal$opal.cm('FileUtils') : opal$a).opal$mkdir_p(outdir)
              } else {
              self.opal$raise(((opal$a = opal$opal.Object._scope.IOError) == null ? opal$opal.cm('IOError') : opal$a), "target directory does not exist: " + (to_dir))
            }};
          } else {
          outfile = to_file;
          outdir = nil;
        };
        if (timings !== false && timings !== nil) {
          timings.opal$start("convert")};
        output = doc.opal$convert();
        if (timings !== false && timings !== nil) {
          timings.opal$record("convert")};
        if (outfile !== false && outfile !== nil) {
          if (timings !== false && timings !== nil) {
            timings.opal$start("write")};
          if ((opal$a = stream_output) === false || opal$a === nil) {
            doc.opal$attributes()['opal$[]=']("outfile", outfile);
            doc.opal$attributes()['opal$[]=']("outdir", outdir);};
          doc.opal$write(output, outfile);
          if (timings !== false && timings !== nil) {
            timings.opal$record("write")};
          if ((opal$a = (opal$b = (opal$c = (opal$d = (opal$e = (opal$f = stream_output, (opal$f === nil || opal$f === false)), opal$e !== false && opal$e !== nil ?doc.opal$safe()['opal$<']((opal$scope.SafeMode)._scope.SECURE) : opal$e), opal$d !== false && opal$d !== nil ?(doc['opal$attr?']("basebackend-html")) : opal$d), opal$c !== false && opal$c !== nil ?(doc['opal$attr?']("linkcss")) : opal$c), opal$b !== false && opal$b !== nil ?(doc['opal$attr?']("copycss")) : opal$b)) !== false && opal$a !== nil) {
            copy_asciidoctor_stylesheet = opal$scope.DEFAULT_STYLESHEET_KEYS['opal$include?'](stylesheet = (doc.opal$attr("stylesheet")));
            copy_user_stylesheet = (opal$a = (opal$b = copy_asciidoctor_stylesheet, (opal$b === nil || opal$b === false)), opal$a !== false && opal$a !== nil ?(opal$b = stylesheet['opal$nil_or_empty?'](), (opal$b === nil || opal$b === false)) : opal$a);
            copy_coderay_stylesheet = (opal$a = (doc['opal$attr?']("source-highlighter", "coderay")), opal$a !== false && opal$a !== nil ?(doc.opal$attr("coderay-css", "class"))['opal$==']("class") : opal$a);
            copy_pygments_stylesheet = (opal$a = (doc['opal$attr?']("source-highlighter", "pygments")), opal$a !== false && opal$a !== nil ?(doc.opal$attr("pygments-css", "class"))['opal$==']("class") : opal$a);
            if ((opal$a = (((opal$b = (((opal$c = (((opal$d = copy_asciidoctor_stylesheet) !== false && opal$d !== nil) ? opal$d : copy_user_stylesheet)) !== false && opal$c !== nil) ? opal$c : copy_coderay_stylesheet)) !== false && opal$b !== nil) ? opal$b : copy_pygments_stylesheet)) !== false && opal$a !== nil) {
              outdir = doc.opal$attr("outdir");
              stylesoutdir = doc.opal$normalize_system_path(doc.opal$attr("stylesdir"), outdir, (function() {if (doc.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SAFE)) {
                return outdir
                } else {
                return nil
              }; return nil; })());
              if (mkdirs !== false && mkdirs !== nil) {
                opal$scope.Helpers.opal$mkdir_p(stylesoutdir)};
              if (copy_asciidoctor_stylesheet !== false && copy_asciidoctor_stylesheet !== nil) {
                opal$scope.Stylesheets.opal$instance().opal$write_primary_stylesheet(stylesoutdir)
              } else if (copy_user_stylesheet !== false && copy_user_stylesheet !== nil) {
                if ((opal$a = ((stylesheet_src = (doc.opal$attr("copycss"))))['opal$empty?']()) !== false && opal$a !== nil) {
                  stylesheet_src = doc.opal$normalize_system_path(stylesheet)
                  } else {
                  stylesheet_src = doc.opal$normalize_system_path(stylesheet_src)
                };
                stylesheet_dst = doc.opal$normalize_system_path(stylesheet, stylesoutdir, ((function() {if (doc.opal$safe()['opal$>=']((opal$scope.SafeMode)._scope.SAFE)) {
                  return outdir
                  } else {
                  return nil
                }; return nil; })()));
                if ((opal$a = (((opal$b = stylesheet_src['opal$=='](stylesheet_dst)) !== false && opal$b !== nil) ? opal$b : ((stylesheet_content = doc.opal$read_asset(stylesheet_src)))['opal$nil?']())) === false || opal$a === nil) {
                  (opal$a = (opal$b = ((opal$c = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$c)).opal$open, opal$a._p = (TMP_5 = function(f){var self = TMP_5._s || this;if (f == null) f = nil;
                  return f.opal$write(stylesheet_content)}, TMP_5._s = self, TMP_5), opal$a).call(opal$b, stylesheet_dst, "w")};};
              if (copy_coderay_stylesheet !== false && copy_coderay_stylesheet !== nil) {
                opal$scope.Stylesheets.opal$instance().opal$write_coderay_stylesheet(stylesoutdir)
              } else if (copy_pygments_stylesheet !== false && copy_pygments_stylesheet !== nil) {
                opal$scope.Stylesheets.opal$instance().opal$write_pygments_stylesheet(stylesoutdir, (doc.opal$attr("pygments-style")))};};};
          return doc;
          } else {
          return output
        };
      };
      self._proto.opal$render = self._proto.opal$convert;
      self._proto.opal$convert_file = function(filename, options) {
        var opal$a, self = this;
        if (options == null) {
          options = opal$hash2([], {})
        }
        return self.opal$convert(((opal$a = opal$opal.Object._scope.File) == null ? opal$opal.cm('File') : opal$a).opal$new((((opal$a = filename) !== false && opal$a !== nil) ? opal$a : "")), options);
      };
      return self._proto.opal$render_file = self._proto.opal$convert_file;
    })(self.opal$singleton_class());

    if ((opal$a = ((opal$c = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$c)) === false || opal$a === nil) {
      ;

      ;

      ;};
    
  })(self);
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  if ((opal$a = opal$scope.RUBY_ENGINE_OPAL) !== false && opal$a !== nil) {
    };
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  if ((opal$a = ((opal$b = opal$opal.Object._scope.RUBY_ENGINE_OPAL) == null ? opal$opal.cm('RUBY_ENGINE_OPAL') : opal$b)) !== false && opal$a !== nil) {
    ;
    ;
    return true;
    } else {
    return nil
  };
})(Opal);
