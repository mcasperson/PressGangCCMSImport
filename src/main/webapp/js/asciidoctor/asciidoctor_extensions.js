/* Generated by Opal 0.6.2 */
(function(opal$opal) {
  var self = opal$opal.top, opal$scope = opal$opal, nil = opal$opal.nil, opal$breaker = opal$opal.breaker, opal$slice = opal$opal.slice, opal$module = opal$opal.module, opal$klass = opal$opal.klass, opal$hash2 = opal$opal.hash2, opal$range = opal$opal.range, opal$hash = opal$opal.hash;

  return (function(opal$base) {
    var self = opal$module(opal$base, 'Asciidoctor');

    var def = self._proto, opal$scope = self._scope;

    (function(opal$base) {
      var self = opal$module(opal$base, 'Extensions');

      var def = self._proto, opal$scope = self._scope;

      (function(opal$base, opal$super) {
        function opal$Processor(){};
        var self = opal$Processor = opal$klass(opal$base, opal$super, 'Processor', opal$Processor);

        var def = self._proto, opal$scope = self._scope, opal$a, opal$b, TMP_1;

        def.config = nil;
        (function(self) {
          var opal$scope = self._scope, def = self._proto;

          self._proto.opal$config = function() {
            var opal$a, self = this;
            if (self.config == null) self.config = nil;

            return (((opal$a = self.config) !== false && opal$a !== nil) ? opal$a : self.config = opal$hash2([], {}));
          };
          self._proto.opal$option = function(key, default_value) {
            var self = this;

            return self.opal$config()['opal$[]='](key, default_value);
          };
          self._proto.opal$use_dsl = function() {
            var opal$a, self = this;

            if (((opal$a = self.opal$name()['opal$nil_or_empty?']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              if (((opal$a = self.opal$constants().opal$grep("DSL")) !== nil && (!opal$a._isBoolean || opal$a == true))) {
                return self.opal$include(self.opal$const_get("DSL"))
                } else {
                return nil
              }
            } else if (((opal$a = self.opal$constants().opal$grep("DSL")) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              return self.opal$extend(self.opal$const_get("DSL"))
              } else {
              return nil
            };
          };
          self._proto.opal$extend_dsl = self._proto.opal$use_dsl;
          return self._proto.opal$include_dsl = self._proto.opal$use_dsl;
        })(self.opal$singleton_class());

        self.opal$attr_reader("config");

        def.opal$initialize = function(config) {
          var self = this;

          if (config == null) {
            config = opal$hash2([], {})
          }
          return self.config = self.opal$class().opal$config().opal$merge(config);
        };

        def.opal$update_config = function(config) {
          var self = this;

          return self.config.opal$update(config);
        };

        def.opal$process = function(args) {
          var opal$a, self = this;

          args = opal$slice.call(arguments, 0);
          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        };

        def.opal$create_block = function(parent, context, source, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = opal$hash2([], {})
          }
          return opal$scope.Block.opal$new(parent, context, opal$hash2(["source", "attributes"], {"source": source, "attributes": attrs}).opal$merge(opts));
        };

        def.opal$create_image_block = function(parent, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = opal$hash2([], {})
          }
          return self.opal$create_block(parent, "image", nil, attrs, opts);
        };

        def.opal$create_inline = function(parent, context, text, opts) {
          var self = this;

          if (opts == null) {
            opts = opal$hash2([], {})
          }
          return opal$scope.Inline.opal$new(parent, context, text, opts);
        };

        def.opal$parse_content = function(parent, content, attributes) {
          var opal$a, opal$b, self = this, reader = nil, block = nil;

          if (attributes == null) {
            attributes = opal$hash2([], {})
          }
          reader = (function() {if (((opal$a = (content['opal$is_a?'](opal$scope.Reader))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return reader
            } else {
            return (opal$scope.Reader.opal$new(content))
          }; return nil; })();
          while (((opal$b = reader['opal$has_more_lines?']()) !== nil && (!opal$b._isBoolean || opal$b == true))) {
          block = opal$scope.Parser.opal$next_block(reader, parent, attributes);
          if (block !== false && block !== nil) {
            parent['opal$<<'](block)};};
          return nil;
        };

        return (opal$a = (opal$b = [["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]]).opal$each, opal$a._p = (TMP_1 = function(method_name, delegate_method_name, context){var self = TMP_1._s || this, opal$a, opal$b, TMP_2;
if (method_name == null) method_name = nil;if (delegate_method_name == null) delegate_method_name = nil;if (context == null) context = nil;
        return (opal$a = (opal$b = self).opal$define_method, opal$a._p = (TMP_2 = function(args){var self = TMP_2._s || this, opal$a;
args = opal$slice.call(arguments, 0);
          return (opal$a = self).opal$send.apply(opal$a, [delegate_method_name].concat(args.opal$dup().opal$insert(1, context)))}, TMP_2._s = self, TMP_2), opal$a).call(opal$b, method_name)}, TMP_1._s = self, TMP_1), opal$a).call(opal$b);
      })(self, null);

      (function(opal$base) {
        var self = opal$module(opal$base, 'ProcessorDsl');

        var def = self._proto, opal$scope = self._scope, TMP_3;

        def.opal$option = function(key, value) {
          var self = this;

          return self.opal$config()['opal$[]='](key, value);
        };

        def.opal$process = TMP_3 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_3._p, block = opal$iter || nil;
          if (self.process_block == null) self.process_block = nil;

          args = opal$slice.call(arguments, 0);
          TMP_3._p = null;
          if ((block !== nil)) {
            return self.process_block = block
          } else if (((opal$a = self.process_block) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return (opal$a = self.process_block).opal$call.apply(opal$a, [].concat(args))
            } else {
            return self.opal$raise(((opal$b = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$b))
          };
        };

        def['opal$process_block_given?'] = function() {
          var opal$a, self = this;

          return ((opal$a = self['process_block'], opal$a != null && opal$a !== nil) ? 'instance-variable' : nil);
        };
                ;opal$opal.donate(self, ["opal$option", "opal$process", "opal$process_block_given?"]);
      })(self);

      (function(opal$base, opal$super) {
        function opal$Preprocessor(){};
        var self = opal$Preprocessor = opal$klass(opal$base, opal$super, 'Preprocessor', opal$Preprocessor);

        var def = self._proto, opal$scope = self._scope;

        return (def.opal$process = function(document, reader) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'process'
      })(self, opal$scope.Processor);

      opal$opal.casgn(opal$scope.Preprocessor, 'DSL', opal$scope.ProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$Treeprocessor(){};
        var self = opal$Treeprocessor = opal$klass(opal$base, opal$super, 'Treeprocessor', opal$Treeprocessor);

        var def = self._proto, opal$scope = self._scope;

        return (def.opal$process = function(document) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'process'
      })(self, opal$scope.Processor);

      opal$opal.casgn(opal$scope.Treeprocessor, 'DSL', opal$scope.ProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$Postprocessor(){};
        var self = opal$Postprocessor = opal$klass(opal$base, opal$super, 'Postprocessor', opal$Postprocessor);

        var def = self._proto, opal$scope = self._scope;

        return (def.opal$process = function(document, output) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'process'
      })(self, opal$scope.Processor);

      opal$opal.casgn(opal$scope.Postprocessor, 'DSL', opal$scope.ProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$IncludeProcessor(){};
        var self = opal$IncludeProcessor = opal$klass(opal$base, opal$super, 'IncludeProcessor', opal$IncludeProcessor);

        var def = self._proto, opal$scope = self._scope;

        def.opal$process = function(reader, target, attributes) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        };

        return (def['opal$handles?'] = function(target) {
          var self = this;

          return true;
        }, nil) && 'handles?';
      })(self, opal$scope.Processor);

      opal$opal.casgn(opal$scope.IncludeProcessor, 'DSL', opal$scope.ProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$BlockProcessor(){};
        var self = opal$BlockProcessor = opal$klass(opal$base, opal$super, 'BlockProcessor', opal$BlockProcessor);

        var def = self._proto, opal$scope = self._scope, TMP_4;

        def.config = nil;
        self.opal$attr_accessor("name");

        def.opal$initialize = TMP_4 = function(name, config) {
          var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_4._p, opal$yield = opal$iter || nil, opal$case = nil;

          if (name == null) {
            name = nil
          }
          if (config == null) {
            config = opal$hash2([], {})
          }
          TMP_4._p = null;
          opal$opal.find_super_dispatcher(self, 'initialize', TMP_4, null).apply(self, [config]);
          self.name = (((opal$a = name) !== false && opal$a !== nil) ? opal$a : self.config['opal$[]']("name"));
          opal$case = self.config['opal$[]']("contexts");if (((opal$a = opal$opal.Object._scope.NilClass) == null ? opal$opal.cm('NilClass') : opal$a)['opal$==='](opal$case)) {(opal$a = "contexts", opal$b = self.config, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, ["open", "paragraph"].opal$to_set())))}else if (((opal$a = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$a)['opal$==='](opal$case)) {self.config['opal$[]=']("contexts", [self.config['opal$[]']("contexts")].opal$to_set())}else {self.config['opal$[]=']("contexts", self.config['opal$[]']("contexts").opal$to_set())};
          return (opal$a = "content_model", opal$b = self.config, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, "compound")));
        };

        return (def.opal$process = function(parent, reader, attributes) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'process';
      })(self, opal$scope.Processor);

      (function(opal$base) {
        var self = opal$module(opal$base, 'BlockProcessorDsl');

        var def = self._proto, opal$scope = self._scope;

        self.opal$include(opal$scope.ProcessorDsl);

        def.opal$named = function(value) {
          var opal$a, self = this;

          if (((opal$a = self['opal$is_a?'](opal$scope.Processor)) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return self.name = value
            } else {
            return self.opal$option("name", value)
          };
        };

        opal$opal.defn(self, 'opal$match_name', def.opal$named);

        opal$opal.defn(self, 'opal$bind_to', def.opal$named);

        def.opal$contexts = function(value) {
          var self = this;

          value = opal$slice.call(arguments, 0);
          return self.opal$option("contexts", value.opal$flatten());
        };

        opal$opal.defn(self, 'opal$on_contexts', def.opal$contexts);

        opal$opal.defn(self, 'opal$on_context', def.opal$contexts);

        def.opal$content_model = function(value) {
          var self = this;

          return self.opal$option("content_model", value);
        };

        opal$opal.defn(self, 'opal$parse_content_as', def.opal$content_model);

        def.opal$pos_attrs = function(value) {
          var self = this;

          value = opal$slice.call(arguments, 0);
          return self.opal$option("pos_attrs", value.opal$flatten());
        };

        opal$opal.defn(self, 'opal$map_attributes', def.opal$pos_attrs);

        opal$opal.defn(self, 'opal$name_positional_attributes', def.opal$pos_attrs);

        def.opal$default_attrs = function(value) {
          var self = this;

          return self.opal$option("default_attrs", value);
        };

        opal$opal.defn(self, 'opal$seed_attributes_with', def.opal$default_attrs);
                ;opal$opal.donate(self, ["opal$named", "opal$match_name", "opal$bind_to", "opal$contexts", "opal$on_contexts", "opal$on_context", "opal$content_model", "opal$parse_content_as", "opal$pos_attrs", "opal$map_attributes", "opal$name_positional_attributes", "opal$default_attrs", "opal$seed_attributes_with"]);
      })(self);

      opal$opal.casgn(opal$scope.BlockProcessor, 'DSL', opal$scope.BlockProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$MacroProcessor(){};
        var self = opal$MacroProcessor = opal$klass(opal$base, opal$super, 'MacroProcessor', opal$MacroProcessor);

        var def = self._proto, opal$scope = self._scope, TMP_5;

        def.config = nil;
        self.opal$attr_accessor("name");

        def.opal$initialize = TMP_5 = function(name, config) {
          var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_5._p, opal$yield = opal$iter || nil;

          if (name == null) {
            name = nil
          }
          if (config == null) {
            config = opal$hash2([], {})
          }
          TMP_5._p = null;
          opal$opal.find_super_dispatcher(self, 'initialize', TMP_5, null).apply(self, [config]);
          self.name = (((opal$a = name) !== false && opal$a !== nil) ? opal$a : self.config['opal$[]']("name"));
          return (opal$a = "content_model", opal$b = self.config, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, "attributes")));
        };

        return (def.opal$process = function(parent, target, attributes) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'process';
      })(self, opal$scope.Processor);

      (function(opal$base) {
        var self = opal$module(opal$base, 'MacroProcessorDsl');

        var def = self._proto, opal$scope = self._scope;

        self.opal$include(opal$scope.ProcessorDsl);

        def.opal$named = function(value) {
          var opal$a, self = this;

          if (((opal$a = self['opal$is_a?'](opal$scope.Processor)) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return self.name = value
            } else {
            return self.opal$option("name", value)
          };
        };

        opal$opal.defn(self, 'opal$match_name', def.opal$named);

        opal$opal.defn(self, 'opal$bind_to', def.opal$named);

        def.opal$content_model = function(value) {
          var self = this;

          return self.opal$option("content_model", value);
        };

        opal$opal.defn(self, 'opal$parse_content_as', def.opal$content_model);

        def.opal$pos_attrs = function(value) {
          var self = this;

          value = opal$slice.call(arguments, 0);
          return self.opal$option("pos_attrs", value.opal$flatten());
        };

        opal$opal.defn(self, 'opal$map_attributes', def.opal$pos_attrs);

        opal$opal.defn(self, 'opal$name_positional_attributes', def.opal$pos_attrs);

        def.opal$default_attrs = function(value) {
          var self = this;

          return self.opal$option("default_attrs", value);
        };

        opal$opal.defn(self, 'opal$seed_attributes_with', def.opal$default_attrs);
                ;opal$opal.donate(self, ["opal$named", "opal$match_name", "opal$bind_to", "opal$content_model", "opal$parse_content_as", "opal$pos_attrs", "opal$map_attributes", "opal$name_positional_attributes", "opal$default_attrs", "opal$seed_attributes_with"]);
      })(self);

      (function(opal$base, opal$super) {
        function opal$BlockMacroProcessor(){};
        var self = opal$BlockMacroProcessor = opal$klass(opal$base, opal$super, 'BlockMacroProcessor', opal$BlockMacroProcessor);

        var def = self._proto, opal$scope = self._scope;

        return nil;
      })(self, opal$scope.MacroProcessor);

      opal$opal.casgn(opal$scope.BlockMacroProcessor, 'DSL', opal$scope.MacroProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$InlineMacroProcessor(){};
        var self = opal$InlineMacroProcessor = opal$klass(opal$base, opal$super, 'InlineMacroProcessor', opal$InlineMacroProcessor);

        var def = self._proto, opal$scope = self._scope, TMP_6;

        def.config = def.name = nil;
        def.opal$initialize = TMP_6 = function(name, config) {var opal$zuper = opal$slice.call(arguments, 0);
          var opal$a, opal$b, opal$c, self = this, opal$iter = TMP_6._p, opal$yield = opal$iter || nil;

          if (config == null) {
            config = opal$hash2([], {})
          }
          TMP_6._p = null;
          opal$opal.find_super_dispatcher(self, 'initialize', TMP_6, opal$iter).apply(self, opal$zuper);
          return (opal$a = "regexp", opal$b = self.config, (((opal$c = opal$b['opal$[]'](opal$a)) !== false && opal$c !== nil) ? opal$c : opal$b['opal$[]='](opal$a, (self.opal$resolve_regexp(self.name, self.config['opal$[]']("format"))))));
        };

        return (def.opal$resolve_regexp = function(name, format) {
          var self = this;

          if (format['opal$==']("short")) {
            return (new RegExp("\\\\?" + name + ":\\[((?:\\\\\\]|[^\\]])*?)\\]"))
            } else {
            return (new RegExp("\\\\?" + name + ":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]"))
          };
        }, nil) && 'resolve_regexp';
      })(self, opal$scope.MacroProcessor);

      (function(opal$base) {
        var self = opal$module(opal$base, 'InlineMacroProcessorDsl');

        var def = self._proto, opal$scope = self._scope;

        self.opal$include(opal$scope.MacroProcessorDsl);

        def.opal$using_format = function(value) {
          var self = this;

          return self.opal$option("format", value);
        };

        def.opal$match = function(value) {
          var self = this;

          return self.opal$option("regexp", value);
        };
                ;opal$opal.donate(self, ["opal$using_format", "opal$match"]);
      })(self);

      opal$opal.casgn(opal$scope.InlineMacroProcessor, 'DSL', opal$scope.InlineMacroProcessorDsl);

      (function(opal$base, opal$super) {
        function opal$Extension(){};
        var self = opal$Extension = opal$klass(opal$base, opal$super, 'Extension', opal$Extension);

        var def = self._proto, opal$scope = self._scope;

        self.opal$attr("kind");

        self.opal$attr("config");

        self.opal$attr("instance");

        return (def.opal$initialize = function(kind, instance, config) {
          var self = this;

          self.kind = kind;
          self.instance = instance;
          return self.config = config;
        }, nil) && 'initialize';
      })(self, null);

      (function(opal$base, opal$super) {
        function opal$ProcessorExtension(){};
        var self = opal$ProcessorExtension = opal$klass(opal$base, opal$super, 'ProcessorExtension', opal$ProcessorExtension);

        var def = self._proto, opal$scope = self._scope, TMP_7;

        self.opal$attr("process_method");

        return (def.opal$initialize = TMP_7 = function(kind, instance, process_method) {
          var opal$a, self = this, opal$iter = TMP_7._p, opal$yield = opal$iter || nil;

          if (process_method == null) {
            process_method = nil
          }
          TMP_7._p = null;
          opal$opal.find_super_dispatcher(self, 'initialize', TMP_7, null).apply(self, [kind, instance, instance.opal$config()]);
          return self.process_method = (((opal$a = process_method) !== false && opal$a !== nil) ? opal$a : instance.opal$method("process"));
        }, nil) && 'initialize';
      })(self, opal$scope.Extension);

      (function(opal$base, opal$super) {
        function opal$Group(){};
        var self = opal$Group = opal$klass(opal$base, opal$super, 'Group', opal$Group);

        var def = self._proto, opal$scope = self._scope;

        (function(self) {
          var opal$scope = self._scope, def = self._proto;

          return (self._proto.opal$register = function(name) {
            var self = this;

            if (name == null) {
              name = nil
            }
            return opal$scope.Extensions.opal$register(name, self);
          }, nil) && 'register'
        })(self.opal$singleton_class());

        return (def.opal$activate = function(registry) {
          var opal$a, self = this;

          return self.opal$raise(((opal$a = opal$opal.Object._scope.NotImplementedError) == null ? opal$opal.cm('NotImplementedError') : opal$a));
        }, nil) && 'activate';
      })(self, null);

      (function(opal$base, opal$super) {
        function opal$Registry(){};
        var self = opal$Registry = opal$klass(opal$base, opal$super, 'Registry', opal$Registry);

        var def = self._proto, opal$scope = self._scope, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18;

        def.groups = def.preprocessor_extensions = def.treeprocessor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        self.opal$attr_reader("document");

        self.opal$attr_reader("groups");

        def.opal$initialize = function(groups) {
          var self = this;

          if (groups == null) {
            groups = opal$hash2([], {})
          }
          self.groups = groups;
          self.preprocessor_extensions = self.treeprocessor_extensions = self.postprocessor_extensions = self.include_processor_extensions = nil;
          self.block_extensions = self.block_macro_extensions = self.inline_macro_extensions = nil;
          return self.document = nil;
        };

        def.opal$activate = function(document) {
          var opal$a, opal$b, TMP_8, self = this;

          self.document = document;
          (opal$a = (opal$b = (opal$scope.Extensions.opal$groups().opal$values()['opal$+'](self.groups.opal$values()))).opal$each, opal$a._p = (TMP_8 = function(group){var self = TMP_8._s || this, opal$a, opal$b, opal$case = nil;
if (group == null) group = nil;
          return (function() {opal$case = group;if (((opal$a = opal$opal.Object._scope.Proc) == null ? opal$opal.cm('Proc') : opal$a)['opal$==='](opal$case)) {return (function() {opal$case = group.opal$arity();if ((0)['opal$==='](opal$case) || (-1)['opal$==='](opal$case)) {return (opal$a = (opal$b = self).opal$instance_exec, opal$a._p = group.opal$to_proc(), opal$a).call(opal$b)}else if ((1)['opal$==='](opal$case)) {return group.opal$call(self)}else { return nil }})()}else if (((opal$a = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$a)['opal$==='](opal$case)) {return group.opal$new().opal$activate(self)}else {return group.opal$activate(self)}})()}, TMP_8._s = self, TMP_8), opal$a).call(opal$b);
          return self;
        };

        def.opal$preprocessor = TMP_9 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_9._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_9._p = null;
          return (opal$a = (opal$b = self).opal$add_document_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "preprocessor", args);
        };

        def['opal$preprocessors?'] = function() {
          var self = this;

          return self.preprocessor_extensions['opal$!']()['opal$!']();
        };

        def.opal$preprocessors = function() {
          var self = this;

          return self.preprocessor_extensions;
        };

        def.opal$treeprocessor = TMP_10 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_10._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_10._p = null;
          return (opal$a = (opal$b = self).opal$add_document_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "treeprocessor", args);
        };

        def['opal$treeprocessors?'] = function() {
          var self = this;

          return self.treeprocessor_extensions['opal$!']()['opal$!']();
        };

        def.opal$treeprocessors = function() {
          var self = this;

          return self.treeprocessor_extensions;
        };

        def.opal$postprocessor = TMP_11 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_11._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_11._p = null;
          return (opal$a = (opal$b = self).opal$add_document_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "postprocessor", args);
        };

        def['opal$postprocessors?'] = function() {
          var self = this;

          return self.postprocessor_extensions['opal$!']()['opal$!']();
        };

        def.opal$postprocessors = function() {
          var self = this;

          return self.postprocessor_extensions;
        };

        def.opal$include_processor = TMP_12 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_12._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_12._p = null;
          return (opal$a = (opal$b = self).opal$add_document_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "include_processor", args);
        };

        def['opal$include_processors?'] = function() {
          var self = this;

          return self.include_processor_extensions['opal$!']()['opal$!']();
        };

        def.opal$include_processors = function() {
          var self = this;

          return self.include_processor_extensions;
        };

        def.opal$block = TMP_13 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_13._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_13._p = null;
          return (opal$a = (opal$b = self).opal$add_syntax_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "block", args);
        };

        def['opal$blocks?'] = function() {
          var self = this;

          return self.block_extensions['opal$!']()['opal$!']();
        };

        def['opal$registered_for_block?'] = function(name, context) {
          var opal$a, self = this, ext = nil;

          if (((opal$a = (ext = self.block_extensions['opal$[]'](name.opal$to_sym()))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            if (((opal$a = (ext.opal$config()['opal$[]']("contexts")['opal$include?'](context))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              return ext
              } else {
              return false
            }
            } else {
            return false
          };
        };

        def.opal$find_block_extension = function(name) {
          var self = this;

          return self.block_extensions['opal$[]'](name.opal$to_sym());
        };

        def.opal$block_macro = TMP_14 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_14._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_14._p = null;
          return (opal$a = (opal$b = self).opal$add_syntax_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "block_macro", args);
        };

        def['opal$block_macros?'] = function() {
          var self = this;

          return self.block_macro_extensions['opal$!']()['opal$!']();
        };

        def['opal$registered_for_block_macro?'] = function(name) {
          var opal$a, self = this, ext = nil;

          if (((opal$a = (ext = self.block_macro_extensions['opal$[]'](name.opal$to_sym()))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return ext
            } else {
            return false
          };
        };

        def.opal$find_block_macro_extension = function(name) {
          var self = this;

          return self.block_macro_extensions['opal$[]'](name.opal$to_sym());
        };

        def.opal$inline_macro = TMP_15 = function(args) {
          var opal$a, opal$b, self = this, opal$iter = TMP_15._p, block = opal$iter || nil;

          args = opal$slice.call(arguments, 0);
          TMP_15._p = null;
          return (opal$a = (opal$b = self).opal$add_syntax_processor, opal$a._p = block.opal$to_proc(), opal$a).call(opal$b, "inline_macro", args);
        };

        def['opal$inline_macros?'] = function() {
          var self = this;

          return self.inline_macro_extensions['opal$!']()['opal$!']();
        };

        def['opal$registered_for_inline_macro?'] = function(name) {
          var opal$a, self = this, ext = nil;

          if (((opal$a = (ext = self.inline_macro_extensions['opal$[]'](name.opal$to_sym()))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return ext
            } else {
            return false
          };
        };

        def.opal$find_inline_macro_extension = function(name) {
          var self = this;

          return self.inline_macro_extensions['opal$[]'](name.opal$to_sym());
        };

        def.opal$inline_macros = function() {
          var self = this;

          return self.inline_macro_extensions.opal$values();
        };

        self.opal$private();

        def.opal$add_document_processor = TMP_16 = function(kind, args) {
          var opal$a, opal$b, TMP_17, opal$c, opal$d, opal$e, opal$f, self = this, opal$iter = TMP_16._p, block = opal$iter || nil, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_16._p = null;
          kind_name = kind.opal$to_s().opal$tr("_", " ");
          kind_class_symbol = (opal$a = (opal$b = kind_name.opal$split(" ")).opal$map, opal$a._p = (TMP_17 = function(word){var self = TMP_17._s || this;
if (word == null) word = nil;
          return "" + (word.opal$chr().opal$upcase()) + (word['opal$[]'](opal$range(1, -1, false)))}, TMP_17._s = self, TMP_17), opal$a).call(opal$b).opal$join().opal$to_sym();
          kind_class = opal$scope.Extensions.opal$const_get(kind_class_symbol);
          kind_java_class = (function() {if (((opal$a = ((opal$opal.Object._scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return ((((opal$a = opal$opal.Object._scope.AsciidoctorJ) == null ? opal$opal.cm('AsciidoctorJ') : opal$a))._scope.Extensions.opal$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = (((opal$a = self.opal$instance_variable_get(((("@") + (kind)) + "_extensions").opal$to_sym())) !== false && opal$a !== nil) ? opal$a : self.opal$instance_variable_set(((("@") + (kind)) + "_extensions").opal$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            config = self.opal$resolve_args(args, 1);
            processor = kind_class.opal$new(config);
            (function(self) {
              var opal$scope = self._scope, def = self._proto;

              return self.opal$include_dsl()
            })(processor.opal$singleton_class());
            (opal$a = (opal$c = processor).opal$instance_exec, opal$a._p = block.opal$to_proc(), opal$a).call(opal$c);
            processor.opal$freeze();
            if (((opal$a = processor['opal$process_block_given?']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              } else {
              self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("No block specified to process " + (kind_name) + " extension at " + (block.opal$source_location())))
            };
            return opal$scope.ProcessorExtension.opal$new(kind, processor);
            } else {
            opal$a = opal$opal.to_ary(self.opal$resolve_args(args, 2)), processor = (opal$a[0] == null ? nil : opal$a[0]), config = (opal$a[1] == null ? nil : opal$a[1]);
            if (((opal$a = (((opal$d = (processor['opal$is_a?'](((opal$e = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$e)))) !== false && opal$d !== nil) ? opal$d : ((opal$e = (processor['opal$is_a?'](((opal$f = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$f))), opal$e !== false && opal$e !== nil ?(processor = opal$scope.Extensions.opal$class_for_name(processor)) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              if (((opal$a = (((opal$d = processor['opal$<'](kind_class)) !== false && opal$d !== nil) ? opal$d : (((opal$e = kind_java_class !== false && kind_java_class !== nil) ? processor['opal$<'](kind_java_class) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
                } else {
                self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Invalid type for " + (kind_name) + " extension: " + (processor)))
              };
              processor_instance = processor.opal$new(config);
              processor_instance.opal$freeze();
              return opal$scope.ProcessorExtension.opal$new(kind, processor_instance);
            } else if (((opal$a = (((opal$d = (processor['opal$is_a?'](kind_class))) !== false && opal$d !== nil) ? opal$d : (((opal$e = kind_java_class !== false && kind_java_class !== nil) ? (processor['opal$is_a?'](kind_java_class)) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              processor.opal$update_config(config);
              processor.opal$freeze();
              return opal$scope.ProcessorExtension.opal$new(kind, processor);
              } else {
              return self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          }; return nil; })();
          if (extension.opal$config()['opal$[]']("position")['opal$=='](">>")) {
            return kind_store.opal$unshift(extension)
            } else {
            return kind_store['opal$<<'](extension)
          };
        };

        def.opal$add_syntax_processor = TMP_18 = function(kind, args) {
          var opal$a, opal$b, TMP_19, opal$c, opal$d, opal$e, opal$f, self = this, opal$iter = TMP_18._p, block = opal$iter || nil, kind_name = nil, kind_class_basename = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_18._p = null;
          kind_name = kind.opal$to_s().opal$tr("_", " ");
          kind_class_basename = (opal$a = (opal$b = kind_name.opal$split(" ")).opal$map, opal$a._p = (TMP_19 = function(word){var self = TMP_19._s || this;
if (word == null) word = nil;
          return "" + (word.opal$chr().opal$upcase()) + (word['opal$[]'](opal$range(1, -1, false)))}, TMP_19._s = self, TMP_19), opal$a).call(opal$b).opal$join();
          kind_class_symbol = ((("") + (kind_class_basename)) + "Processor").opal$to_sym();
          kind_class = opal$scope.Extensions.opal$const_get(kind_class_symbol);
          kind_java_class = (function() {if (((opal$a = ((opal$opal.Object._scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return ((((opal$a = opal$opal.Object._scope.AsciidoctorJ) == null ? opal$opal.cm('AsciidoctorJ') : opal$a))._scope.Extensions.opal$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = (((opal$a = self.opal$instance_variable_get(((("@") + (kind)) + "_extensions").opal$to_sym())) !== false && opal$a !== nil) ? opal$a : self.opal$instance_variable_set(((("@") + (kind)) + "_extensions").opal$to_sym(), opal$hash2([], {})));
          if ((block !== nil)) {
            opal$a = opal$opal.to_ary(self.opal$resolve_args(args, 2)), name = (opal$a[0] == null ? nil : opal$a[0]), config = (opal$a[1] == null ? nil : opal$a[1]);
            processor = kind_class.opal$new(self.opal$as_symbol(name), config);
            (function(self) {
              var opal$scope = self._scope, def = self._proto;

              return self.opal$include_dsl()
            })(processor.opal$singleton_class());
            if (block.opal$arity()['opal$=='](1)) {
              if (opal$opal.opal$yield1(block, processor) === opal$breaker) return opal$breaker.opal$v
              } else {
              (opal$a = (opal$c = processor).opal$instance_exec, opal$a._p = block.opal$to_proc(), opal$a).call(opal$c)
            };
            if (((opal$a = (name = self.opal$as_symbol(processor.opal$name()))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              } else {
              self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("No name specified for " + (kind_name) + " extension at " + (block.opal$source_location())))
            };
            if (((opal$a = processor['opal$process_block_given?']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              } else {
              self.opal$raise(((opal$a = opal$opal.Object._scope.NoMethodError) == null ? opal$opal.cm('NoMethodError') : opal$a).opal$new("No block specified to process " + (kind_name) + " extension at " + (block.opal$source_location())))
            };
            processor.opal$freeze();
            return kind_store['opal$[]='](name, opal$scope.ProcessorExtension.opal$new(kind, processor));
            } else {
            opal$a = opal$opal.to_ary(self.opal$resolve_args(args, 3)), processor = (opal$a[0] == null ? nil : opal$a[0]), name = (opal$a[1] == null ? nil : opal$a[1]), config = (opal$a[2] == null ? nil : opal$a[2]);
            if (((opal$a = (((opal$d = (processor['opal$is_a?'](((opal$e = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$e)))) !== false && opal$d !== nil) ? opal$d : ((opal$e = (processor['opal$is_a?'](((opal$f = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$f))), opal$e !== false && opal$e !== nil ?(processor = opal$scope.Extensions.opal$class_for_name(processor)) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              if (((opal$a = (((opal$d = processor['opal$<'](kind_class)) !== false && opal$d !== nil) ? opal$d : (((opal$e = kind_java_class !== false && kind_java_class !== nil) ? processor['opal$<'](kind_java_class) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
                } else {
                self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor)))
              };
              processor_instance = processor.opal$new(self.opal$as_symbol(name), config);
              if (((opal$a = (name = self.opal$as_symbol(processor_instance.opal$name()))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
                } else {
                self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.opal$freeze();
              return kind_store['opal$[]='](name, opal$scope.ProcessorExtension.opal$new(kind, processor_instance));
            } else if (((opal$a = (((opal$d = (processor['opal$is_a?'](kind_class))) !== false && opal$d !== nil) ? opal$d : (((opal$e = kind_java_class !== false && kind_java_class !== nil) ? (processor['opal$is_a?'](kind_java_class)) : opal$e)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              processor.opal$update_config(config);
              if (((opal$a = (name = (function() {if (name !== false && name !== nil) {
                return (processor['opal$name='](self.opal$as_symbol(name)))
                } else {
                return (self.opal$as_symbol(processor.opal$name()))
              }; return nil; })())) !== nil && (!opal$a._isBoolean || opal$a == true))) {
                } else {
                self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.opal$freeze();
              return kind_store['opal$[]='](name, opal$scope.ProcessorExtension.opal$new(kind, processor));
              } else {
              return self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          };
        };

        def.opal$resolve_args = function(args, expect) {
          var opal$a, opal$b, self = this, opts = nil, num_args = nil, missing = nil;

          opts = (function() {if (((opal$a = (args['opal$[]'](-1)['opal$is_a?'](((opal$b = opal$opal.Object._scope.Hash) == null ? opal$opal.cm('Hash') : opal$b)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return args.opal$pop()
            } else {
            return opal$hash2([], {})
          }; return nil; })();
          if (expect['opal$=='](1)) {
            return opts};
          num_args = args.opal$size();
          if (((missing = expect['opal$-'](1)['opal$-'](num_args)))['opal$>'](0)) {
            args.opal$fill(nil, num_args, missing)
          } else if (missing['opal$<'](0)) {
            args.opal$pop(missing['opal$-@']())};
          args['opal$<<'](opts);
          return args;
        };

        return (def.opal$as_symbol = function(name) {
          var opal$a, opal$b, self = this;

          if (name !== false && name !== nil) {
            return ((function() {if (((opal$a = (name['opal$is_a?'](((opal$b = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$b)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              return name
              } else {
              return name.opal$to_sym()
            }; return nil; })())
            } else {
            return nil
          };
        }, nil) && 'as_symbol';
      })(self, null);

      (function(self) {
        var opal$scope = self._scope, def = self._proto;

        self._proto.opal$generate_name = function() {
          var self = this;

          return "extgrp" + (self.opal$next_auto_id());
        };
        self._proto.opal$next_auto_id = function() {
          var opal$a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          (((opal$a = self.auto_id) !== false && opal$a !== nil) ? opal$a : self.auto_id = -1);
          return self.auto_id = self.auto_id['opal$+'](1);
        };
        self._proto.opal$groups = function() {
          var opal$a, self = this;
          if (self.groups == null) self.groups = nil;

          return (((opal$a = self.groups) !== false && opal$a !== nil) ? opal$a : self.groups = opal$hash2([], {}));
        };
        self._proto.opal$build_registry = TMP_20 = function(name) {
          var opal$a, self = this, opal$iter = TMP_20._p, block = opal$iter || nil;

          if (name == null) {
            name = nil
          }
          TMP_20._p = null;
          if ((block !== nil)) {
            (((opal$a = name) !== false && opal$a !== nil) ? opal$a : name = self.opal$generate_name());
            return opal$scope.Registry.opal$new(opal$hash(name, block));
            } else {
            return opal$scope.Registry.opal$new()
          };
        };
        self._proto.opal$register = TMP_21 = function(args) {
          var opal$a, self = this, opal$iter = TMP_21._p, block = opal$iter || nil, argc = nil, resolved_group = nil, group = nil, opal$case = nil, name = nil;

          args = opal$slice.call(arguments, 0);
          TMP_21._p = null;
          argc = args.opal$length();
          resolved_group = (function() {if ((block !== nil)) {
            return block
          } else if (((opal$a = ((group = args.opal$pop()))['opal$!']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Extension group to register not specified"))
            } else {
            return (function() {opal$case = group;if (((opal$a = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$a)['opal$==='](opal$case)) {return group}else if (((opal$a = opal$opal.Object._scope.String) == null ? opal$opal.cm('String') : opal$a)['opal$==='](opal$case)) {return self.opal$class_for_name(group)}else if (((opal$a = opal$opal.Object._scope.Symbol) == null ? opal$opal.cm('Symbol') : opal$a)['opal$==='](opal$case)) {return self.opal$class_for_name(group.opal$to_s())}else {return group}})()
          }; return nil; })();
          name = (((opal$a = args.opal$pop()) !== false && opal$a !== nil) ? opal$a : self.opal$generate_name());
          if (((opal$a = args['opal$empty?']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            } else {
            self.opal$raise(((opal$a = opal$opal.Object._scope.ArgumentError) == null ? opal$opal.cm('ArgumentError') : opal$a).opal$new("Wrong number of arguments (" + (argc) + " for 1..2)"))
          };
          return self.opal$groups()['opal$[]='](name, resolved_group);
        };
        self._proto.opal$unregister_all = function() {
          var self = this;

          return self.groups = opal$hash2([], {});
        };
        self._proto.opal$resolve_class = function(object) {
          var opal$a, opal$b, self = this;

          if (((opal$a = (object['opal$is_a?'](((opal$b = opal$opal.Object._scope.Class) == null ? opal$opal.cm('Class') : opal$b)))) !== nil && (!opal$a._isBoolean || opal$a == true))) {
            return object
            } else {
            return (self.opal$class_for_name(object.opal$to_s()))
          };
        };
        return (self._proto.opal$class_for_name = function(qualified_name) {
          var opal$a, opal$b, TMP_22, self = this, resolved_class = nil;

          resolved_class = ((opal$a = opal$opal.Object._scope.Object) == null ? opal$opal.cm('Object') : opal$a);
          (opal$a = (opal$b = qualified_name.opal$split("::")).opal$each, opal$a._p = (TMP_22 = function(name){var self = TMP_22._s || this, opal$a;
if (name == null) name = nil;
          if (((opal$a = name['opal$empty?']()) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              return nil
            } else if (((opal$a = resolved_class['opal$const_defined?'](name)) !== nil && (!opal$a._isBoolean || opal$a == true))) {
              return resolved_class = resolved_class.opal$const_get(name)
              } else {
              return self.opal$raise("Could not resolve class for name: " + (qualified_name))
            }}, TMP_22._s = self, TMP_22), opal$a).call(opal$b);
          return resolved_class;
        }, nil) && 'class_for_name';
      })(self.opal$singleton_class());
      
    })(self)
    
  })(self)
})(Opal);
