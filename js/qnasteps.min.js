(function(a){var g=new a.QNAZipModel;a.QNAStart=(new a.QNAStep).setTitle("Select the ZIP file to import").setIntro("Select the ZIP file that contains the valid Publican book that you wish to import into PressGang CCMS.").setInputs([(new a.QNAVariables).setVariables([(new a.QNAVariable).setType(a.InputEnum.SINGLE_FILE).setIntro("Publican ZIP File").setName("ZipFile")])]).setProcessStep(function(e,c,f,b){b.ZipFile?g.getCachedEntries(b.ZipFile,function(b){var d=!1;a.angular.forEach(b,function(a,b){if("publican.cfg"===
a.filename)return d=!0,!1});d?e(null):c("Error","The ZIP file did not contain a publican.cfg file.")},function(a){c("Error","Could not process the ZIP file!")}):c("Please select a file","You need to select a file before continuing.")}).setNextStep(function(a){a(m)});var m=(new a.QNAStep).setTitle("Select the main XML file").setIntro("Select the main XML file from the ZIP archive. Publican conventions mean the file should be named after the book title in the Book_Info.xml file. This import tool will attempt to read the Book_Info.xml file to find the book title, and from that select the main XML file. You only need to make a manual selection if the import tool could not find the main XML file, or if you want to override the default selection.").setInputs([(new a.QNAVariables).setVariables([(new a.QNAVariable).setType(a.InputEnum.LISTBOX).setName("MainXMLFile").setOptions(function(e,
c,f,b){g.getCachedEntries(b.ZipFile,function(b){var d=[];a.angular.forEach(b,function(a,b){/^.*?\.xml$/.test(a.filename)&&d.push(a.filename)});e(d)})}).setValue(function(e,c,f,b){g.getCachedEntries(b.ZipFile,function(b){a.angular.forEach(b,function(d,c){if(/^en-US\/Book_Info\.xml$/.test(d.filename))return g.getTextFromFile(d,function(n){if(n=/<title>(.*?)<\/title>/.exec(n)){var h="en-US/"+n[1].replace(/ /g,"_")+".xml";a.angular.forEach(b,function(a,b){a.filename===h&&e(h)})}}),!1})});e(null)})])]).setNextStep(function(a){a(s)}),
s=(new a.QNAStep).setTitle("Create or overwrite a content spec?").setIntro("This wizard can create a new content specification, or overwrite the contents of an existing one. You will usually want to create a new content specification, but if you are reimporting a book and want to overwrite the previously imported content spec, select the overwrite option.").setInputs([(new a.QNAVariables).setVariables([(new a.QNAVariable).setType(a.InputEnum.RADIO_BUTTONS).setIntro(["Create a new content spec","Overwrite an existing content spec"]).setName("CreateOrOverwrite").setOptions(["CREATE",
"OVERWRITE"]).setValue("CREATE")])]).setNextStep(function(a,c,g,b){a("CREATE"===b.CreateOrOverwrite?l:t)}),t=(new a.QNAStep).setTitle("Create or overwrite a content spec?").setIntro("This wizard can create a new content specification, or overwrite the contents of an existing one. You will usually want to create a new content specification, but if you are reimporting a book and want to overwrite the previously imported content spec, select the overwrite option.").setInputs([(new a.QNAVariables).setVariables([(new a.QNAVariable).setType(a.InputEnum.TEXTBOX).setIntro("Existing content specification ID").setName("ExistingContentSpecID")])]).setNextStep(function(a){a(l)}),
l=(new a.QNAStep).setTitle("Importing Publican Book").setOutputs([(new a.QNAVariables).setVariables([(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Resolving xi:includes").setName("ResolvedXIIncludes"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Finding entities in XML").setName("FoundEntities"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Finding entity definitions").setName("FoundEntityDefinitions"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Removing XML preamble").setName("RemovedXMLPreamble"),
(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Parse as XML").setName("ParsedAsXML"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Finding revision history").setName("FoundRevisionHistory"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Finding author group").setName("FoundAuthorGroup"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Finding and uploading images").setName("FoundImages"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Resolving book structure").setName("ResolvedBookStructure"),
(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Resolving xrefs").setName("ResolvedXrefs"),(new a.QNAVariable).setType(a.InputEnum.CHECKBOX).setIntro("Uploading content specification").setName("UploadedContentSpecification"),(new a.QNAVariable).setType(a.InputEnum.PROGRESS).setIntro("Progress").setName("UploadProgress").setValue([11,0])])]).setEnterStep(function(e,c,f,b){var l=[],d=function(a){var h="",c;-1!==(c=b.MainXMLFile.lastIndexOf("/"))&&(h=b.MainXMLFile.substring(0,c));g.getCachedEntries(b.ZipFile,
function(c){var p=function(d){if(d>=c.length)b.UploadProgress[1]=3,b.FoundEntityDefinitions=!0,e(),m(a);else{var k=c[d];0===k.filename.indexOf(h)?g.getTextFromFile(k,function(a){for(var b=/<!ENTITY\s+[^\s]+\s+('|").*?('|")\s*>/g,c;c=b.exec(a);)-1===l.indexOf(c[0])&&l.push(c[0]);p(d+1)}):p(d+1)}};p(0)})},m=function(c){c=c.replace(/<\?xml.*?>/g,"");c=c.replace(/<!DOCTYPE[\s\S]*?\[[\s\S]*?\]>/g,"");b.UploadProgress[1]=4;b.RemovedXMLPreamble=!0;e();var d;a.DOMParser?(new a.DOMParser).parseFromString(c,
"text/xml"):(d=new a.ActiveXObject("Microsoft.XMLDOM"),d.async=!1,d.loadXML(c));b.UploadProgress[1]=5;b.ParsedAsXML=!0;e()};(function(){var l=/<\s*xi:include\s+xmlns:xi\s*=\s*("|')http:\/\/www\.w3\.org\/2001\/XInclude("|')\s+href\s*=\s*("|')(.*?\.xml)("|')\s*\/\s*>/,h=/^Common_Content/,f=function(a,d,e){var k=l.exec(a);if(k){var q="",r;-1!==(r=d.lastIndexOf("/"))&&(q=d.substring(0,r));if(h.test(k[4]))f(a.replace(k[0],""),d,e);else{var m=q+"/"+k[4];g.getTextFromFileName(b.ZipFile,m,function(b){f(b,
m,function(b){f(a.replace(k[0],b),d,e)})},function(a){c(a)})}}else e(a)};g.getTextFromFileName(b.ZipFile,b.MainXMLFile,function(c){f(c,b.MainXMLFile,function(c){b.UploadProgress[1]=1;b.ResolvedXIIncludes=!0;e();for(var g=/&.*?;/,k=[],f;f=g.exec(c);){for(var h;-1!==c.indexOf(h="#"+Math.floor(1E9*Math.random()+1)+"#"););k.push({placeholder:h,entity:f[0]});c=c.replace(RegExp(a.escapeRegExp(f[0]),"g"),h)}b.UploadProgress[1]=2;b.FoundEntities=!0;e();d(c)})})})()}).setNextStep(function(a,c,f,b){a(the_next_step)})})(this);
